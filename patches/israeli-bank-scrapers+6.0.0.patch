diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
index 3ff5ea4..2ef11ec 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
@@ -60,20 +60,17 @@ async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
   return result.data;
 }
 function fetchGetWithinPage(page, url) {
-  return page.evaluate(innerUrl => {
-    return new Promise((resolve, reject) => {
-      fetch(innerUrl, {
-        credentials: 'include'
-      }).then(result => {
-        if (result.status === 204) {
-          resolve(null);
-        } else {
-          resolve(result.json());
-        }
-      }).catch(e => {
-        reject(e);
-      });
-    });
+  return page.evaluate(async innerUrl => {
+    let result;
+    try {
+      result = await fetch(innerUrl, { credentials: 'include' });
+      if (result.status === 204) {
+        return null;
+      }
+      return result.json();
+    } catch (e) {
+      throw new Error(`fetchGetWithinPage error: ${e}, url: ${innerUrl}, stack: ${e?.stack}, status: ${result?.status}`);
+    }
   }, url);
 }
 function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
index 9bb5d71..eca7d61 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
@@ -247,13 +247,26 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     this.page.on('request', request => {
       if (request.url().includes('detector-dom.min.js')) {
         debug('force abort for request do download detector-dom.min.js resource');
-        void request.abort();
+        void request.abort(undefined, 1000);
       } else {
-        void request.continue();
+        void request.continue(undefined, 10);
       }
     });
     await (0, _browser.maskHeadlessUserAgent)(this.page);
+    debug("navigating to login page");
     await this.navigateTo(`${this.baseUrl}/personalarea/Login`);
+    await new Promise(r => setTimeout(r, 4000));
+    try {
+      const initialPageTitle = await this.page.title();
+      debug("initial page title: ", initialPageTitle);
+      if (!initialPageTitle.includes('ישראכרט') && !initialPageTitle.includes('אמריקן אקספרס')) {
+        debug("waiting for page to load");
+        await this.page.waitForNavigation({ timeout: 60_000 });
+      }
+    } catch (error) {
+      debug("error while waiting for navigation: ", error);
+    }
+
     this.emitProgress(_definitions.ScraperProgressTypes.LoggingIn);
     const validateUrl = `${this.servicesUrl}?reqName=ValidateIdData`;
     const validateRequest = {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
index 49895b5..e36f36e 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
@@ -23,9 +23,6 @@ function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol"
 function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
 function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
-const VIEWPORT_WIDTH = 1024;
-const VIEWPORT_HEIGHT = 768;
-const OK_STATUS = 200;
 const debug = (0, _debug.getDebug)('base-scraper-with-browser');
 var LoginBaseResults = /*#__PURE__*/function (LoginBaseResults) {
   LoginBaseResults["Success"] = "SUCCESS";
@@ -82,9 +79,10 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
     _defineProperty(this, "page", void 0);
   }
   getViewPort() {
-    return {
-      width: VIEWPORT_WIDTH,
-      height: VIEWPORT_HEIGHT
+    var _this$options$viewpor;
+    return (_this$options$viewpor = this.options.viewportSize) !== null && _this$options$viewpor !== void 0 ? _this$options$viewpor : {
+      width: 1024,
+      height: 768
     };
   }
   async initialize() {
@@ -169,21 +167,26 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
     debug('create a new browser page');
     return browser.newPage();
   }
-  async navigateTo(url, page, timeout, waitUntil = 'load') {
-    const pageToUse = page || this.page;
-    if (!pageToUse) {
+  async navigateTo(url, waitUntil = 'load', retries = (_this$options$navigat => (_this$options$navigat = this.options.navigationRetryCount) !== null && _this$options$navigat !== void 0 ? _this$options$navigat : 0)()) {
+    var _this$page;
+    const response = await ((_this$page = this.page) === null || _this$page === void 0 ? void 0 : _this$page.goto(url, {
+      waitUntil
+    }));
+    if (response === null) {
+      // note: response will be null when navigating to same url while changing the hash part.
+      // the condition below will always accept null as valid result.
       return;
     }
-    const options = _objectSpread(_objectSpread({}, timeout === null ? null : {
-      timeout
-    }), {}, {
-      waitUntil
-    });
-    const response = await pageToUse.goto(url, options);
-
-    // note: response will be null when navigating to same url while changing the hash part. the condition below will always accept null as valid result.
-    if (response !== null && (response === undefined || response.status() !== OK_STATUS)) {
-      throw new Error(`Error while trying to navigate to url ${url}`);
+    if (!response) {
+      throw new Error(`Error while trying to navigate to url ${url}, response is undefined`);
+    }
+    if (!response.ok()) {
+      if (retries > 0) {
+        debug(`Failed to navigate to url ${url}, status code: ${response.status()}, retrying ${retries} more times`);
+        await this.navigateTo(url, waitUntil, retries - 1);
+      } else {
+        throw new Error(`Failed to navigate to url ${url}, status code: ${response.status()}`);
+      }
     }
   }
 
@@ -213,7 +216,7 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
       await this.page.setUserAgent(loginOptions.userAgent);
     }
     debug('navigate to login url');
-    await this.navigateTo(loginOptions.loginUrl, undefined, undefined, loginOptions.waitUntil);
+    await this.navigateTo(loginOptions.loginUrl, loginOptions.waitUntil);
     if (loginOptions.checkReadiness) {
       debug("execute 'checkReadiness' interceptor provided in login options");
       await loginOptions.checkReadiness();
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
index 0757de1..8c1bf48 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
@@ -131,6 +131,18 @@ export type ScraperOptions = ScraperBrowserOptions & {
      * Please note: It will take more time to finish the process.
      */
     additionalTransactionInformation?: boolean;
+    /**
+     * Adjust the viewport size of the browser page.
+     * If not set, the default viewport size will be used.
+     */
+    viewportSize?: {
+        width: number;
+        height: number;
+    };
+    /**
+     * The number of times to retry the navigation in case of a failure (default 0)
+     */
+    navigationRetryCount?: number;
 };
 export interface OutputDataOptions {
     /**
