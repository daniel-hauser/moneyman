diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
index 843eadb..8dfa390 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
@@ -56,20 +56,17 @@ async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
   return result.data;
 }
 function fetchGetWithinPage(page, url) {
-  return page.evaluate(innerUrl => {
-    return new Promise((resolve, reject) => {
-      fetch(innerUrl, {
-        credentials: 'include'
-      }).then(result => {
-        if (result.status === 204) {
-          resolve(null);
-        } else {
-          resolve(result.json());
-        }
-      }).catch(e => {
-        reject(e);
-      });
-    });
+  return page.evaluate(async innerUrl => {
+    let result;
+    try {
+      result = await fetch(innerUrl, { credentials: 'include' });
+      if (result.status === 204) {
+        return null;
+      }
+      return result.json();
+    } catch (e) {
+      throw new Error(`fetchGetWithinPage error: ${e}, url: ${innerUrl}, stack: ${e?.stack}, status: ${result?.status}`);
+    }
   }, url);
 }
 function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
index 8827ffc..8b9220c 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
@@ -241,6 +241,16 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     });
     await (0, _browser.maskHeadlessUserAgent)(this.page);
     await this.navigateTo(`${this.baseUrl}/personalarea/Login`);
+    try {
+      const initialPageTitle = await this.page.title();
+      debug("initial page title: ", initialPageTitle);
+      if (!initialPageTitle.includes('ישראכרט') && !initialPageTitle.includes('אמריקן אקספרס')) {
+        debug("waiting for page to load");
+        await this.page.waitForNavigation({ timeout: 60_000 });
+      }
+    } catch (error) {
+      debug("error while waiting for navigation: ", error);
+    }
     this.emitProgress(_definitions.ScraperProgressTypes.LoggingIn);
     const validateUrl = `${this.servicesUrl}?reqName=ValidateIdData`;
     const validateRequest = {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
index 9faabd8..357614b 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
@@ -246,15 +246,21 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
       debug(`fetch completed transactions for card ${card.cardUniqueId}`);
       for (let i = 0; i <= months; i += 1) {
         const month = finalMonthToFetchMoment.clone().subtract(i, 'months');
-        const monthData = await (0, _fetch.fetchPostWithinPage)(this.page, TRANSACTIONS_REQUEST_ENDPOINT, {
-          cardUniqueId: card.cardUniqueId,
-          month: month.format('M'),
-          year: month.format('YYYY')
-        }, {
-          Authorization,
-          'X-Site-Id': xSiteId,
-          'Content-Type': 'application/json'
-        });
+        const monthData = await _fetch.fetchPost(
+          TRANSACTIONS_REQUEST_ENDPOINT,
+          {
+            cardUniqueId: card.cardUniqueId,
+            month: month.format('M'),
+            year: month.format('YYYY')
+          },
+          {
+            Authorization,        // from getAuthorizationHeader()
+            'X-Site-Id': xSiteId,
+            'Content-Type': 'application/json'
+          }
+        );
+        
+        debug(`✅ AFTER fetchPost - monthData: ${!!monthData}`);
         if (monthData?.statusCode !== 1) throw new Error(`failed to fetch transactions for card ${card.last4Digits}. Message: ${monthData?.title || ''}`);
         if (!isCardTransactionDetails(monthData)) {
           throw new Error('monthData is not of type CardTransactionDetails');
