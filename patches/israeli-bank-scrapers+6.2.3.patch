diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/anti-automation-detection.d.ts b/node_modules/israeli-bank-scrapers/lib/helpers/anti-automation-detection.d.ts
new file mode 100644
index 0000000..c28a2a2
--- /dev/null
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/anti-automation-detection.d.ts
@@ -0,0 +1,2 @@
+import { type Page } from 'puppeteer';
+export declare function randomMouseMove(page: Page): Promise<void>;
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/anti-automation-detection.js b/node_modules/israeli-bank-scrapers/lib/helpers/anti-automation-detection.js
new file mode 100644
index 0000000..a18728b
--- /dev/null
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/anti-automation-detection.js
@@ -0,0 +1,15 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.randomMouseMove = randomMouseMove;
+function randomMouseMove(page) {
+  const viewport = page.viewport();
+  const width = viewport?.width || 1024;
+  const height = viewport?.height || 768;
+  const x = Math.random() * width;
+  const y = Math.random() * height;
+  return page.mouse.move(x, y);
+}
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyYW5kb21Nb3VzZU1vdmUiLCJwYWdlIiwidmlld3BvcnQiLCJ3aWR0aCIsImhlaWdodCIsIngiLCJNYXRoIiwicmFuZG9tIiwieSIsIm1vdXNlIiwibW92ZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2FudGktYXV0b21hdGlvbi1kZXRlY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbU1vdXNlTW92ZShwYWdlOiBQYWdlKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHZpZXdwb3J0ID0gcGFnZS52aWV3cG9ydCgpO1xuICBjb25zdCB3aWR0aCA9IHZpZXdwb3J0Py53aWR0aCB8fCAxMDI0O1xuICBjb25zdCBoZWlnaHQgPSB2aWV3cG9ydD8uaGVpZ2h0IHx8IDc2ODtcbiAgY29uc3QgeCA9IE1hdGgucmFuZG9tKCkgKiB3aWR0aDtcbiAgY29uc3QgeSA9IE1hdGgucmFuZG9tKCkgKiBoZWlnaHQ7XG4gIHJldHVybiBwYWdlLm1vdXNlLm1vdmUoeCwgeSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVPLFNBQVNBLGVBQWVBLENBQUNDLElBQVUsRUFBaUI7RUFDekQsTUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNDLFFBQVEsQ0FBQyxDQUFDO0VBQ2hDLE1BQU1DLEtBQUssR0FBR0QsUUFBUSxFQUFFQyxLQUFLLElBQUksSUFBSTtFQUNyQyxNQUFNQyxNQUFNLEdBQUdGLFFBQVEsRUFBRUUsTUFBTSxJQUFJLEdBQUc7RUFDdEMsTUFBTUMsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLEdBQUdKLEtBQUs7RUFDL0IsTUFBTUssQ0FBQyxHQUFHRixJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLEdBQUdILE1BQU07RUFDaEMsT0FBT0gsSUFBSSxDQUFDUSxLQUFLLENBQUNDLElBQUksQ0FBQ0wsQ0FBQyxFQUFFRyxDQUFDLENBQUM7QUFDOUIiLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
index e90eea7..cc5a883 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
@@ -2,5 +2,5 @@ import { type Page } from 'puppeteer';
 export declare function fetchGet<TResult>(url: string, extraHeaders: Record<string, any>): Promise<TResult>;
 export declare function fetchPost(url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<any>;
 export declare function fetchGraphql<TResult>(url: string, query: string, variables?: Record<string, unknown>, extraHeaders?: Record<string, any>): Promise<TResult>;
-export declare function fetchGetWithinPage<TResult>(page: Page, url: string): Promise<TResult | null>;
-export declare function fetchPostWithinPage<TResult>(page: Page, url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<TResult | null>;
+export declare function fetchGetWithinPage<TResult>(page: Page, url: string, withRandomDelay?: boolean, withMouseMove?: boolean): Promise<TResult | null>;
+export declare function fetchPostWithinPage<TResult>(page: Page, url: string, data: Record<string, any>, extraHeaders?: Record<string, any>, withRandomDelay?: boolean): Promise<TResult | null>;
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
index 843eadb..2f7b9e3 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
@@ -9,6 +9,8 @@ exports.fetchGraphql = fetchGraphql;
 exports.fetchPost = fetchPost;
 exports.fetchPostWithinPage = fetchPostWithinPage;
 var _nodeFetch = _interopRequireDefault(require("node-fetch"));
+var _waiting = require("./waiting");
+var _antiAutomationDetection = require("./anti-automation-detection");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
 const JSON_CONTENT_TYPE = 'application/json';
 function getJsonHeaders() {
@@ -55,8 +57,15 @@ async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
   }
   return result.data;
 }
-function fetchGetWithinPage(page, url) {
-  return page.evaluate(innerUrl => {
+function fetchGetWithinPage(page, url, withRandomDelay = false, withMouseMove = false) {
+  let promise = Promise.resolve();
+  if (withRandomDelay) {
+    promise = promise.then(() => (0, _waiting.randomDelay)()).then(() => void 0);
+  }
+  if (withMouseMove) {
+    promise = promise.then(() => (0, _antiAutomationDetection.randomMouseMove)(page));
+  }
+  return promise.then(() => page.evaluate(innerUrl => {
     return new Promise((resolve, reject) => {
       fetch(innerUrl, {
         credentials: 'include'
@@ -70,10 +79,14 @@ function fetchGetWithinPage(page, url) {
         reject(e);
       });
     });
-  }, url);
+  }, url));
 }
-function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
-  return page.evaluate((innerUrl, innerData, innerExtraHeaders) => {
+function fetchPostWithinPage(page, url, data, extraHeaders = {}, withRandomDelay = false) {
+  let promise = Promise.resolve();
+  if (withRandomDelay) {
+    promise = promise.then(() => (0, _waiting.randomDelay)()).then(() => void 0);
+  }
+  return promise.then(() => page.evaluate((innerUrl, innerData, innerExtraHeaders) => {
     return new Promise((resolve, reject) => {
       fetch(innerUrl, {
         method: 'POST',
@@ -94,6 +107,6 @@ function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
         reject(e);
       });
     });
-  }, url, data, extraHeaders);
+  }, url, data, extraHeaders));
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
index 929b45d..e40d793 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
@@ -8,3 +8,4 @@ export declare function waitUntil<T>(asyncTest: () => Promise<T>, description?:
 export declare function raceTimeout(ms: number, promise: Promise<any>): Promise<any>;
 export declare function runSerial<T>(actions: (() => Promise<T>)[]): Promise<T[]>;
 export declare function sleep(ms: number): Promise<unknown>;
+export declare function randomDelay(minMs?: number, maxMs?: number): Promise<unknown>;
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
index b81b663..6b405db 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
@@ -5,6 +5,7 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.TimeoutError = exports.SECOND = void 0;
 exports.raceTimeout = raceTimeout;
+exports.randomDelay = randomDelay;
 exports.runSerial = runSerial;
 exports.sleep = sleep;
 exports.waitUntil = waitUntil;
@@ -55,4 +56,8 @@ function runSerial(actions) {
 function sleep(ms) {
   return new Promise(resolve => setTimeout(resolve, ms));
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3dhaXRpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjb25zdCBTRUNPTkQgPSAxMDAwO1xuXG5mdW5jdGlvbiB0aW1lb3V0UHJvbWlzZTxUPihtczogbnVtYmVyLCBwcm9taXNlOiBQcm9taXNlPFQ+LCBkZXNjcmlwdGlvbjogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBUaW1lb3V0RXJyb3IoZGVzY3JpcHRpb24pO1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9LCBtcyk7XG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgIHByb21pc2UsXG4gICAgLy8gY2FzdGluZyB0byBhdm9pZCB0eXBlIGVycm9yLSBzYWZlIHNpbmNlIHRoaXMgcHJvbWlzZSB3aWxsIGFsd2F5cyByZWplY3RcbiAgICB0aW1lb3V0IGFzIFByb21pc2U8VD4sXG4gIF0pO1xufVxuXG4vKipcbiAqIFdhaXQgdW50aWwgYSBwcm9taXNlIHJlc29sdmVzIHdpdGggYSB0cnV0aHkgdmFsdWUgb3IgcmVqZWN0IGFmdGVyIGEgdGltZW91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2FpdFVudGlsPFQ+KGFzeW5jVGVzdDogKCkgPT4gUHJvbWlzZTxUPiwgZGVzY3JpcHRpb24gPSAnJywgdGltZW91dCA9IDEwMDAwLCBpbnRlcnZhbCA9IDEwMCkge1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICBhc3luY1Rlc3QoKVxuICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCh3YWl0LCBpbnRlcnZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgd2FpdCgpO1xuICB9KTtcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKHRpbWVvdXQsIHByb21pc2UsIGRlc2NyaXB0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2VUaW1lb3V0KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8YW55Pikge1xuICByZXR1cm4gdGltZW91dFByb21pc2UobXMsIHByb21pc2UsICd0aW1lb3V0JykuY2F0Y2goZXJyID0+IHtcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3IpKSB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2VyaWFsPFQ+KGFjdGlvbnM6ICgoKSA9PiBQcm9taXNlPFQ+KVtdKTogUHJvbWlzZTxUW10+IHtcbiAgcmV0dXJuIGFjdGlvbnMucmVkdWNlKChtLCBhKSA9PiBtLnRoZW4oYXN5bmMgeCA9PiBbLi4ueCwgYXdhaXQgYSgpXSksIFByb21pc2UucmVzb2x2ZTxUW10+KG5ldyBBcnJheTxUPigpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFPLE1BQU1BLFlBQVksU0FBU0MsS0FBSyxDQUFDO0FBQUVDLE9BQUEsQ0FBQUYsWUFBQSxHQUFBQSxZQUFBO0FBRW5DLE1BQU1HLE1BQU0sR0FBQUQsT0FBQSxDQUFBQyxNQUFBLEdBQUcsSUFBSTtBQUUxQixTQUFTQyxjQUFjQSxDQUFJQyxFQUFVLEVBQUVDLE9BQW1CLEVBQUVDLFdBQW1CLEVBQWM7RUFDM0YsTUFBTUMsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxDQUFDLEVBQUVDLE1BQU0sS0FBSztJQUN6QyxNQUFNQyxFQUFFLEdBQUdDLFVBQVUsQ0FBQyxNQUFNO01BQzFCQyxZQUFZLENBQUNGLEVBQUUsQ0FBQztNQUNoQixNQUFNRyxLQUFLLEdBQUcsSUFBSWYsWUFBWSxDQUFDTyxXQUFXLENBQUM7TUFDM0NJLE1BQU0sQ0FBQ0ksS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFFVixFQUFFLENBQUM7RUFDUixDQUFDLENBQUM7RUFFRixPQUFPSSxPQUFPLENBQUNPLElBQUksQ0FBQyxDQUNsQlYsT0FBTztFQUNQO0VBQ0FFLE9BQU8sQ0FDUixDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ08sU0FBU1MsU0FBU0EsQ0FBSUMsU0FBMkIsRUFBRVgsV0FBVyxHQUFHLEVBQUUsRUFBRUMsT0FBTyxHQUFHLEtBQUssRUFBRVcsUUFBUSxHQUFHLEdBQUcsRUFBRTtFQUMzRyxNQUFNYixPQUFPLEdBQUcsSUFBSUcsT0FBTyxDQUFJLENBQUNXLE9BQU8sRUFBRVQsTUFBTSxLQUFLO0lBQ2xELFNBQVNVLElBQUlBLENBQUEsRUFBRztNQUNkSCxTQUFTLENBQUMsQ0FBQyxDQUNSSSxJQUFJLENBQUNDLEtBQUssSUFBSTtRQUNiLElBQUlBLEtBQUssRUFBRTtVQUNUSCxPQUFPLENBQUNHLEtBQUssQ0FBQztRQUNoQixDQUFDLE1BQU07VUFDTFYsVUFBVSxDQUFDUSxJQUFJLEVBQUVGLFFBQVEsQ0FBQztRQUM1QjtNQUNGLENBQUMsQ0FBQyxDQUNESyxLQUFLLENBQUMsTUFBTTtRQUNYYixNQUFNLENBQUMsQ0FBQztNQUNWLENBQUMsQ0FBQztJQUNOO0lBQ0FVLElBQUksQ0FBQyxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBQ0YsT0FBT2pCLGNBQWMsQ0FBQ0ksT0FBTyxFQUFFRixPQUFPLEVBQUVDLFdBQVcsQ0FBQztBQUN0RDtBQUVPLFNBQVNrQixXQUFXQSxDQUFDcEIsRUFBVSxFQUFFQyxPQUFxQixFQUFFO0VBQzdELE9BQU9GLGNBQWMsQ0FBQ0MsRUFBRSxFQUFFQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUNrQixLQUFLLENBQUNFLEdBQUcsSUFBSTtJQUN6RCxJQUFJLEVBQUVBLEdBQUcsWUFBWTFCLFlBQVksQ0FBQyxFQUFFLE1BQU0wQixHQUFHO0VBQy9DLENBQUMsQ0FBQztBQUNKO0FBRU8sU0FBU0MsU0FBU0EsQ0FBSUMsT0FBNkIsRUFBZ0I7RUFDeEUsT0FBT0EsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtELENBQUMsQ0FBQ1IsSUFBSSxDQUFDLE1BQU1VLENBQUMsSUFBSSxDQUFDLEdBQUdBLENBQUMsRUFBRSxNQUFNRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRXRCLE9BQU8sQ0FBQ1csT0FBTyxDQUFNLElBQUlhLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBQztBQUM3RztBQUVPLFNBQVNDLEtBQUtBLENBQUM3QixFQUFVLEVBQUU7RUFDaEMsT0FBTyxJQUFJSSxPQUFPLENBQUNXLE9BQU8sSUFBSVAsVUFBVSxDQUFDTyxPQUFPLEVBQUVmLEVBQUUsQ0FBQyxDQUFDO0FBQ3hEIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+function randomDelay(minMs = 2000, maxMs = 2500) {
+  const delay = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
+  return sleep(delay);
+}
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCIsInJhbmRvbURlbGF5IiwibWluTXMiLCJtYXhNcyIsImRlbGF5IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvd2FpdGluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZXhwb3J0IGNvbnN0IFNFQ09ORCA9IDEwMDA7XG5cbmZ1bmN0aW9uIHRpbWVvdXRQcm9taXNlPFQ+KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8VD4sIGRlc2NyaXB0aW9uOiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgdGltZW91dCA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IFRpbWVvdXRFcnJvcihkZXNjcmlwdGlvbik7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0sIG1zKTtcbiAgfSk7XG5cbiAgcmV0dXJuIFByb21pc2UucmFjZShbXG4gICAgcHJvbWlzZSxcbiAgICAvLyBjYXN0aW5nIHRvIGF2b2lkIHR5cGUgZXJyb3ItIHNhZmUgc2luY2UgdGhpcyBwcm9taXNlIHdpbGwgYWx3YXlzIHJlamVjdFxuICAgIHRpbWVvdXQgYXMgUHJvbWlzZTxUPixcbiAgXSk7XG59XG5cbi8qKlxuICogV2FpdCB1bnRpbCBhIHByb21pc2UgcmVzb2x2ZXMgd2l0aCBhIHRydXRoeSB2YWx1ZSBvciByZWplY3QgYWZ0ZXIgYSB0aW1lb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWw8VD4oYXN5bmNUZXN0OiAoKSA9PiBQcm9taXNlPFQ+LCBkZXNjcmlwdGlvbiA9ICcnLCB0aW1lb3V0ID0gMTAwMDAsIGludGVydmFsID0gMTAwKSB7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnVuY3Rpb24gd2FpdCgpIHtcbiAgICAgIGFzeW5jVGVzdCgpXG4gICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHdhaXQsIGludGVydmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB3YWl0KCk7XG4gIH0pO1xuICByZXR1cm4gdGltZW91dFByb21pc2UodGltZW91dCwgcHJvbWlzZSwgZGVzY3JpcHRpb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFjZVRpbWVvdXQobXM6IG51bWJlciwgcHJvbWlzZTogUHJvbWlzZTxhbnk+KSB7XG4gIHJldHVybiB0aW1lb3V0UHJvbWlzZShtcywgcHJvbWlzZSwgJ3RpbWVvdXQnKS5jYXRjaChlcnIgPT4ge1xuICAgIGlmICghKGVyciBpbnN0YW5jZW9mIFRpbWVvdXRFcnJvcikpIHRocm93IGVycjtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5TZXJpYWw8VD4oYWN0aW9uczogKCgpID0+IFByb21pc2U8VD4pW10pOiBQcm9taXNlPFRbXT4ge1xuICByZXR1cm4gYWN0aW9ucy5yZWR1Y2UoKG0sIGEpID0+IG0udGhlbihhc3luYyB4ID0+IFsuLi54LCBhd2FpdCBhKCldKSwgUHJvbWlzZS5yZXNvbHZlPFRbXT4obmV3IEFycmF5PFQ+KCkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tRGVsYXkobWluTXM6IG51bWJlciA9IDIwMDAsIG1heE1zOiBudW1iZXIgPSAyNTAwKSB7XG4gIGNvbnN0IGRlbGF5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heE1zIC0gbWluTXMgKyAxKSkgKyBtaW5NcztcbiAgcmV0dXJuIHNsZWVwKGRlbGF5KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxZQUFZLFNBQVNDLEtBQUssQ0FBQztBQUFFQyxPQUFBLENBQUFGLFlBQUEsR0FBQUEsWUFBQTtBQUVuQyxNQUFNRyxNQUFNLEdBQUFELE9BQUEsQ0FBQUMsTUFBQSxHQUFHLElBQUk7QUFFMUIsU0FBU0MsY0FBY0EsQ0FBSUMsRUFBVSxFQUFFQyxPQUFtQixFQUFFQyxXQUFtQixFQUFjO0VBQzNGLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxPQUFPLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxNQUFNLEtBQUs7SUFDekMsTUFBTUMsRUFBRSxHQUFHQyxVQUFVLENBQUMsTUFBTTtNQUMxQkMsWUFBWSxDQUFDRixFQUFFLENBQUM7TUFDaEIsTUFBTUcsS0FBSyxHQUFHLElBQUlmLFlBQVksQ0FBQ08sV0FBVyxDQUFDO01BQzNDSSxNQUFNLENBQUNJLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRVYsRUFBRSxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBRUYsT0FBT0ksT0FBTyxDQUFDTyxJQUFJLENBQUMsQ0FDbEJWLE9BQU87RUFDUDtFQUNBRSxPQUFPLENBQ1IsQ0FBQztBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNPLFNBQVNTLFNBQVNBLENBQUlDLFNBQTJCLEVBQUVYLFdBQVcsR0FBRyxFQUFFLEVBQUVDLE9BQU8sR0FBRyxLQUFLLEVBQUVXLFFBQVEsR0FBRyxHQUFHLEVBQUU7RUFDM0csTUFBTWIsT0FBTyxHQUFHLElBQUlHLE9BQU8sQ0FBSSxDQUFDVyxPQUFPLEVBQUVULE1BQU0sS0FBSztJQUNsRCxTQUFTVSxJQUFJQSxDQUFBLEVBQUc7TUFDZEgsU0FBUyxDQUFDLENBQUMsQ0FDUkksSUFBSSxDQUFDQyxLQUFLLElBQUk7UUFDYixJQUFJQSxLQUFLLEVBQUU7VUFDVEgsT0FBTyxDQUFDRyxLQUFLLENBQUM7UUFDaEIsQ0FBQyxNQUFNO1VBQ0xWLFVBQVUsQ0FBQ1EsSUFBSSxFQUFFRixRQUFRLENBQUM7UUFDNUI7TUFDRixDQUFDLENBQUMsQ0FDREssS0FBSyxDQUFDLE1BQU07UUFDWGIsTUFBTSxDQUFDLENBQUM7TUFDVixDQUFDLENBQUM7SUFDTjtJQUNBVSxJQUFJLENBQUMsQ0FBQztFQUNSLENBQUMsQ0FBQztFQUNGLE9BQU9qQixjQUFjLENBQUNJLE9BQU8sRUFBRUYsT0FBTyxFQUFFQyxXQUFXLENBQUM7QUFDdEQ7QUFFTyxTQUFTa0IsV0FBV0EsQ0FBQ3BCLEVBQVUsRUFBRUMsT0FBcUIsRUFBRTtFQUM3RCxPQUFPRixjQUFjLENBQUNDLEVBQUUsRUFBRUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDa0IsS0FBSyxDQUFDRSxHQUFHLElBQUk7SUFDekQsSUFBSSxFQUFFQSxHQUFHLFlBQVkxQixZQUFZLENBQUMsRUFBRSxNQUFNMEIsR0FBRztFQUMvQyxDQUFDLENBQUM7QUFDSjtBQUVPLFNBQVNDLFNBQVNBLENBQUlDLE9BQTZCLEVBQWdCO0VBQ3hFLE9BQU9BLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxLQUFLRCxDQUFDLENBQUNSLElBQUksQ0FBQyxNQUFNVSxDQUFDLElBQUksQ0FBQyxHQUFHQSxDQUFDLEVBQUUsTUFBTUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUV0QixPQUFPLENBQUNXLE9BQU8sQ0FBTSxJQUFJYSxLQUFLLENBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0c7QUFFTyxTQUFTQyxLQUFLQSxDQUFDN0IsRUFBVSxFQUFFO0VBQ2hDLE9BQU8sSUFBSUksT0FBTyxDQUFDVyxPQUFPLElBQUlQLFVBQVUsQ0FBQ08sT0FBTyxFQUFFZixFQUFFLENBQUMsQ0FBQztBQUN4RDtBQUVPLFNBQVM4QixXQUFXQSxDQUFDQyxLQUFhLEdBQUcsSUFBSSxFQUFFQyxLQUFhLEdBQUcsSUFBSSxFQUFFO0VBQ3RFLE1BQU1DLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsTUFBTSxDQUFDLENBQUMsSUFBSUosS0FBSyxHQUFHRCxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBR0EsS0FBSztFQUNyRSxPQUFPRixLQUFLLENBQUNJLEtBQUssQ0FBQztBQUNyQiIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
index 8827ffc..0d85297 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
@@ -37,7 +37,7 @@ function getAccountsUrl(servicesUrl, monthMoment) {
 }
 async function fetchAccounts(page, servicesUrl, monthMoment) {
   const dataUrl = getAccountsUrl(servicesUrl, monthMoment);
-  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl, true, true);
   if (dataResult && _lodash.default.get(dataResult, 'Header.Status') === '1' && dataResult.DashboardMonthBean) {
     const {
       cardsCharges
@@ -116,7 +116,7 @@ function convertTransactions(txns, processedDate) {
 async function fetchTransactions(page, options, companyServiceOptions, startMoment, monthMoment) {
   const accounts = await fetchAccounts(page, companyServiceOptions.servicesUrl, monthMoment);
   const dataUrl = getTransactionsUrl(companyServiceOptions.servicesUrl, monthMoment);
-  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl, true, true);
   if (dataResult && _lodash.default.get(dataResult, 'Header.Status') === '1' && dataResult.CardsTransactionsListBean) {
     const accountTxns = {};
     accounts.forEach(account => {
@@ -163,7 +163,7 @@ function getTransactionExtraDetails(servicesUrl, month, accountIndex, transactio
 }
 async function getExtraScrapTransaction(page, options, month, accountIndex, transaction) {
   const dataUrl = getTransactionExtraDetails(options.servicesUrl, month, accountIndex, transaction);
-  const data = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+  const data = await (0, _fetch.fetchGetWithinPage)(page, dataUrl, true, true);
   if (!data) {
     return transaction;
   }
@@ -195,9 +195,7 @@ function getExtraScrap(accountsWithIndex, page, options, allMonths) {
 async function fetchAllTransactions(page, options, companyServiceOptions, startMoment) {
   const futureMonthsToScrape = options.futureMonthsToScrape ?? 1;
   const allMonths = (0, _dates.default)(startMoment, futureMonthsToScrape);
-  const results = await Promise.all(allMonths.map(async monthMoment => {
-    return fetchTransactions(page, options, companyServiceOptions, startMoment, monthMoment);
-  }));
+  const results = await (0, _waiting.runSerial)(allMonths.map(monthMoment => () => fetchTransactions(page, options, companyServiceOptions, startMoment, monthMoment)));
   const finalResult = options.additionalTransactionInformation ? await getExtraScrap(results, page, companyServiceOptions, allMonths) : results;
   const combinedTxns = {};
   finalResult.forEach(result => {
@@ -251,7 +249,7 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
       checkLevel: '1',
       companyCode: this.companyCode
     };
-    const validateResult = await (0, _fetch.fetchPostWithinPage)(this.page, validateUrl, validateRequest);
+    const validateResult = await (0, _fetch.fetchPostWithinPage)(this.page, validateUrl, validateRequest, {}, true);
     if (!validateResult || !validateResult.Header || validateResult.Header.Status !== '1' || !validateResult.ValidateIdDataBean) {
       throw new Error('unknown error during login');
     }
@@ -270,7 +268,7 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
         countryCode: COUNTRY_CODE,
         idType: ID_TYPE
       };
-      const loginResult = await (0, _fetch.fetchPostWithinPage)(this.page, loginUrl, request);
+      const loginResult = await (0, _fetch.fetchPostWithinPage)(this.page, loginUrl, request, {}, true);
       debug(`user login with status '${loginResult?.status}'`);
       if (loginResult && loginResult.status === '1') {
         this.emitProgress(_definitions.ScraperProgressTypes.LoginSuccess);
@@ -315,4 +313,4 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
   }
 }
 var _default = exports.default = IsracardAmexBaseScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js
index 4e3d5aa..274052c 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js
@@ -4,8 +4,7 @@ var _max = _interopRequireWildcard(require("./max"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
-function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
-function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
+function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
 const COMPANY_ID = 'max'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Max scraper', () => {
@@ -62,4 +61,4 @@ describe('getMemo', () => {
     expect(memo).toBe(expected);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
