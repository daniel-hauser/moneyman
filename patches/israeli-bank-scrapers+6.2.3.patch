diff --git a/node_modules/israeli-bank-scrapers/lib/constants.js b/node_modules/israeli-bank-scrapers/lib/constants.js
index 3668391..e908f2b 100644
--- a/node_modules/israeli-bank-scrapers/lib/constants.js
+++ b/node_modules/israeli-bank-scrapers/lib/constants.js
@@ -14,4 +14,4 @@ const EURO_CURRENCY_SYMBOL = exports.EURO_CURRENCY_SYMBOL = '€';
 const EURO_CURRENCY = exports.EURO_CURRENCY = 'EUR';
 const ISO_DATE_FORMAT = exports.ISO_DATE_FORMAT = 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]';
 const ISO_DATE_REGEX = exports.ISO_DATE_REGEX = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3])(:[0-5][0-9]){2}\.[0-9]{3}Z$/;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTSEVLRUxfQ1VSUkVOQ1lfU1lNQk9MIiwiZXhwb3J0cyIsIlNIRUtFTF9DVVJSRU5DWV9LRVlXT1JEIiwiQUxUX1NIRUtFTF9DVVJSRU5DWSIsIlNIRUtFTF9DVVJSRU5DWSIsIkRPTExBUl9DVVJSRU5DWV9TWU1CT0wiLCJET0xMQVJfQ1VSUkVOQ1kiLCJFVVJPX0NVUlJFTkNZX1NZTUJPTCIsIkVVUk9fQ1VSUkVOQ1kiLCJJU09fREFURV9GT1JNQVQiLCJJU09fREFURV9SRUdFWCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNIRUtFTF9DVVJSRU5DWV9TWU1CT0wgPSAn4oKqJztcbmV4cG9ydCBjb25zdCBTSEVLRUxfQ1VSUkVOQ1lfS0VZV09SRCA9ICfXqVwi15cnO1xuZXhwb3J0IGNvbnN0IEFMVF9TSEVLRUxfQ1VSUkVOQ1kgPSAnTklTJztcbmV4cG9ydCBjb25zdCBTSEVLRUxfQ1VSUkVOQ1kgPSAnSUxTJztcblxuZXhwb3J0IGNvbnN0IERPTExBUl9DVVJSRU5DWV9TWU1CT0wgPSAnJCc7XG5leHBvcnQgY29uc3QgRE9MTEFSX0NVUlJFTkNZID0gJ1VTRCc7XG5cbmV4cG9ydCBjb25zdCBFVVJPX0NVUlJFTkNZX1NZTUJPTCA9ICfigqwnO1xuZXhwb3J0IGNvbnN0IEVVUk9fQ1VSUkVOQ1kgPSAnRVVSJztcblxuZXhwb3J0IGNvbnN0IElTT19EQVRFX0ZPUk1BVCA9ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJztcblxuZXhwb3J0IGNvbnN0IElTT19EQVRFX1JFR0VYID1cbiAgL15bMC05XXs0fS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMS0yXVswLTldfDNbMC0xXSlUKFswLTFdWzAtOV18MlswLTNdKSg6WzAtNV1bMC05XSl7Mn1cXC5bMC05XXszfVokLztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTUEsc0JBQXNCLEdBQUFDLE9BQUEsQ0FBQUQsc0JBQUEsR0FBRyxHQUFHO0FBQ2xDLE1BQU1FLHVCQUF1QixHQUFBRCxPQUFBLENBQUFDLHVCQUFBLEdBQUcsS0FBSztBQUNyQyxNQUFNQyxtQkFBbUIsR0FBQUYsT0FBQSxDQUFBRSxtQkFBQSxHQUFHLEtBQUs7QUFDakMsTUFBTUMsZUFBZSxHQUFBSCxPQUFBLENBQUFHLGVBQUEsR0FBRyxLQUFLO0FBRTdCLE1BQU1DLHNCQUFzQixHQUFBSixPQUFBLENBQUFJLHNCQUFBLEdBQUcsR0FBRztBQUNsQyxNQUFNQyxlQUFlLEdBQUFMLE9BQUEsQ0FBQUssZUFBQSxHQUFHLEtBQUs7QUFFN0IsTUFBTUMsb0JBQW9CLEdBQUFOLE9BQUEsQ0FBQU0sb0JBQUEsR0FBRyxHQUFHO0FBQ2hDLE1BQU1DLGFBQWEsR0FBQVAsT0FBQSxDQUFBTyxhQUFBLEdBQUcsS0FBSztBQUUzQixNQUFNQyxlQUFlLEdBQUFSLE9BQUEsQ0FBQVEsZUFBQSxHQUFHLDhCQUE4QjtBQUV0RCxNQUFNQyxjQUFjLEdBQUFULE9BQUEsQ0FBQVMsY0FBQSxHQUN6QixzR0FBc0ciLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTSEVLRUxfQ1VSUkVOQ1lfU1lNQk9MIiwiZXhwb3J0cyIsIlNIRUtFTF9DVVJSRU5DWV9LRVlXT1JEIiwiQUxUX1NIRUtFTF9DVVJSRU5DWSIsIlNIRUtFTF9DVVJSRU5DWSIsIkRPTExBUl9DVVJSRU5DWV9TWU1CT0wiLCJET0xMQVJfQ1VSUkVOQ1kiLCJFVVJPX0NVUlJFTkNZX1NZTUJPTCIsIkVVUk9fQ1VSUkVOQ1kiLCJJU09fREFURV9GT1JNQVQiLCJJU09fREFURV9SRUdFWCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNIRUtFTF9DVVJSRU5DWV9TWU1CT0wgPSAn4oKqJztcbmV4cG9ydCBjb25zdCBTSEVLRUxfQ1VSUkVOQ1lfS0VZV09SRCA9ICfXqVwi15cnO1xuZXhwb3J0IGNvbnN0IEFMVF9TSEVLRUxfQ1VSUkVOQ1kgPSAnTklTJztcbmV4cG9ydCBjb25zdCBTSEVLRUxfQ1VSUkVOQ1kgPSAnSUxTJztcblxuZXhwb3J0IGNvbnN0IERPTExBUl9DVVJSRU5DWV9TWU1CT0wgPSAnJCc7XG5leHBvcnQgY29uc3QgRE9MTEFSX0NVUlJFTkNZID0gJ1VTRCc7XG5cbmV4cG9ydCBjb25zdCBFVVJPX0NVUlJFTkNZX1NZTUJPTCA9ICfigqwnO1xuZXhwb3J0IGNvbnN0IEVVUk9fQ1VSUkVOQ1kgPSAnRVVSJztcblxuZXhwb3J0IGNvbnN0IElTT19EQVRFX0ZPUk1BVCA9ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJztcblxuZXhwb3J0IGNvbnN0IElTT19EQVRFX1JFR0VYID0gL15bMC05XXs0fS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMS0yXVswLTldfDNbMC0xXSlUKFswLTFdWzAtOV18MlswLTNdKSg6WzAtNV1bMC05XSl7Mn1cXC5bMC05XXszfVokLztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTUEsc0JBQXNCLEdBQUFDLE9BQUEsQ0FBQUQsc0JBQUEsR0FBRyxHQUFHO0FBQ2xDLE1BQU1FLHVCQUF1QixHQUFBRCxPQUFBLENBQUFDLHVCQUFBLEdBQUcsS0FBSztBQUNyQyxNQUFNQyxtQkFBbUIsR0FBQUYsT0FBQSxDQUFBRSxtQkFBQSxHQUFHLEtBQUs7QUFDakMsTUFBTUMsZUFBZSxHQUFBSCxPQUFBLENBQUFHLGVBQUEsR0FBRyxLQUFLO0FBRTdCLE1BQU1DLHNCQUFzQixHQUFBSixPQUFBLENBQUFJLHNCQUFBLEdBQUcsR0FBRztBQUNsQyxNQUFNQyxlQUFlLEdBQUFMLE9BQUEsQ0FBQUssZUFBQSxHQUFHLEtBQUs7QUFFN0IsTUFBTUMsb0JBQW9CLEdBQUFOLE9BQUEsQ0FBQU0sb0JBQUEsR0FBRyxHQUFHO0FBQ2hDLE1BQU1DLGFBQWEsR0FBQVAsT0FBQSxDQUFBTyxhQUFBLEdBQUcsS0FBSztBQUUzQixNQUFNQyxlQUFlLEdBQUFSLE9BQUEsQ0FBQVEsZUFBQSxHQUFHLDhCQUE4QjtBQUV0RCxNQUFNQyxjQUFjLEdBQUFULE9BQUEsQ0FBQVMsY0FBQSxHQUFHLHNHQUFzRyIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/definitions.d.ts b/node_modules/israeli-bank-scrapers/lib/definitions.d.ts
index 4752885..ae1d74d 100644
--- a/node_modules/israeli-bank-scrapers/lib/definitions.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/definitions.d.ts
@@ -1,12 +1,14 @@
 export declare const PASSWORD_FIELD = "password";
 export declare enum CompanyTypes {
     hapoalim = "hapoalim",
+    hapoalimBeOnline = "hapoalimBeOnline",
     beinleumi = "beinleumi",
     union = "union",
     amex = "amex",
     isracard = "isracard",
     visaCal = "visaCal",
     max = "max",
+    leumiCard = "leumiCard",
     otsarHahayal = "otsarHahayal",
     discount = "discount",
     mercantile = "mercantile",
@@ -16,14 +18,17 @@ export declare enum CompanyTypes {
     yahav = "yahav",
     behatsdaa = "behatsdaa",
     beyahadBishvilha = "beyahadBishvilha",
-    oneZero = "oneZero",
-    pagi = "pagi"
+    oneZero = "oneZero"
 }
 export declare const SCRAPERS: {
     hapoalim: {
         name: string;
         loginFields: string[];
     };
+    hapoalimBeOnline: {
+        name: string;
+        loginFields: string[];
+    };
     leumi: {
         name: string;
         loginFields: string[];
@@ -44,6 +49,10 @@ export declare const SCRAPERS: {
         name: string;
         loginFields: string[];
     };
+    leumiCard: {
+        name: string;
+        loginFields: string[];
+    };
     max: {
         name: string;
         loginFields: string[];
@@ -88,10 +97,6 @@ export declare const SCRAPERS: {
         name: string;
         loginFields: string[];
     };
-    pagi: {
-        name: string;
-        loginFields: string[];
-    };
 };
 export declare enum ScraperProgressTypes {
     Initializing = "INITIALIZING",
diff --git a/node_modules/israeli-bank-scrapers/lib/definitions.js b/node_modules/israeli-bank-scrapers/lib/definitions.js
index e9fe28e..fa2f571 100644
--- a/node_modules/israeli-bank-scrapers/lib/definitions.js
+++ b/node_modules/israeli-bank-scrapers/lib/definitions.js
@@ -9,12 +9,14 @@ exports.ScraperProgressTypes = exports.SCRAPERS = exports.PASSWORD_FIELD = expor
 const PASSWORD_FIELD = exports.PASSWORD_FIELD = 'password';
 let CompanyTypes = exports.CompanyTypes = /*#__PURE__*/function (CompanyTypes) {
   CompanyTypes["hapoalim"] = "hapoalim";
+  CompanyTypes["hapoalimBeOnline"] = "hapoalimBeOnline";
   CompanyTypes["beinleumi"] = "beinleumi";
   CompanyTypes["union"] = "union";
   CompanyTypes["amex"] = "amex";
   CompanyTypes["isracard"] = "isracard";
   CompanyTypes["visaCal"] = "visaCal";
   CompanyTypes["max"] = "max";
+  CompanyTypes["leumiCard"] = "leumiCard";
   CompanyTypes["otsarHahayal"] = "otsarHahayal";
   CompanyTypes["discount"] = "discount";
   CompanyTypes["mercantile"] = "mercantile";
@@ -25,7 +27,6 @@ let CompanyTypes = exports.CompanyTypes = /*#__PURE__*/function (CompanyTypes) {
   CompanyTypes["behatsdaa"] = "behatsdaa";
   CompanyTypes["beyahadBishvilha"] = "beyahadBishvilha";
   CompanyTypes["oneZero"] = "oneZero";
-  CompanyTypes["pagi"] = "pagi";
   return CompanyTypes;
 }({});
 const SCRAPERS = exports.SCRAPERS = {
@@ -33,6 +34,11 @@ const SCRAPERS = exports.SCRAPERS = {
     name: 'Bank Hapoalim',
     loginFields: ['userCode', PASSWORD_FIELD]
   },
+  [CompanyTypes.hapoalimBeOnline]: {
+    // TODO remove in Major version
+    name: 'Bank Hapoalim',
+    loginFields: ['userCode', PASSWORD_FIELD]
+  },
   [CompanyTypes.leumi]: {
     name: 'Bank Leumi',
     loginFields: ['username', PASSWORD_FIELD]
@@ -53,6 +59,11 @@ const SCRAPERS = exports.SCRAPERS = {
     name: 'Bank Otsar Hahayal',
     loginFields: ['username', PASSWORD_FIELD]
   },
+  [CompanyTypes.leumiCard]: {
+    // TODO remove in Major version
+    name: 'Leumi Card',
+    loginFields: ['username', PASSWORD_FIELD]
+  },
   [CompanyTypes.max]: {
     name: 'Max',
     loginFields: ['username', PASSWORD_FIELD]
@@ -96,10 +107,6 @@ const SCRAPERS = exports.SCRAPERS = {
   [CompanyTypes.behatsdaa]: {
     name: 'Behatsdaa',
     loginFields: ['id', PASSWORD_FIELD]
-  },
-  [CompanyTypes.pagi]: {
-    name: 'Pagi',
-    loginFields: ['username', PASSWORD_FIELD]
   }
 };
 let ScraperProgressTypes = exports.ScraperProgressTypes = /*#__PURE__*/function (ScraperProgressTypes) {
@@ -113,4 +120,4 @@ let ScraperProgressTypes = exports.ScraperProgressTypes = /*#__PURE__*/function
   ScraperProgressTypes["Terminating"] = "TERMINATING";
   return ScraperProgressTypes;
 }({});
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQQVNTV09SRF9GSUVMRCIsImV4cG9ydHMiLCJDb21wYW55VHlwZXMiLCJTQ1JBUEVSUyIsImhhcG9hbGltIiwibmFtZSIsImxvZ2luRmllbGRzIiwibGV1bWkiLCJtaXpyYWhpIiwiZGlzY291bnQiLCJtZXJjYW50aWxlIiwib3RzYXJIYWhheWFsIiwibWF4IiwidmlzYUNhbCIsImlzcmFjYXJkIiwiYW1leCIsInVuaW9uIiwiYmVpbmxldW1pIiwibWFzc2FkIiwieWFoYXYiLCJiZXlhaGFkQmlzaHZpbGhhIiwib25lWmVybyIsImJlaGF0c2RhYSIsInBhZ2kiLCJTY3JhcGVyUHJvZ3Jlc3NUeXBlcyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZpbml0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOT1RJQ0U6IGF2b2lkIGNoYW5naW5nIGV4cG9ydGVkIGtleXMgYXMgdGhleSBhcmUgcGFydCBvZiB0aGUgcHVibGljIGFwaVxuXG5leHBvcnQgY29uc3QgUEFTU1dPUkRfRklFTEQgPSAncGFzc3dvcmQnO1xuXG5leHBvcnQgZW51bSBDb21wYW55VHlwZXMge1xuICBoYXBvYWxpbSA9ICdoYXBvYWxpbScsXG4gIGJlaW5sZXVtaSA9ICdiZWlubGV1bWknLFxuICB1bmlvbiA9ICd1bmlvbicsXG4gIGFtZXggPSAnYW1leCcsXG4gIGlzcmFjYXJkID0gJ2lzcmFjYXJkJyxcbiAgdmlzYUNhbCA9ICd2aXNhQ2FsJyxcbiAgbWF4ID0gJ21heCcsXG4gIG90c2FySGFoYXlhbCA9ICdvdHNhckhhaGF5YWwnLFxuICBkaXNjb3VudCA9ICdkaXNjb3VudCcsXG4gIG1lcmNhbnRpbGUgPSAnbWVyY2FudGlsZScsXG4gIG1penJhaGkgPSAnbWl6cmFoaScsXG4gIGxldW1pID0gJ2xldW1pJyxcbiAgbWFzc2FkID0gJ21hc3NhZCcsXG4gIHlhaGF2ID0gJ3lhaGF2JyxcbiAgYmVoYXRzZGFhID0gJ2JlaGF0c2RhYScsXG4gIGJleWFoYWRCaXNodmlsaGEgPSAnYmV5YWhhZEJpc2h2aWxoYScsXG4gIG9uZVplcm8gPSAnb25lWmVybycsXG4gIHBhZ2kgPSAncGFnaScsXG59XG5cbmV4cG9ydCBjb25zdCBTQ1JBUEVSUyA9IHtcbiAgW0NvbXBhbnlUeXBlcy5oYXBvYWxpbV06IHtcbiAgICBuYW1lOiAnQmFuayBIYXBvYWxpbScsXG4gICAgbG9naW5GaWVsZHM6IFsndXNlckNvZGUnLCBQQVNTV09SRF9GSUVMRF0sXG4gIH0sXG4gIFtDb21wYW55VHlwZXMubGV1bWldOiB7XG4gICAgbmFtZTogJ0JhbmsgTGV1bWknLFxuICAgIGxvZ2luRmllbGRzOiBbJ3VzZXJuYW1lJywgUEFTU1dPUkRfRklFTERdLFxuICB9LFxuICBbQ29tcGFueVR5cGVzLm1penJhaGldOiB7XG4gICAgbmFtZTogJ01penJhaGkgQmFuaycsXG4gICAgbG9naW5GaWVsZHM6IFsndXNlcm5hbWUnLCBQQVNTV09SRF9GSUVMRF0sXG4gIH0sXG4gIFtDb21wYW55VHlwZXMuZGlzY291bnRdOiB7XG4gICAgbmFtZTogJ0Rpc2NvdW50IEJhbmsnLFxuICAgIGxvZ2luRmllbGRzOiBbJ2lkJywgUEFTU1dPUkRfRklFTEQsICdudW0nXSxcbiAgfSxcbiAgW0NvbXBhbnlUeXBlcy5tZXJjYW50aWxlXToge1xuICAgIG5hbWU6ICdNZXJjYW50aWxlIEJhbmsnLFxuICAgIGxvZ2luRmllbGRzOiBbJ2lkJywgUEFTU1dPUkRfRklFTEQsICdudW0nXSxcbiAgfSxcbiAgW0NvbXBhbnlUeXBlcy5vdHNhckhhaGF5YWxdOiB7XG4gICAgbmFtZTogJ0JhbmsgT3RzYXIgSGFoYXlhbCcsXG4gICAgbG9naW5GaWVsZHM6IFsndXNlcm5hbWUnLCBQQVNTV09SRF9GSUVMRF0sXG4gIH0sXG4gIFtDb21wYW55VHlwZXMubWF4XToge1xuICAgIG5hbWU6ICdNYXgnLFxuICAgIGxvZ2luRmllbGRzOiBbJ3VzZXJuYW1lJywgUEFTU1dPUkRfRklFTERdLFxuICB9LFxuICBbQ29tcGFueVR5cGVzLnZpc2FDYWxdOiB7XG4gICAgbmFtZTogJ1Zpc2EgQ2FsJyxcbiAgICBsb2dpbkZpZWxkczogWyd1c2VybmFtZScsIFBBU1NXT1JEX0ZJRUxEXSxcbiAgfSxcbiAgW0NvbXBhbnlUeXBlcy5pc3JhY2FyZF06IHtcbiAgICBuYW1lOiAnSXNyYWNhcmQnLFxuICAgIGxvZ2luRmllbGRzOiBbJ2lkJywgJ2NhcmQ2RGlnaXRzJywgUEFTU1dPUkRfRklFTERdLFxuICB9LFxuICBbQ29tcGFueVR5cGVzLmFtZXhdOiB7XG4gICAgbmFtZTogJ0FtZXgnLFxuICAgIGxvZ2luRmllbGRzOiBbJ2lkJywgJ2NhcmQ2RGlnaXRzJywgUEFTU1dPUkRfRklFTERdLFxuICB9LFxuICBbQ29tcGFueVR5cGVzLnVuaW9uXToge1xuICAgIG5hbWU6ICdVbmlvbicsXG4gICAgbG9naW5GaWVsZHM6IFsndXNlcm5hbWUnLCBQQVNTV09SRF9GSUVMRF0sXG4gIH0sXG4gIFtDb21wYW55VHlwZXMuYmVpbmxldW1pXToge1xuICAgIG5hbWU6ICdCZWlubGV1bWknLFxuICAgIGxvZ2luRmllbGRzOiBbJ3VzZXJuYW1lJywgUEFTU1dPUkRfRklFTERdLFxuICB9LFxuICBbQ29tcGFueVR5cGVzLm1hc3NhZF06IHtcbiAgICBuYW1lOiAnTWFzc2FkJyxcbiAgICBsb2dpbkZpZWxkczogWyd1c2VybmFtZScsIFBBU1NXT1JEX0ZJRUxEXSxcbiAgfSxcbiAgW0NvbXBhbnlUeXBlcy55YWhhdl06IHtcbiAgICBuYW1lOiAnQmFuayBZYWhhdicsXG4gICAgbG9naW5GaWVsZHM6IFsndXNlcm5hbWUnLCAnbmF0aW9uYWxJRCcsIFBBU1NXT1JEX0ZJRUxEXSxcbiAgfSxcbiAgW0NvbXBhbnlUeXBlcy5iZXlhaGFkQmlzaHZpbGhhXToge1xuICAgIG5hbWU6ICdCZXlhaGFkIEJpc2h2aWxoYScsXG4gICAgbG9naW5GaWVsZHM6IFsnaWQnLCBQQVNTV09SRF9GSUVMRF0sXG4gIH0sXG4gIFtDb21wYW55VHlwZXMub25lWmVyb106IHtcbiAgICBuYW1lOiAnT25lIFplcm8nLFxuICAgIGxvZ2luRmllbGRzOiBbJ2VtYWlsJywgUEFTU1dPUkRfRklFTEQsICdvdHBDb2RlUmV0cmlldmVyJywgJ3Bob25lTnVtYmVyJywgJ290cExvbmdUZXJtVG9rZW4nXSxcbiAgfSxcbiAgW0NvbXBhbnlUeXBlcy5iZWhhdHNkYWFdOiB7XG4gICAgbmFtZTogJ0JlaGF0c2RhYScsXG4gICAgbG9naW5GaWVsZHM6IFsnaWQnLCBQQVNTV09SRF9GSUVMRF0sXG4gIH0sXG4gIFtDb21wYW55VHlwZXMucGFnaV06IHtcbiAgICBuYW1lOiAnUGFnaScsXG4gICAgbG9naW5GaWVsZHM6IFsndXNlcm5hbWUnLCBQQVNTV09SRF9GSUVMRF0sXG4gIH0sXG59O1xuXG5leHBvcnQgZW51bSBTY3JhcGVyUHJvZ3Jlc3NUeXBlcyB7XG4gIEluaXRpYWxpemluZyA9ICdJTklUSUFMSVpJTkcnLFxuICBTdGFydFNjcmFwaW5nID0gJ1NUQVJUX1NDUkFQSU5HJyxcbiAgTG9nZ2luZ0luID0gJ0xPR0dJTkdfSU4nLFxuICBMb2dpblN1Y2Nlc3MgPSAnTE9HSU5fU1VDQ0VTUycsXG4gIExvZ2luRmFpbGVkID0gJ0xPR0lOX0ZBSUxFRCcsXG4gIENoYW5nZVBhc3N3b3JkID0gJ0NIQU5HRV9QQVNTV09SRCcsXG4gIEVuZFNjcmFwaW5nID0gJ0VORF9TQ1JBUElORycsXG4gIFRlcm1pbmF0aW5nID0gJ1RFUk1JTkFUSU5HJyxcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRU8sTUFBTUEsY0FBYyxHQUFBQyxPQUFBLENBQUFELGNBQUEsR0FBRyxVQUFVO0FBQUMsSUFFN0JFLFlBQVksR0FBQUQsT0FBQSxDQUFBQyxZQUFBLDBCQUFaQSxZQUFZO0VBQVpBLFlBQVk7RUFBWkEsWUFBWTtFQUFaQSxZQUFZO0VBQVpBLFlBQVk7RUFBWkEsWUFBWTtFQUFaQSxZQUFZO0VBQVpBLFlBQVk7RUFBWkEsWUFBWTtFQUFaQSxZQUFZO0VBQVpBLFlBQVk7RUFBWkEsWUFBWTtFQUFaQSxZQUFZO0VBQVpBLFlBQVk7RUFBWkEs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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/elements-interactions.js b/node_modules/israeli-bank-scrapers/lib/helpers/elements-interactions.js
index efd9183..643cb6a 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/elements-interactions.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/elements-interactions.js
@@ -15,6 +15,8 @@ exports.setValue = setValue;
 exports.waitUntilElementDisappear = waitUntilElementDisappear;
 exports.waitUntilElementFound = waitUntilElementFound;
 exports.waitUntilIframeFound = waitUntilIframeFound;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
 var _waiting = require("./waiting");
 async function waitUntilElementFound(page, elementSelector, onlyVisible = false, timeout) {
   await page.waitForSelector(elementSelector, {
@@ -68,7 +70,6 @@ async function clickLink(page, aSelector) {
 async function pageEvalAll(page, selector, defaultResult, callback, ...args) {
   let result = defaultResult;
   try {
-    await page.waitForFunction(() => document.readyState === 'complete');
     result = await page.$$eval(selector, callback, ...args);
   } catch (e) {
     // TODO temporary workaround to puppeteer@1.5.0 which breaks $$eval bevahvior until they will release a new version.
@@ -81,7 +82,6 @@ async function pageEvalAll(page, selector, defaultResult, callback, ...args) {
 async function pageEval(pageOrFrame, selector, defaultResult, callback, ...args) {
   let result = defaultResult;
   try {
-    await pageOrFrame.waitForFunction(() => document.readyState === 'complete');
     result = await pageOrFrame.$eval(selector, callback, ...args);
   } catch (e) {
     // TODO temporary workaround to puppeteer@1.5.0 which breaks $$eval bevahvior until they will release a new version.
@@ -108,4 +108,4 @@ async function dropdownElements(page, selector) {
   }, `${selector} > option`);
   return options;
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
index e90eea7..97b02b1 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
@@ -3,4 +3,6 @@ export declare function fetchGet<TResult>(url: string, extraHeaders: Record<stri
 export declare function fetchPost(url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<any>;
 export declare function fetchGraphql<TResult>(url: string, query: string, variables?: Record<string, unknown>, extraHeaders?: Record<string, any>): Promise<TResult>;
 export declare function fetchGetWithinPage<TResult>(page: Page, url: string): Promise<TResult | null>;
+export declare function safeFetchGetWithinPage<T>(page: Page, url: string): Promise<T | null>;
 export declare function fetchPostWithinPage<TResult>(page: Page, url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<TResult | null>;
+export declare function safeFetchPostWithinPage<T>(page: Page, url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<T | null>;
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
index 843eadb..ae3c1d5 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
@@ -8,12 +8,21 @@ exports.fetchGetWithinPage = fetchGetWithinPage;
 exports.fetchGraphql = fetchGraphql;
 exports.fetchPost = fetchPost;
 exports.fetchPostWithinPage = fetchPostWithinPage;
+exports.safeFetchGetWithinPage = safeFetchGetWithinPage;
+exports.safeFetchPostWithinPage = safeFetchPostWithinPage;
+require("core-js/modules/es.promise.js");
 var _nodeFetch = _interopRequireDefault(require("node-fetch"));
+var _waiting = require("./waiting");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const JSON_CONTENT_TYPE = 'application/json';
 function getJsonHeaders() {
   return {
-    Accept: JSON_CONTENT_TYPE,
+    'Accept': JSON_CONTENT_TYPE,
     'Content-Type': JSON_CONTENT_TYPE
   };
 }
@@ -35,22 +44,20 @@ async function fetchGet(url, extraHeaders) {
 async function fetchPost(url, data, extraHeaders = {}) {
   const request = {
     method: 'POST',
-    headers: {
-      ...getJsonHeaders(),
-      ...extraHeaders
-    },
+    headers: _objectSpread(_objectSpread({}, getJsonHeaders()), extraHeaders),
     body: JSON.stringify(data)
   };
   const result = await (0, _nodeFetch.default)(url, request);
   return result.json();
 }
 async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
+  var _result$errors;
   const result = await fetchPost(url, {
     operationName: null,
     query,
     variables
   }, extraHeaders);
-  if (result.errors?.length) {
+  if ((_result$errors = result.errors) !== null && _result$errors !== void 0 && _result$errors.length) {
     throw new Error(result.errors[0].message);
   }
   return result.data;
@@ -72,6 +79,19 @@ function fetchGetWithinPage(page, url) {
     });
   }, url);
 }
+async function safeFetchGetWithinPage(page, url) {
+  try {
+    await (0, _waiting.randomSleep)(2, 3);
+    return await fetchGetWithinPage(page, url);
+  } catch (error) {
+    const errorMessage = error instanceof Error ? error.message : String(error);
+    if (errorMessage.includes('Block Automation') || errorMessage.includes('Unexpected token')) {
+      throw new Error(`Automation blocked. Server returned: ${errorMessage}`);
+    }
+    // Re-throw other errors immediately
+    throw error;
+  }
+}
 function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
   return page.evaluate((innerUrl, innerData, innerExtraHeaders) => {
     return new Promise((resolve, reject) => {
@@ -96,4 +116,17 @@ function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
     });
   }, url, data, extraHeaders);
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+async function safeFetchPostWithinPage(page, url, data, extraHeaders = {}) {
+  try {
+    await (0, _waiting.randomSleep)(1, 2);
+    return await fetchPostWithinPage(page, url, data, extraHeaders);
+  } catch (error) {
+    const errorMessage = error instanceof Error ? error.message : String(error);
+    if (errorMessage.includes('Block Automation') || errorMessage.includes('Unexpected token')) {
+      throw new Error(`Automation blocked. Server returned: ${errorMessage}`);
+    }
+    // Re-throw other errors immediately
+    throw error;
+  }
+}
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/navigation.js b/node_modules/israeli-bank-scrapers/lib/helpers/navigation.js
index 3506677..9682b9c 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/navigation.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/navigation.js
@@ -8,6 +8,9 @@ exports.waitForNavigation = waitForNavigation;
 exports.waitForNavigationAndDomLoad = waitForNavigationAndDomLoad;
 exports.waitForRedirect = waitForRedirect;
 exports.waitForUrl = waitForUrl;
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.constructor.js");
+require("core-js/modules/es.regexp.exec.js");
 var _waiting = require("./waiting");
 async function waitForNavigation(pageOrFrame, options) {
   await pageOrFrame.waitForNavigation(options);
@@ -36,4 +39,4 @@ async function waitForUrl(pageOrFrame, url, timeout = 20000, clientSide = false)
     return url instanceof RegExp ? url.test(current) : url === current;
   }, `waiting for url to be ${url}`, timeout, 1000);
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2FpdGluZyIsInJlcXVpcmUiLCJ3YWl0Rm9yTmF2aWdhdGlvbiIsInBhZ2VPckZyYW1lIiwib3B0aW9ucyIsIndhaXRGb3JOYXZpZ2F0aW9uQW5kRG9tTG9hZCIsInBhZ2UiLCJ3YWl0VW50aWwiLCJnZXRDdXJyZW50VXJsIiwiY2xpZW50U2lkZSIsImV2YWx1YXRlIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidXJsIiwid2FpdEZvclJlZGlyZWN0IiwidGltZW91dCIsImlnbm9yZUxpc3QiLCJpbml0aWFsIiwiY3VycmVudCIsImluY2x1ZGVzIiwid2FpdEZvclVybCIsIlJlZ0V4cCIsInRlc3QiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9uYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgRnJhbWUsIHR5cGUgUGFnZSwgdHlwZSBXYWl0Rm9yT3B0aW9ucyB9IGZyb20gJ3B1cHBldGVlcic7XG5pbXBvcnQgeyB3YWl0VW50aWwgfSBmcm9tICcuL3dhaXRpbmcnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvck5hdmlnYXRpb24ocGFnZU9yRnJhbWU6IFBhZ2UgfCBGcmFtZSwgb3B0aW9ucz86IFdhaXRGb3JPcHRpb25zKSB7XG4gIGF3YWl0IHBhZ2VPckZyYW1lLndhaXRGb3JOYXZpZ2F0aW9uKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvck5hdmlnYXRpb25BbmREb21Mb2FkKHBhZ2U6IFBhZ2UpIHtcbiAgYXdhaXQgd2FpdEZvck5hdmlnYXRpb24ocGFnZSwgeyB3YWl0VW50aWw6ICdkb21jb250ZW50bG9hZGVkJyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWU6IFBhZ2UgfCBGcmFtZSwgY2xpZW50U2lkZSA9IGZhbHNlKSB7XG4gIGlmIChjbGllbnRTaWRlKSB7XG4gICAgcmV0dXJuIHBhZ2VPckZyYW1lLmV2YWx1YXRlKCgpID0+IHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgfVxuXG4gIHJldHVybiBwYWdlT3JGcmFtZS51cmwoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JSZWRpcmVjdChcbiAgcGFnZU9yRnJhbWU6IFBhZ2UgfCBGcmFtZSxcbiAgdGltZW91dCA9IDIwMDAwLFxuICBjbGllbnRTaWRlID0gZmFsc2UsXG4gIGlnbm9yZUxpc3Q6IHN0cmluZ1tdID0gW10sXG4pIHtcbiAgY29uc3QgaW5pdGlhbCA9IGF3YWl0IGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWUsIGNsaWVudFNpZGUpO1xuXG4gIGF3YWl0IHdhaXRVbnRpbChcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gYXdhaXQgZ2V0Q3VycmVudFVybChwYWdlT3JGcmFtZSwgY2xpZW50U2lkZSk7XG4gICAgICByZXR1cm4gY3VycmVudCAhPT0gaW5pdGlhbCAmJiAhaWdub3JlTGlzdC5pbmNsdWRlcyhjdXJyZW50KTtcbiAgICB9LFxuICAgIGB3YWl0aW5nIGZvciByZWRpcmVjdCBmcm9tICR7aW5pdGlhbH1gLFxuICAgIHRpbWVvdXQsXG4gICAgMTAwMCxcbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JVcmwocGFnZU9yRnJhbWU6IFBhZ2UgfCBGcmFtZSwgdXJsOiBzdHJpbmcgfCBSZWdFeHAsIHRpbWVvdXQgPSAyMDAwMCwgY2xpZW50U2lkZSA9IGZhbHNlKSB7XG4gIGF3YWl0IHdhaXRVbnRpbChcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gYXdhaXQgZ2V0Q3VycmVudFVybChwYWdlT3JGcmFtZSwgY2xpZW50U2lkZSk7XG4gICAgICByZXR1cm4gdXJsIGluc3RhbmNlb2YgUmVnRXhwID8gdXJsLnRlc3QoY3VycmVudCkgOiB1cmwgPT09IGN1cnJlbnQ7XG4gICAgfSxcbiAgICBgd2FpdGluZyBmb3IgdXJsIHRvIGJlICR7dXJsfWAsXG4gICAgdGltZW91dCxcbiAgICAxMDAwLFxuICApO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0EsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBRU8sZUFBZUMsaUJBQWlCQSxDQUFDQyxXQUF5QixFQUFFQyxPQUF3QixFQUFFO0VBQzNGLE1BQU1ELFdBQVcsQ0FBQ0QsaUJBQWlCLENBQUNFLE9BQU8sQ0FBQztBQUM5QztBQUVPLGVBQWVDLDJCQUEyQkEsQ0FBQ0MsSUFBVSxFQUFFO0VBQzVELE1BQU1KLGlCQUFpQixDQUFDSSxJQUFJLEVBQUU7SUFBRUMsU0FBUyxFQUFFO0VBQW1CLENBQUMsQ0FBQztBQUNsRTtBQUVPLFNBQVNDLGFBQWFBLENBQUNMLFdBQXlCLEVBQUVNLFVBQVUsR0FBRyxLQUFLLEVBQUU7RUFDM0UsSUFBSUEsVUFBVSxFQUFFO0lBQ2QsT0FBT04sV0FBVyxDQUFDTyxRQUFRLENBQUMsTUFBTUMsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQztFQUN6RDtFQUVBLE9BQU9WLFdBQVcsQ0FBQ1csR0FBRyxDQUFDLENBQUM7QUFDMUI7QUFFTyxlQUFlQyxlQUFlQSxDQUNuQ1osV0FBeUIsRUFDekJhLE9BQU8sR0FBRyxLQUFLLEVBQ2ZQLFVBQVUsR0FBRyxLQUFLLEVBQ2xCUSxVQUFvQixHQUFHLEVBQUUsRUFDekI7RUFDQSxNQUFNQyxPQUFPLEdBQUcsTUFBTVYsYUFBYSxDQUFDTCxXQUFXLEVBQUVNLFVBQVUsQ0FBQztFQUU1RCxNQUFNLElBQUFGLGtCQUFTLEVBQ2IsWUFBWTtJQUNWLE1BQU1ZLE9BQU8sR0FBRyxNQUFNWCxhQUFhLENBQUNMLFdBQVcsRUFBRU0sVUFBVSxDQUFDO0lBQzVELE9BQU9VLE9BQU8sS0FBS0QsT0FBTyxJQUFJLENBQUNELFVBQVUsQ0FBQ0csUUFBUSxDQUFDRCxPQUFPLENBQUM7RUFDN0QsQ0FBQyxFQUNELDZCQUE2QkQsT0FBTyxFQUFFLEVBQ3RDRixPQUFPLEVBQ1AsSUFDRixDQUFDO0FBQ0g7QUFFTyxlQUFlSyxVQUFVQSxDQUFDbEIsV0FBeUIsRUFBRVcsR0FBb0IsRUFBRUUsT0FBTyxHQUFHLEtBQUssRUFBRVAsVUFBVSxHQUFHLEtBQUssRUFBRTtFQUNySCxNQUFNLElBQUFGLGtCQUFTLEVBQ2IsWUFBWTtJQUNWLE1BQU1ZLE9BQU8sR0FBRyxNQUFNWCxhQUFhLENBQUNMLFdBQVcsRUFBRU0sVUFBVSxDQUFDO0lBQzVELE9BQU9LLEdBQUcsWUFBWVEsTUFBTSxHQUFHUixHQUFHLENBQUNTLElBQUksQ0FBQ0osT0FBTyxDQUFDLEdBQUdMLEdBQUcsS0FBS0ssT0FBTztFQUNwRSxDQUFDLEVBQ0QseUJBQXlCTCxHQUFHLEVBQUUsRUFDOUJFLE9BQU8sRUFDUCxJQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2FpdGluZyIsInJlcXVpcmUiLCJ3YWl0Rm9yTmF2aWdhdGlvbiIsInBhZ2VPckZyYW1lIiwib3B0aW9ucyIsIndhaXRGb3JOYXZpZ2F0aW9uQW5kRG9tTG9hZCIsInBhZ2UiLCJ3YWl0VW50aWwiLCJnZXRDdXJyZW50VXJsIiwiY2xpZW50U2lkZSIsImV2YWx1YXRlIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidXJsIiwid2FpdEZvclJlZGlyZWN0IiwidGltZW91dCIsImlnbm9yZUxpc3QiLCJpbml0aWFsIiwiY3VycmVudCIsImluY2x1ZGVzIiwid2FpdEZvclVybCIsIlJlZ0V4cCIsInRlc3QiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9uYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHR5cGUgRnJhbWUsXG4gIHR5cGUgUGFnZSwgdHlwZSBXYWl0Rm9yT3B0aW9ucyxcbn0gZnJvbSAncHVwcGV0ZWVyJztcbmltcG9ydCB7IHdhaXRVbnRpbCB9IGZyb20gJy4vd2FpdGluZyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yTmF2aWdhdGlvbihwYWdlT3JGcmFtZTogUGFnZSB8IEZyYW1lLCBvcHRpb25zPzogV2FpdEZvck9wdGlvbnMpIHtcbiAgYXdhaXQgcGFnZU9yRnJhbWUud2FpdEZvck5hdmlnYXRpb24ob3B0aW9ucyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yTmF2aWdhdGlvbkFuZERvbUxvYWQocGFnZTogUGFnZSkge1xuICBhd2FpdCB3YWl0Rm9yTmF2aWdhdGlvbihwYWdlLCB7IHdhaXRVbnRpbDogJ2RvbWNvbnRlbnRsb2FkZWQnIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFVybChwYWdlT3JGcmFtZTogUGFnZSB8IEZyYW1lLCBjbGllbnRTaWRlID0gZmFsc2UpIHtcbiAgaWYgKGNsaWVudFNpZGUpIHtcbiAgICByZXR1cm4gcGFnZU9yRnJhbWUuZXZhbHVhdGUoKCkgPT4gd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICB9XG5cbiAgcmV0dXJuIHBhZ2VPckZyYW1lLnVybCgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvclJlZGlyZWN0KHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIHRpbWVvdXQgPSAyMDAwMCxcbiAgY2xpZW50U2lkZSA9IGZhbHNlLCBpZ25vcmVMaXN0OiBzdHJpbmdbXSA9IFtdKSB7XG4gIGNvbnN0IGluaXRpYWwgPSBhd2FpdCBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lLCBjbGllbnRTaWRlKTtcblxuICBhd2FpdCB3YWl0VW50aWwoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBhd2FpdCBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lLCBjbGllbnRTaWRlKTtcbiAgICByZXR1cm4gY3VycmVudCAhPT0gaW5pdGlhbCAmJiAhaWdub3JlTGlzdC5pbmNsdWRlcyhjdXJyZW50KTtcbiAgfSwgYHdhaXRpbmcgZm9yIHJlZGlyZWN0IGZyb20gJHtpbml0aWFsfWAsIHRpbWVvdXQsIDEwMDApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvclVybChwYWdlT3JGcmFtZTogUGFnZSB8IEZyYW1lLCB1cmw6IHN0cmluZyB8IFJlZ0V4cCwgdGltZW91dCA9IDIwMDAwLCBjbGllbnRTaWRlID0gZmFsc2UpIHtcbiAgYXdhaXQgd2FpdFVudGlsKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50ID0gYXdhaXQgZ2V0Q3VycmVudFVybChwYWdlT3JGcmFtZSwgY2xpZW50U2lkZSk7XG4gICAgcmV0dXJuIHVybCBpbnN0YW5jZW9mIFJlZ0V4cCA/IHVybC50ZXN0KGN1cnJlbnQpIDogdXJsID09PSBjdXJyZW50O1xuICB9LCBgd2FpdGluZyBmb3IgdXJsIHRvIGJlICR7dXJsfWAsIHRpbWVvdXQsIDEwMDApO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBSUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBRU8sZUFBZUMsaUJBQWlCQSxDQUFDQyxXQUF5QixFQUFFQyxPQUF3QixFQUFFO0VBQzNGLE1BQU1ELFdBQVcsQ0FBQ0QsaUJBQWlCLENBQUNFLE9BQU8sQ0FBQztBQUM5QztBQUVPLGVBQWVDLDJCQUEyQkEsQ0FBQ0MsSUFBVSxFQUFFO0VBQzVELE1BQU1KLGlCQUFpQixDQUFDSSxJQUFJLEVBQUU7SUFBRUMsU0FBUyxFQUFFO0VBQW1CLENBQUMsQ0FBQztBQUNsRTtBQUVPLFNBQVNDLGFBQWFBLENBQUNMLFdBQXlCLEVBQUVNLFVBQVUsR0FBRyxLQUFLLEVBQUU7RUFDM0UsSUFBSUEsVUFBVSxFQUFFO0lBQ2QsT0FBT04sV0FBVyxDQUFDTyxRQUFRLENBQUMsTUFBTUMsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQztFQUN6RDtFQUVBLE9BQU9WLFdBQVcsQ0FBQ1csR0FBRyxDQUFDLENBQUM7QUFDMUI7QUFFTyxlQUFlQyxlQUFlQSxDQUFDWixXQUF5QixFQUFFYSxPQUFPLEdBQUcsS0FBSyxFQUM5RVAsVUFBVSxHQUFHLEtBQUssRUFBRVEsVUFBb0IsR0FBRyxFQUFFLEVBQUU7RUFDL0MsTUFBTUMsT0FBTyxHQUFHLE1BQU1WLGFBQWEsQ0FBQ0wsV0FBVyxFQUFFTSxVQUFVLENBQUM7RUFFNUQsTUFBTSxJQUFBRixrQkFBUyxFQUFDLFlBQVk7SUFDMUIsTUFBTVksT0FBTyxHQUFHLE1BQU1YLGFBQWEsQ0FBQ0wsV0FBVyxFQUFFTSxVQUFVLENBQUM7SUFDNUQsT0FBT1UsT0FBTyxLQUFLRCxPQUFPLElBQUksQ0FBQ0QsVUFBVSxDQUFDRyxRQUFRLENBQUNELE9BQU8sQ0FBQztFQUM3RCxDQUFDLEVBQUUsNkJBQTZCRCxPQUFPLEVBQUUsRUFBRUYsT0FBTyxFQUFFLElBQUksQ0FBQztBQUMzRDtBQUVPLGVBQWVLLFVBQVVBLENBQUNsQixXQUF5QixFQUFFVyxHQUFvQixFQUFFRSxPQUFPLEdBQUcsS0FBSyxFQUFFUCxVQUFVLEdBQUcsS0FBSyxFQUFFO0VBQ3JILE1BQU0sSUFBQUYsa0JBQVMsRUFBQyxZQUFZO0lBQzFCLE1BQU1ZLE9BQU8sR0FBRyxNQUFNWCxhQUFhLENBQUNMLFdBQVcsRUFBRU0sVUFBVSxDQUFDO0lBQzVELE9BQU9LLEdBQUcsWUFBWVEsTUFBTSxHQUFHUixHQUFHLENBQUNTLElBQUksQ0FBQ0osT0FBTyxDQUFDLEdBQUdMLEdBQUcsS0FBS0ssT0FBTztFQUNwRSxDQUFDLEVBQUUseUJBQXlCTCxHQUFHLEVBQUUsRUFBRUUsT0FBTyxFQUFFLElBQUksQ0FBQztBQUNuRCIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/storage.js b/node_modules/israeli-bank-scrapers/lib/helpers/storage.js
index 0e1bfe4..bc0659e 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/storage.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/storage.js
@@ -4,6 +4,7 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.getFromSessionStorage = getFromSessionStorage;
+require("core-js/modules/es.promise.js");
 async function getFromSessionStorage(page, key) {
   const strData = await page.evaluate(k => {
     return sessionStorage.getItem(k);
@@ -11,4 +12,4 @@ async function getFromSessionStorage(page, key) {
   if (!strData) return null;
   return JSON.parse(strData);
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRGcm9tU2Vzc2lvblN0b3JhZ2UiLCJwYWdlIiwia2V5Iiwic3RyRGF0YSIsImV2YWx1YXRlIiwiayIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3N0b3JhZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZyb21TZXNzaW9uU3RvcmFnZTxUPihwYWdlOiBQYWdlLCBrZXk6IHN0cmluZyk6IFByb21pc2U8VCB8IG51bGw+IHtcbiAgY29uc3Qgc3RyRGF0YSA9IGF3YWl0IHBhZ2UuZXZhbHVhdGUoKGs6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGspO1xuICB9LCBrZXkpO1xuXG4gIGlmICghc3RyRGF0YSkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyRGF0YSkgYXMgVDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRU8sZUFBZUEscUJBQXFCQSxDQUFJQyxJQUFVLEVBQUVDLEdBQVcsRUFBcUI7RUFDekYsTUFBTUMsT0FBTyxHQUFHLE1BQU1GLElBQUksQ0FBQ0csUUFBUSxDQUFFQyxDQUFTLElBQUs7SUFDakQsT0FBT0MsY0FBYyxDQUFDQyxPQUFPLENBQUNGLENBQUMsQ0FBQztFQUNsQyxDQUFDLEVBQUVILEdBQUcsQ0FBQztFQUVQLElBQUksQ0FBQ0MsT0FBTyxFQUFFLE9BQU8sSUFBSTtFQUV6QixPQUFPSyxJQUFJLENBQUNDLEtBQUssQ0FBQ04sT0FBTyxDQUFDO0FBQzVCIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRGcm9tU2Vzc2lvblN0b3JhZ2UiLCJwYWdlIiwia2V5Iiwic3RyRGF0YSIsImV2YWx1YXRlIiwiayIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3N0b3JhZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZyb21TZXNzaW9uU3RvcmFnZTxUPihwYWdlOiBQYWdlLCBrZXk6IHN0cmluZyk6IFByb21pc2U8VCB8IG51bGw+IHtcbiAgY29uc3Qgc3RyRGF0YSA9IGF3YWl0IHBhZ2UuZXZhbHVhdGUoKGs6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGspO1xuICB9LCBrZXkpO1xuXG4gIGlmICghc3RyRGF0YSkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyRGF0YSkgYXMgVDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVPLGVBQWVBLHFCQUFxQkEsQ0FBSUMsSUFBVSxFQUFFQyxHQUFXLEVBQXFCO0VBQ3pGLE1BQU1DLE9BQU8sR0FBRyxNQUFNRixJQUFJLENBQUNHLFFBQVEsQ0FBRUMsQ0FBUyxJQUFLO0lBQ2pELE9BQU9DLGNBQWMsQ0FBQ0MsT0FBTyxDQUFDRixDQUFDLENBQUM7RUFDbEMsQ0FBQyxFQUFFSCxHQUFHLENBQUM7RUFFUCxJQUFJLENBQUNDLE9BQU8sRUFBRSxPQUFPLElBQUk7RUFFekIsT0FBT0ssSUFBSSxDQUFDQyxLQUFLLENBQUNOLE9BQU8sQ0FBQztBQUM1QiIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/transactions.js b/node_modules/israeli-bank-scrapers/lib/helpers/transactions.js
index d63eea5..aec6a50 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/transactions.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/transactions.js
@@ -10,6 +10,11 @@ var _lodash = _interopRequireDefault(require("lodash"));
 var _moment = _interopRequireDefault(require("moment"));
 var _transactions = require("../transactions");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 function isNormalTransaction(txn) {
   return txn && txn.type === _transactions.TransactionTypes.Normal;
 }
@@ -24,9 +29,7 @@ function isInitialInstallmentTransaction(txn) {
 }
 function fixInstallments(txns) {
   return txns.map(txn => {
-    const clonedTxn = {
-      ...txn
-    };
+    const clonedTxn = _objectSpread({}, txn);
     if (isInstallmentTransaction(clonedTxn) && isNonInitialInstallmentTransaction(clonedTxn) && clonedTxn.installments) {
       const dateMoment = (0, _moment.default)(clonedTxn.date);
       const actualDateMoment = dateMoment.add(clonedTxn.installments.number - 1, 'month');
@@ -44,4 +47,4 @@ function filterOldTransactions(txns, startMoment, combineInstallments) {
     return !combineInstallments && startMoment.isSameOrBefore(txn.date) || combineNeededAndInitialOrNormal && startMoment.isSameOrBefore(txn.date);
   });
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbW9tZW50IiwiX3RyYW5zYWN0aW9ucyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImlzTm9ybWFsVHJhbnNhY3Rpb24iLCJ0eG4iLCJ0eXBlIiwiVHJhbnNhY3Rpb25UeXBlcyIsIk5vcm1hbCIsImlzSW5zdGFsbG1lbnRUcmFuc2FjdGlvbiIsIkluc3RhbGxtZW50cyIsImlzTm9uSW5pdGlhbEluc3RhbGxtZW50VHJhbnNhY3Rpb24iLCJpbnN0YWxsbWVudHMiLCJudW1iZXIiLCJpc0luaXRpYWxJbnN0YWxsbWVudFRyYW5zYWN0aW9uIiwiZml4SW5zdGFsbG1lbnRzIiwidHhucyIsIm1hcCIsImNsb25lZFR4biIsImRhdGVNb21lbnQiLCJtb21lbnQiLCJkYXRlIiwiYWN0dWFsRGF0ZU1vbWVudCIsImFkZCIsInRvSVNPU3RyaW5nIiwic29ydFRyYW5zYWN0aW9uc0J5RGF0ZSIsIl8iLCJzb3J0QnkiLCJmaWx0ZXJPbGRUcmFuc2FjdGlvbnMiLCJzdGFydE1vbWVudCIsImNvbWJpbmVJbnN0YWxsbWVudHMiLCJmaWx0ZXIiLCJjb21iaW5lTmVlZGVkQW5kSW5pdGlhbE9yTm9ybWFsIiwiaXNTYW1lT3JCZWZvcmUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy90cmFuc2FjdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBtb21lbnQsIHsgdHlwZSBNb21lbnQgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25UeXBlcywgdHlwZSBUcmFuc2FjdGlvbiB9IGZyb20gJy4uL3RyYW5zYWN0aW9ucyc7XG5cbmZ1bmN0aW9uIGlzTm9ybWFsVHJhbnNhY3Rpb24odHhuOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR4biAmJiB0eG4udHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlcy5Ob3JtYWw7XG59XG5cbmZ1bmN0aW9uIGlzSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG46IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHhuICYmIHR4bi50eXBlID09PSBUcmFuc2FjdGlvblR5cGVzLkluc3RhbGxtZW50cztcbn1cblxuZnVuY3Rpb24gaXNOb25Jbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG46IFRyYW5zYWN0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc0luc3RhbGxtZW50VHJhbnNhY3Rpb24odHhuKSAmJiAhIXR4bi5pbnN0YWxsbWVudHMgJiYgdHhuLmluc3RhbGxtZW50cy5udW1iZXIgPiAxO1xufVxuXG5mdW5jdGlvbiBpc0luaXRpYWxJbnN0YWxsbWVudFRyYW5zYWN0aW9uKHR4bjogVHJhbnNhY3Rpb24pOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG4pICYmICEhdHhuLmluc3RhbGxtZW50cyAmJiB0eG4uaW5zdGFsbG1lbnRzLm51bWJlciA9PT0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpeEluc3RhbGxtZW50cyh0eG5zOiBUcmFuc2FjdGlvbltdKTogVHJhbnNhY3Rpb25bXSB7XG4gIHJldHVybiB0eG5zLm1hcCgodHhuOiBUcmFuc2FjdGlvbikgPT4ge1xuICAgIGNvbnN0IGNsb25lZFR4biA9IHsgLi4udHhuIH07XG5cbiAgICBpZiAoXG4gICAgICBpc0luc3RhbGxtZW50VHJhbnNhY3Rpb24oY2xvbmVkVHhuKSAmJlxuICAgICAgaXNOb25Jbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbihjbG9uZWRUeG4pICYmXG4gICAgICBjbG9uZWRUeG4uaW5zdGFsbG1lbnRzXG4gICAgKSB7XG4gICAgICBjb25zdCBkYXRlTW9tZW50ID0gbW9tZW50KGNsb25lZFR4bi5kYXRlKTtcbiAgICAgIGNvbnN0IGFjdHVhbERhdGVNb21lbnQgPSBkYXRlTW9tZW50LmFkZChjbG9uZWRUeG4uaW5zdGFsbG1lbnRzLm51bWJlciAtIDEsICdtb250aCcpO1xuICAgICAgY2xvbmVkVHhuLmRhdGUgPSBhY3R1YWxEYXRlTW9tZW50LnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZWRUeG47XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydFRyYW5zYWN0aW9uc0J5RGF0ZSh0eG5zOiBUcmFuc2FjdGlvbltdKSB7XG4gIHJldHVybiBfLnNvcnRCeSh0eG5zLCBbJ2RhdGUnXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPbGRUcmFuc2FjdGlvbnModHhuczogVHJhbnNhY3Rpb25bXSwgc3RhcnRNb21lbnQ6IE1vbWVudCwgY29tYmluZUluc3RhbGxtZW50czogYm9vbGVhbikge1xuICByZXR1cm4gdHhucy5maWx0ZXIodHhuID0+IHtcbiAgICBjb25zdCBjb21iaW5lTmVlZGVkQW5kSW5pdGlhbE9yTm9ybWFsID1cbiAgICAgIGNvbWJpbmVJbnN0YWxsbWVudHMgJiYgKGlzTm9ybWFsVHJhbnNhY3Rpb24odHhuKSB8fCBpc0luaXRpYWxJbnN0YWxsbWVudFRyYW5zYWN0aW9uKHR4bikpO1xuICAgIHJldHVybiAoXG4gICAgICAoIWNvbWJpbmVJbnN0YWxsbWVudHMgJiYgc3RhcnRNb21lbnQuaXNTYW1lT3JCZWZvcmUodHhuLmRhdGUpKSB8fFxuICAgICAgKGNvbWJpbmVOZWVkZWRBbmRJbml0aWFsT3JOb3JtYWwgJiYgc3RhcnRNb21lbnQuaXNTYW1lT3JCZWZvcmUodHhuLmRhdGUpKVxuICAgICk7XG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUFxRSxTQUFBRCx1QkFBQUksQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUVyRSxTQUFTRyxtQkFBbUJBLENBQUNDLEdBQVEsRUFBVztFQUM5QyxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsSUFBSSxLQUFLQyw4QkFBZ0IsQ0FBQ0MsTUFBTTtBQUNwRDtBQUVBLFNBQVNDLHdCQUF3QkEsQ0FBQ0osR0FBUSxFQUFXO0VBQ25ELE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxJQUFJLEtBQUtDLDhCQUFnQixDQUFDRyxZQUFZO0FBQzFEO0FBRUEsU0FBU0Msa0NBQWtDQSxDQUFDTixHQUFnQixFQUFXO0VBQ3JFLE9BQU9JLHdCQUF3QixDQUFDSixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUNBLEdBQUcsQ0FBQ08sWUFBWSxJQUFJUCxHQUFHLENBQUNPLFlBQVksQ0FBQ0MsTUFBTSxHQUFHLENBQUM7QUFDM0Y7QUFFQSxTQUFTQywrQkFBK0JBLENBQUNULEdBQWdCLEVBQVc7RUFDbEUsT0FBT0ksd0JBQXdCLENBQUNKLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQ0EsR0FBRyxDQUFDTyxZQUFZLElBQUlQLEdBQUcsQ0FBQ08sWUFBWSxDQUFDQyxNQUFNLEtBQUssQ0FBQztBQUM3RjtBQUVPLFNBQVNFLGVBQWVBLENBQUNDLElBQW1CLEVBQWlCO0VBQ2xFLE9BQU9BLElBQUksQ0FBQ0MsR0FBRyxDQUFFWixHQUFnQixJQUFLO0lBQ3BDLE1BQU1hLFNBQVMsR0FBRztNQUFFLEdBQUdiO0lBQUksQ0FBQztJQUU1QixJQUNFSSx3QkFBd0IsQ0FBQ1MsU0FBUyxDQUFDLElBQ25DUCxrQ0FBa0MsQ0FBQ08sU0FBUyxDQUFDLElBQzdDQSxTQUFTLENBQUNOLFlBQVksRUFDdEI7TUFDQSxNQUFNTyxVQUFVLEdBQUcsSUFBQUMsZUFBTSxFQUFDRixTQUFTLENBQUNHLElBQUksQ0FBQztNQUN6QyxNQUFNQyxnQkFBZ0IsR0FBR0gsVUFBVSxDQUFDSSxHQUFHLENBQUNMLFNBQVMsQ0FBQ04sWUFBWSxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQztNQUNuRkssU0FBUyxDQUFDRyxJQUFJLEdBQUdDLGdCQUFnQixDQUFDRSxXQUFXLENBQUMsQ0FBQztJQUNqRDtJQUNBLE9BQU9OLFNBQVM7RUFDbEIsQ0FBQyxDQUFDO0FBQ0o7QUFFTyxTQUFTTyxzQkFBc0JBLENBQUNULElBQW1CLEVBQUU7RUFDMUQsT0FBT1UsZUFBQyxDQUFDQyxNQUFNLENBQUNYLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDO0FBRU8sU0FBU1kscUJBQXFCQSxDQUFDWixJQUFtQixFQUFFYSxXQUFtQixFQUFFQyxtQkFBNEIsRUFBRTtFQUM1RyxPQUFPZCxJQUFJLENBQUNlLE1BQU0sQ0FBQzFCLEdBQUcsSUFBSTtJQUN4QixNQUFNMkIsK0JBQStCLEdBQ25DRixtQkFBbUIsS0FBSzFCLG1CQUFtQixDQUFDQyxHQUFHLENBQUMsSUFBSVMsK0JBQStCLENBQUNULEdBQUcsQ0FBQyxDQUFDO0lBQzNGLE9BQ0csQ0FBQ3lCLG1CQUFtQixJQUFJRCxXQUFXLENBQUNJLGNBQWMsQ0FBQzVCLEdBQUcsQ0FBQ2dCLElBQUksQ0FBQyxJQUM1RFcsK0JBQStCLElBQUlILFdBQVcsQ0FBQ0ksY0FBYyxDQUFDNUIsR0FBRyxDQUFDZ0IsSUFBSSxDQUFFO0VBRTdFLENBQUMsQ0FBQztBQUNKIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbW9tZW50IiwiX3RyYW5zYWN0aW9ucyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm93bktleXMiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJpc05vcm1hbFRyYW5zYWN0aW9uIiwidHhuIiwidHlwZSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJOb3JtYWwiLCJpc0luc3RhbGxtZW50VHJhbnNhY3Rpb24iLCJJbnN0YWxsbWVudHMiLCJpc05vbkluaXRpYWxJbnN0YWxsbWVudFRyYW5zYWN0aW9uIiwiaW5zdGFsbG1lbnRzIiwibnVtYmVyIiwiaXNJbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbiIsImZpeEluc3RhbGxtZW50cyIsInR4bnMiLCJtYXAiLCJjbG9uZWRUeG4iLCJkYXRlTW9tZW50IiwibW9tZW50IiwiZGF0ZSIsImFjdHVhbERhdGVNb21lbnQiLCJhZGQiLCJ0b0lTT1N0cmluZyIsInNvcnRUcmFuc2FjdGlvbnNCeURhdGUiLCJfIiwic29ydEJ5IiwiZmlsdGVyT2xkVHJhbnNhY3Rpb25zIiwic3RhcnRNb21lbnQiLCJjb21iaW5lSW5zdGFsbG1lbnRzIiwiY29tYmluZU5lZWRlZEFuZEluaXRpYWxPck5vcm1hbCIsImlzU2FtZU9yQmVmb3JlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvdHJhbnNhY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbW9tZW50LCB7IHR5cGUgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7XG4gIFRyYW5zYWN0aW9uVHlwZXMsXG4gIHR5cGUgVHJhbnNhY3Rpb24sXG59IGZyb20gJy4uL3RyYW5zYWN0aW9ucyc7XG5cbmZ1bmN0aW9uIGlzTm9ybWFsVHJhbnNhY3Rpb24odHhuOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR4biAmJiB0eG4udHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlcy5Ob3JtYWw7XG59XG5cbmZ1bmN0aW9uIGlzSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG46IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHhuICYmIHR4bi50eXBlID09PSBUcmFuc2FjdGlvblR5cGVzLkluc3RhbGxtZW50cztcbn1cblxuZnVuY3Rpb24gaXNOb25Jbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG46IFRyYW5zYWN0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc0luc3RhbGxtZW50VHJhbnNhY3Rpb24odHhuKSAmJiAhIXR4bi5pbnN0YWxsbWVudHMgJiYgdHhuLmluc3RhbGxtZW50cy5udW1iZXIgPiAxO1xufVxuXG5mdW5jdGlvbiBpc0luaXRpYWxJbnN0YWxsbWVudFRyYW5zYWN0aW9uKHR4bjogVHJhbnNhY3Rpb24pOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG4pICYmICEhdHhuLmluc3RhbGxtZW50cyAmJiB0eG4uaW5zdGFsbG1lbnRzLm51bWJlciA9PT0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpeEluc3RhbGxtZW50cyh0eG5zOiBUcmFuc2FjdGlvbltdKTogVHJhbnNhY3Rpb25bXSB7XG4gIHJldHVybiB0eG5zLm1hcCgodHhuOiBUcmFuc2FjdGlvbikgPT4ge1xuICAgIGNvbnN0IGNsb25lZFR4biA9IHsgLi4udHhuIH07XG5cbiAgICBpZiAoaXNJbnN0YWxsbWVudFRyYW5zYWN0aW9uKGNsb25lZFR4bikgJiYgaXNOb25Jbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbihjbG9uZWRUeG4pICYmXG4gICAgICBjbG9uZWRUeG4uaW5zdGFsbG1lbnRzKSB7XG4gICAgICBjb25zdCBkYXRlTW9tZW50ID0gbW9tZW50KGNsb25lZFR4bi5kYXRlKTtcbiAgICAgIGNvbnN0IGFjdHVhbERhdGVNb21lbnQgPSBkYXRlTW9tZW50LmFkZChjbG9uZWRUeG4uaW5zdGFsbG1lbnRzLm51bWJlciAtIDEsICdtb250aCcpO1xuICAgICAgY2xvbmVkVHhuLmRhdGUgPSBhY3R1YWxEYXRlTW9tZW50LnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZWRUeG47XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydFRyYW5zYWN0aW9uc0J5RGF0ZSh0eG5zOiBUcmFuc2FjdGlvbltdKSB7XG4gIHJldHVybiBfLnNvcnRCeSh0eG5zLCBbJ2RhdGUnXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPbGRUcmFuc2FjdGlvbnModHhuczogVHJhbnNhY3Rpb25bXSxcbiAgc3RhcnRNb21lbnQ6IE1vbWVudCwgY29tYmluZUluc3RhbGxtZW50czogYm9vbGVhbikge1xuICByZXR1cm4gdHhucy5maWx0ZXIoKHR4bikgPT4ge1xuICAgIGNvbnN0IGNvbWJpbmVOZWVkZWRBbmRJbml0aWFsT3JOb3JtYWwgPVxuICAgICAgY29tYmluZUluc3RhbGxtZW50cyAmJiAoaXNOb3JtYWxUcmFuc2FjdGlvbih0eG4pIHx8IGlzSW5pdGlhbEluc3RhbGxtZW50VHJhbnNhY3Rpb24odHhuKSk7XG4gICAgcmV0dXJuICghY29tYmluZUluc3RhbGxtZW50cyAmJiBzdGFydE1vbWVudC5pc1NhbWVPckJlZm9yZSh0eG4uZGF0ZSkpIHx8XG4gICAgICAgICAgIChjb21iaW5lTmVlZGVkQW5kSW5pdGlhbE9yTm9ybWFsICYmIHN0YXJ0TW9tZW50LmlzU2FtZU9yQmVmb3JlKHR4bi5kYXRlKSk7XG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUd5QixTQUFBRCx1QkFBQUksQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUFBLFNBQUFHLFFBQUFILENBQUEsRUFBQUksQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBUCxDQUFBLE9BQUFNLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFSLENBQUEsR0FBQUksQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVgsQ0FBQSxFQUFBSSxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBZixDQUFBLGFBQUFJLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRCxPQUFBLENBQUFHLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQWUs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
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
index 929b45d..206f867 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
@@ -8,3 +8,4 @@ export declare function waitUntil<T>(asyncTest: () => Promise<T>, description?:
 export declare function raceTimeout(ms: number, promise: Promise<any>): Promise<any>;
 export declare function runSerial<T>(actions: (() => Promise<T>)[]): Promise<T[]>;
 export declare function sleep(ms: number): Promise<unknown>;
+export declare function randomSleep(minSeconds?: number, maxSeconds?: number): Promise<unknown>;
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
index b81b663..8cd2140 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
@@ -5,9 +5,12 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.TimeoutError = exports.SECOND = void 0;
 exports.raceTimeout = raceTimeout;
+exports.randomSleep = randomSleep;
 exports.runSerial = runSerial;
 exports.sleep = sleep;
 exports.waitUntil = waitUntil;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
 class TimeoutError extends Error {}
 exports.TimeoutError = TimeoutError;
 const SECOND = exports.SECOND = 1000;
@@ -55,4 +58,8 @@ function runSerial(actions) {
 function sleep(ms) {
   return new Promise(resolve => setTimeout(resolve, ms));
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3dhaXRpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjb25zdCBTRUNPTkQgPSAxMDAwO1xuXG5mdW5jdGlvbiB0aW1lb3V0UHJvbWlzZTxUPihtczogbnVtYmVyLCBwcm9taXNlOiBQcm9taXNlPFQ+LCBkZXNjcmlwdGlvbjogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBUaW1lb3V0RXJyb3IoZGVzY3JpcHRpb24pO1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9LCBtcyk7XG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgIHByb21pc2UsXG4gICAgLy8gY2FzdGluZyB0byBhdm9pZCB0eXBlIGVycm9yLSBzYWZlIHNpbmNlIHRoaXMgcHJvbWlzZSB3aWxsIGFsd2F5cyByZWplY3RcbiAgICB0aW1lb3V0IGFzIFByb21pc2U8VD4sXG4gIF0pO1xufVxuXG4vKipcbiAqIFdhaXQgdW50aWwgYSBwcm9taXNlIHJlc29sdmVzIHdpdGggYSB0cnV0aHkgdmFsdWUgb3IgcmVqZWN0IGFmdGVyIGEgdGltZW91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2FpdFVudGlsPFQ+KGFzeW5jVGVzdDogKCkgPT4gUHJvbWlzZTxUPiwgZGVzY3JpcHRpb24gPSAnJywgdGltZW91dCA9IDEwMDAwLCBpbnRlcnZhbCA9IDEwMCkge1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICBhc3luY1Rlc3QoKVxuICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCh3YWl0LCBpbnRlcnZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgd2FpdCgpO1xuICB9KTtcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKHRpbWVvdXQsIHByb21pc2UsIGRlc2NyaXB0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2VUaW1lb3V0KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8YW55Pikge1xuICByZXR1cm4gdGltZW91dFByb21pc2UobXMsIHByb21pc2UsICd0aW1lb3V0JykuY2F0Y2goZXJyID0+IHtcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3IpKSB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2VyaWFsPFQ+KGFjdGlvbnM6ICgoKSA9PiBQcm9taXNlPFQ+KVtdKTogUHJvbWlzZTxUW10+IHtcbiAgcmV0dXJuIGFjdGlvbnMucmVkdWNlKChtLCBhKSA9PiBtLnRoZW4oYXN5bmMgeCA9PiBbLi4ueCwgYXdhaXQgYSgpXSksIFByb21pc2UucmVzb2x2ZTxUW10+KG5ldyBBcnJheTxUPigpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFPLE1BQU1BLFlBQVksU0FBU0MsS0FBSyxDQUFDO0FBQUVDLE9BQUEsQ0FBQUYsWUFBQSxHQUFBQSxZQUFBO0FBRW5DLE1BQU1HLE1BQU0sR0FBQUQsT0FBQSxDQUFBQyxNQUFBLEdBQUcsSUFBSTtBQUUxQixTQUFTQyxjQUFjQSxDQUFJQyxFQUFVLEVBQUVDLE9BQW1CLEVBQUVDLFdBQW1CLEVBQWM7RUFDM0YsTUFBTUMsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxDQUFDLEVBQUVDLE1BQU0sS0FBSztJQUN6QyxNQUFNQyxFQUFFLEdBQUdDLFVBQVUsQ0FBQyxNQUFNO01BQzFCQyxZQUFZLENBQUNGLEVBQUUsQ0FBQztNQUNoQixNQUFNRyxLQUFLLEdBQUcsSUFBSWYsWUFBWSxDQUFDTyxXQUFXLENBQUM7TUFDM0NJLE1BQU0sQ0FBQ0ksS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFFVixFQUFFLENBQUM7RUFDUixDQUFDLENBQUM7RUFFRixPQUFPSSxPQUFPLENBQUNPLElBQUksQ0FBQyxDQUNsQlYsT0FBTztFQUNQO0VBQ0FFLE9BQU8sQ0FDUixDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ08sU0FBU1MsU0FBU0EsQ0FBSUMsU0FBMkIsRUFBRVgsV0FBVyxHQUFHLEVBQUUsRUFBRUMsT0FBTyxHQUFHLEtBQUssRUFBRVcsUUFBUSxHQUFHLEdBQUcsRUFBRTtFQUMzRyxNQUFNYixPQUFPLEdBQUcsSUFBSUcsT0FBTyxDQUFJLENBQUNXLE9BQU8sRUFBRVQsTUFBTSxLQUFLO0lBQ2xELFNBQVNVLElBQUlBLENBQUEsRUFBRztNQUNkSCxTQUFTLENBQUMsQ0FBQyxDQUNSSSxJQUFJLENBQUNDLEtBQUssSUFBSTtRQUNiLElBQUlBLEtBQUssRUFBRTtVQUNUSCxPQUFPLENBQUNHLEtBQUssQ0FBQztRQUNoQixDQUFDLE1BQU07VUFDTFYsVUFBVSxDQUFDUSxJQUFJLEVBQUVGLFFBQVEsQ0FBQztRQUM1QjtNQUNGLENBQUMsQ0FBQyxDQUNESyxLQUFLLENBQUMsTUFBTTtRQUNYYixNQUFNLENBQUMsQ0FBQztNQUNWLENBQUMsQ0FBQztJQUNOO0lBQ0FVLElBQUksQ0FBQyxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBQ0YsT0FBT2pCLGNBQWMsQ0FBQ0ksT0FBTyxFQUFFRixPQUFPLEVBQUVDLFdBQVcsQ0FBQztBQUN0RDtBQUVPLFNBQVNrQixXQUFXQSxDQUFDcEIsRUFBVSxFQUFFQyxPQUFxQixFQUFFO0VBQzdELE9BQU9GLGNBQWMsQ0FBQ0MsRUFBRSxFQUFFQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUNrQixLQUFLLENBQUNFLEdBQUcsSUFBSTtJQUN6RCxJQUFJLEVBQUVBLEdBQUcsWUFBWTFCLFlBQVksQ0FBQyxFQUFFLE1BQU0wQixHQUFHO0VBQy9DLENBQUMsQ0FBQztBQUNKO0FBRU8sU0FBU0MsU0FBU0EsQ0FBSUMsT0FBNkIsRUFBZ0I7RUFDeEUsT0FBT0EsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtELENBQUMsQ0FBQ1IsSUFBSSxDQUFDLE1BQU1VLENBQUMsSUFBSSxDQUFDLEdBQUdBLENBQUMsRUFBRSxNQUFNRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRXRCLE9BQU8sQ0FBQ1csT0FBTyxDQUFNLElBQUlhLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBQztBQUM3RztBQUVPLFNBQVNDLEtBQUtBLENBQUM3QixFQUFVLEVBQUU7RUFDaEMsT0FBTyxJQUFJSSxPQUFPLENBQUNXLE9BQU8sSUFBSVAsVUFBVSxDQUFDTyxPQUFPLEVBQUVmLEVBQUUsQ0FBQyxDQUFDO0FBQ3hEIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+function randomSleep(minSeconds = 1, maxSeconds = 2) {
+  const ms = Math.floor((Math.random() * (maxSeconds - minSeconds) + minSeconds) * 1000);
+  return sleep(ms);
+}
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCIsInJhbmRvbVNsZWVwIiwibWluU2Vjb25kcyIsIm1heFNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy93YWl0aW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cbn1cblxuZXhwb3J0IGNvbnN0IFNFQ09ORCA9IDEwMDA7XG5cbmZ1bmN0aW9uIHRpbWVvdXRQcm9taXNlPFQ+KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8VD4sIGRlc2NyaXB0aW9uOiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgdGltZW91dCA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IFRpbWVvdXRFcnJvcihkZXNjcmlwdGlvbik7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0sIG1zKTtcbiAgfSk7XG5cbiAgcmV0dXJuIFByb21pc2UucmFjZShbXG4gICAgcHJvbWlzZSxcbiAgICAvLyBjYXN0aW5nIHRvIGF2b2lkIHR5cGUgZXJyb3ItIHNhZmUgc2luY2UgdGhpcyBwcm9taXNlIHdpbGwgYWx3YXlzIHJlamVjdFxuICAgIHRpbWVvdXQgYXMgUHJvbWlzZTxUPixcbiAgXSk7XG59XG5cbi8qKlxuICogV2FpdCB1bnRpbCBhIHByb21pc2UgcmVzb2x2ZXMgd2l0aCBhIHRydXRoeSB2YWx1ZSBvciByZWplY3QgYWZ0ZXIgYSB0aW1lb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWw8VD4oYXN5bmNUZXN0OiAoKSA9PiBQcm9taXNlPFQ+LCBkZXNjcmlwdGlvbiA9ICcnLCB0aW1lb3V0ID0gMTAwMDAsIGludGVydmFsID0gMTAwKSB7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnVuY3Rpb24gd2FpdCgpIHtcbiAgICAgIGFzeW5jVGVzdCgpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQod2FpdCwgaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHdhaXQoKTtcbiAgfSk7XG4gIHJldHVybiB0aW1lb3V0UHJvbWlzZSh0aW1lb3V0LCBwcm9taXNlLCBkZXNjcmlwdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYWNlVGltZW91dChtczogbnVtYmVyLCBwcm9taXNlOiBQcm9taXNlPGFueT4pIHtcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKG1zLCBwcm9taXNlLCAndGltZW91dCcpLmNhdGNoKChlcnIpID0+IHtcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3IpKSB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2VyaWFsPFQ+KGFjdGlvbnM6ICgoKSA9PiBQcm9taXNlPFQ+KVtdKTogUHJvbWlzZTxUW10+IHtcbiAgcmV0dXJuIGFjdGlvbnMucmVkdWNlKChtLCBhKSA9PiBtLnRoZW4oYXN5bmMgKHgpID0+IFsuLi54LCBhd2FpdCBhKCldKSwgUHJvbWlzZS5yZXNvbHZlPFRbXT4obmV3IEFycmF5PFQ+KCkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21TbGVlcChtaW5TZWNvbmRzOiBudW1iZXIgPSAxLCBtYXhTZWNvbmRzOiBudW1iZXIgPSAyKSB7XG4gIGNvbnN0IG1zID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIChtYXhTZWNvbmRzIC0gbWluU2Vjb25kcykgKyBtaW5TZWNvbmRzKSAqIDEwMDApO1xuICByZXR1cm4gc2xlZXAobXMpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsWUFBWSxTQUFTQyxLQUFLLENBQUM7QUFFdkNDLE9BQUEsQ0FBQUYsWUFBQSxHQUFBQSxZQUFBO0FBRU0sTUFBTUcsTUFBTSxHQUFBRCxPQUFBLENBQUFDLE1BQUEsR0FBRyxJQUFJO0FBRTFCLFNBQVNDLGNBQWNBLENBQUlDLEVBQVUsRUFBRUMsT0FBbUIsRUFBRUMsV0FBbUIsRUFBYztFQUMzRixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUNDLENBQUMsRUFBRUMsTUFBTSxLQUFLO0lBQ3pDLE1BQU1DLEVBQUUsR0FBR0MsVUFBVSxDQUFDLE1BQU07TUFDMUJDLFlBQVksQ0FBQ0YsRUFBRSxDQUFDO01BQ2hCLE1BQU1HLEtBQUssR0FBRyxJQUFJZixZQUFZLENBQUNPLFdBQVcsQ0FBQztNQUMzQ0ksTUFBTSxDQUFDSSxLQUFLLENBQUM7SUFDZixDQUFDLEVBQUVWLEVBQUUsQ0FBQztFQUNSLENBQUMsQ0FBQztFQUVGLE9BQU9JLE9BQU8sQ0FBQ08sSUFBSSxDQUFDLENBQ2xCVixPQUFPO0VBQ1A7RUFDQUUsT0FBTyxDQUNSLENBQUM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDTyxTQUFTUyxTQUFTQSxDQUFJQyxTQUEyQixFQUFFWCxXQUFXLEdBQUcsRUFBRSxFQUFFQyxPQUFPLEdBQUcsS0FBSyxFQUFFVyxRQUFRLEdBQUcsR0FBRyxFQUFFO0VBQzNHLE1BQU1iLE9BQU8sR0FBRyxJQUFJRyxPQUFPLENBQUksQ0FBQ1csT0FBTyxFQUFFVCxNQUFNLEtBQUs7SUFDbEQsU0FBU1UsSUFBSUEsQ0FBQSxFQUFHO01BQ2RILFNBQVMsQ0FBQyxDQUFDLENBQUNJLElBQUksQ0FBRUMsS0FBSyxJQUFLO1FBQzFCLElBQUlBLEtBQUssRUFBRTtVQUNUSCxPQUFPLENBQUNHLEtBQUssQ0FBQztRQUNoQixDQUFDLE1BQU07VUFDTFYsVUFBVSxDQUFDUSxJQUFJLEVBQUVGLFFBQVEsQ0FBQztRQUM1QjtNQUNGLENBQUMsQ0FBQyxDQUFDSyxLQUFLLENBQUMsTUFBTTtRQUNiYixNQUFNLENBQUMsQ0FBQztNQUNWLENBQUMsQ0FBQztJQUNKO0lBQ0FVLElBQUksQ0FBQyxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBQ0YsT0FBT2pCLGNBQWMsQ0FBQ0ksT0FBTyxFQUFFRixPQUFPLEVBQUVDLFdBQVcsQ0FBQztBQUN0RDtBQUVPLFNBQVNrQixXQUFXQSxDQUFDcEIsRUFBVSxFQUFFQyxPQUFxQixFQUFFO0VBQzdELE9BQU9GLGNBQWMsQ0FBQ0MsRUFBRSxFQUFFQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUNrQixLQUFLLENBQUVFLEdBQUcsSUFBSztJQUMzRCxJQUFJLEVBQUVBLEdBQUcsWUFBWTFCLFlBQVksQ0FBQyxFQUFFLE1BQU0wQixHQUFHO0VBQy9DLENBQUMsQ0FBQztBQUNKO0FBRU8sU0FBU0MsU0FBU0EsQ0FBSUMsT0FBNkIsRUFBZ0I7RUFDeEUsT0FBT0EsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtELENBQUMsQ0FBQ1IsSUFBSSxDQUFDLE1BQU9VLENBQUMsSUFBSyxDQUFDLEdBQUdBLENBQUMsRUFBRSxNQUFNRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRXRCLE9BQU8sQ0FBQ1csT0FBTyxDQUFNLElBQUlhLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBQztBQUMvRztBQUVPLFNBQVNDLEtBQUtBLENBQUM3QixFQUFVLEVBQUU7RUFDaEMsT0FBTyxJQUFJSSxPQUFPLENBQUVXLE9BQU8sSUFBS1AsVUFBVSxDQUFDTyxPQUFPLEVBQUVmLEVBQUUsQ0FBQyxDQUFDO0FBQzFEO0FBRU8sU0FBUzhCLFdBQVdBLENBQUNDLFVBQWtCLEdBQUcsQ0FBQyxFQUFFQyxVQUFrQixHQUFHLENBQUMsRUFBRTtFQUMxRSxNQUFNaEMsRUFBRSxHQUFHaUMsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLENBQUMsQ0FBQyxJQUFJSCxVQUFVLEdBQUdELFVBQVUsQ0FBQyxHQUFHQSxVQUFVLElBQUksSUFBSSxDQUFDO0VBQ3RGLE9BQU9GLEtBQUssQ0FBQzdCLEVBQUUsQ0FBQztBQUNsQiIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/index.js b/node_modules/israeli-bank-scrapers/lib/index.js
index 2240a04..2bd4e59 100644
--- a/node_modules/israeli-bank-scrapers/lib/index.js
+++ b/node_modules/israeli-bank-scrapers/lib/index.js
@@ -82,4 +82,4 @@ function getPuppeteerConfig() {
     chromiumRevision: '1250580'
   }; // https://github.com/puppeteer/puppeteer/releases/tag/puppeteer-core-v22.5.0
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmaW5pdGlvbnMiLCJyZXF1aXJlIiwiX2ZhY3RvcnkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ludGVyZmFjZSIsIl9vbmVaZXJvIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZ2V0UHVwcGV0ZWVyQ29uZmlnIiwiY2hyb21pdW1SZXZpc2lvbiJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBDb21wYW55VHlwZXMsIFNDUkFQRVJTIH0gZnJvbSAnLi9kZWZpbml0aW9ucyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZVNjcmFwZXIgfSBmcm9tICcuL3NjcmFwZXJzL2ZhY3RvcnknO1xuXG4vLyBOb3RlOiB0aGUgdHlwbyBTY2FwZXJTY3JhcGluZ1Jlc3VsdCAmIFNjcmFwZXJMb2dpblJlc3VsdCAoc2ljKSBhcmUgZXhwb3J0ZWQgaGVyZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuZXhwb3J0IHtcbiAgU2NyYXBlckxvZ2luUmVzdWx0IGFzIFNjYXBlckxvZ2luUmVzdWx0LFxuICBTY3JhcGVyU2NyYXBpbmdSZXN1bHQgYXMgU2NhcGVyU2NyYXBpbmdSZXN1bHQsXG4gIFNjcmFwZXIsXG4gIFNjcmFwZXJDcmVkZW50aWFscyxcbiAgU2NyYXBlckxvZ2luUmVzdWx0LFxuICBTY3JhcGVyT3B0aW9ucyxcbiAgU2NyYXBlclNjcmFwaW5nUmVzdWx0LFxufSBmcm9tICcuL3NjcmFwZXJzL2ludGVyZmFjZSc7XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgT25lWmVyb1NjcmFwZXIgfSBmcm9tICcuL3NjcmFwZXJzL29uZS16ZXJvJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFB1cHBldGVlckNvbmZpZygpIHtcbiAgcmV0dXJuIHsgY2hyb21pdW1SZXZpc2lvbjogJzEyNTA1ODAnIH07IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wdXBwZXRlZXIvcHVwcGV0ZWVyL3JlbGVhc2VzL3RhZy9wdXBwZXRlZXItY29yZS12MjIuNS4wXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUdBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQVVBLElBQUFJLFFBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQUFnRSxTQUFBRSx1QkFBQUcsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQVhoRTs7QUFhTyxTQUFTRyxrQkFBa0JBLENBQUEsRUFBRztFQUNuQyxPQUFPO0lBQUVDLGdCQUFnQixFQUFFO0VBQVUsQ0FBQyxDQUFDLENBQUM7QUFDMUMiLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmaW5pdGlvbnMiLCJyZXF1aXJlIiwiX2ZhY3RvcnkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ludGVyZmFjZSIsIl9vbmVaZXJvIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZ2V0UHVwcGV0ZWVyQ29uZmlnIiwiY2hyb21pdW1SZXZpc2lvbiJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCB7IENvbXBhbnlUeXBlcywgU0NSQVBFUlMgfSBmcm9tICcuL2RlZmluaXRpb25zJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlU2NyYXBlciB9IGZyb20gJy4vc2NyYXBlcnMvZmFjdG9yeSc7XG5cbi8vIE5vdGU6IHRoZSB0eXBvIFNjYXBlclNjcmFwaW5nUmVzdWx0ICYgU2NyYXBlckxvZ2luUmVzdWx0IChzaWMpIGFyZSBleHBvcnRlZCBoZXJlIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5leHBvcnQge1xuICBTY3JhcGVyTG9naW5SZXN1bHQgYXMgU2NhcGVyTG9naW5SZXN1bHQsIFNjcmFwZXJTY3JhcGluZ1Jlc3VsdCBhcyBTY2FwZXJTY3JhcGluZ1Jlc3VsdCwgU2NyYXBlcixcbiAgU2NyYXBlckNyZWRlbnRpYWxzLCBTY3JhcGVyTG9naW5SZXN1bHQsIFNjcmFwZXJPcHRpb25zLCBTY3JhcGVyU2NyYXBpbmdSZXN1bHQsXG59IGZyb20gJy4vc2NyYXBlcnMvaW50ZXJmYWNlJztcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBPbmVaZXJvU2NyYXBlciB9IGZyb20gJy4vc2NyYXBlcnMvb25lLXplcm8nO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHVwcGV0ZWVyQ29uZmlnKCkge1xuICByZXR1cm4geyBjaHJvbWl1bVJldmlzaW9uOiAnMTI1MDU4MCcgfTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3B1cHBldGVlci9wdXBwZXRlZXIvcmVsZWFzZXMvdGFnL3B1cHBldGVlci1jb3JlLXYyMi41LjBcblxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFHQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFLQSxJQUFBSSxRQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFBZ0UsU0FBQUUsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFOaEU7O0FBUU8sU0FBU0csa0JBQWtCQSxDQUFBLEVBQUc7RUFDbkMsT0FBTztJQUFFQyxnQkFBZ0IsRUFBRTtFQUFVLENBQUMsQ0FBQyxDQUFDO0FBRTFDIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/amex.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/amex.test.js
index 428596a..d33d2ce 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/amex.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/amex.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _amex = _interopRequireDefault(require("./amex"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'amex'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('AMEX legacy scraper', () => {
@@ -18,10 +25,9 @@ describe('AMEX legacy scraper', () => {
     expect(_definitions.SCRAPERS.amex.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _amex.default(options);
     const result = await scraper.scrape({
       id: 'e10s12',
@@ -33,10 +39,9 @@ describe('AMEX legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _amex.default(options);
     const result = await scraper.scrape(testsConfig.credentials.amex);
     expect(result).toBeDefined();
@@ -46,4 +51,4 @@ describe('AMEX legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYW1leCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3Rlc3RzVXRpbHMiLCJfZGVmaW5pdGlvbnMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkNPTVBBTllfSUQiLCJ0ZXN0c0NvbmZpZyIsImdldFRlc3RzQ29uZmlnIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJleHRlbmRBc3luY1RpbWVvdXQiLCJ0ZXN0IiwiZXhwZWN0IiwiU0NSQVBFUlMiLCJhbWV4IiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJBTUVYU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsImlkIiwiY2FyZDZEaWdpdHMiLCJwYXNzd29yZCIsInN1Y2Nlc3MiLCJ0b0JlRmFsc3kiLCJlcnJvclR5cGUiLCJ0b0JlIiwiTG9naW5SZXN1bHRzIiwiSW52YWxpZFBhc3N3b3JkIiwiY3JlZGVudGlhbHMiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsInRyaW0iLCJ0b0JlVHJ1dGh5IiwiZXhwb3J0VHJhbnNhY3Rpb25zIiwiYWNjb3VudHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyYXBlcnMvYW1leC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBTUVYU2NyYXBlciBmcm9tICcuL2FtZXgnO1xuaW1wb3J0IHsgbWF5YmVUZXN0Q29tcGFueUFQSSwgZXh0ZW5kQXN5bmNUaW1lb3V0LCBnZXRUZXN0c0NvbmZpZywgZXhwb3J0VHJhbnNhY3Rpb25zIH0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuXG5jb25zdCBDT01QQU5ZX0lEID0gJ2FtZXgnOyAvLyBUT0RPIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGhhcmQtY29kZWQgaW4gdGhlIHByb3ZpZGVyXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdBTUVYIGxlZ2FjeSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5hbWV4KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5hbWV4LmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ2lkJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLmFtZXgubG9naW5GaWVsZHMpLnRvQ29udGFpbignY2FyZDZEaWdpdHMnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuYW1leC5sb2dpbkZpZWxkcykudG9Db250YWluKCdwYXNzd29yZCcpO1xuICB9KTtcblxuICBtYXliZVRlc3RDb21wYW55QVBJKENPTVBBTllfSUQsIGNvbmZpZyA9PiBjb25maWcuY29tcGFueUFQSS5pbnZhbGlkUGFzc3dvcmQpKFxuICAgICdzaG91bGQgZmFpbCBvbiBpbnZhbGlkIHVzZXIvcGFzc3dvcmRcIicsXG4gICAgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgICAgY29tcGFueUlkOiBDT01QQU5ZX0lELFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc2NyYXBlciA9IG5ldyBBTUVYU2NyYXBlcihvcHRpb25zKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUoeyBpZDogJ2UxMHMxMicsIGNhcmQ2RGlnaXRzOiAnMTIzNDU2JywgcGFzc3dvcmQ6ICczZjNzczNkJyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZUZhbHN5KCk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yVHlwZSkudG9CZShMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkKTtcbiAgICB9LFxuICApO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCkoJ3Nob3VsZCBzY3JhcGUgdHJhbnNhY3Rpb25zXCInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgfTtcblxuICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgQU1FWFNjcmFwZXIob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUodGVzdHNDb25maWcuY3JlZGVudGlhbHMuYW1leCk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBjb25zdCBlcnJvciA9IGAke3Jlc3VsdC5lcnJvclR5cGUgfHwgJyd9ICR7cmVzdWx0LmVycm9yTWVzc2FnZSB8fCAnJ31gLnRyaW0oKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmUoJycpO1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwb3J0VHJhbnNhY3Rpb25zKENPTVBBTllfSUQsIHJlc3VsdC5hY2NvdW50cyB8fCBbXSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsdUJBQUEsR0FBQUgsT0FBQTtBQUEyRCxTQUFBRCx1QkFBQUssQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUUzRCxNQUFNRyxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFDM0IsTUFBTUMsV0FBVyxHQUFHLElBQUFDLDBCQUFjLEVBQUMsQ0FBQztBQUVwQ0MsUUFBUSxDQUFDLHFCQUFxQixFQUFFLE1BQU07RUFDcENDLFNBQVMsQ0FBQyxNQUFNO0lBQ2QsSUFBQUMsOEJBQWtCLEVBQUMsQ0FBQyxDQUFDLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxNQUFNO0lBQzVEQyxNQUFNLENBQUNDLHFCQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztJQUNuQ0gsTUFBTSxDQUFDQyxxQkFBUSxDQUFDQyxJQUFJLENBQUNFLFdBQVcsQ0FBQyxDQUFDQyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ2pETCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLElBQUksQ0FBQ0UsV0FBVyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDMURMLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsSUFBSSxDQUFDRSxXQUFXLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQztFQUN6RCxDQUFDLENBQUM7RUFFRixJQUFBQywrQkFBbUIsRUFBQ2IsVUFBVSxFQUFFYyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDQyxlQUFlLENBQUMsQ0FDMUUsdUNBQXVDLEVBQ3ZDLFlBQVk7SUFDVixNQUFNQyxPQUFPLEdBQUc7TUFDZCxHQUFHaEIsV0FBVyxDQUFDZ0IsT0FBTztNQUN0QkMsU0FBUyxFQUFFbEI7SUFDYixDQUFDO0lBRUQsTUFBTW1CLE9BQU8sR0FBRyxJQUFJQyxhQUFXLENBQUNILE9BQU8sQ0FBQztJQUV4QyxNQUFNSSxNQUFNLEdBQUcsTUFBTUYsT0FBTyxDQUFDRyxNQUFNLENBQUM7TUFBRUMsRUFBRSxFQUFFLFFBQVE7TUFBRUMsV0FBVyxFQUFFLFFBQVE7TUFBRUMsUUFBUSxFQUFFO0lBQVUsQ0FBQyxDQUFDO0lBRWpHbEIsTUFBTSxDQUFDYyxNQUFNLENBQUMsQ0FBQ1gsV0FBVyxDQUFDLENBQUM7SUFDNUJILE1BQU0sQ0FBQ2MsTUFBTSxDQUFDSyxPQUFPLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLENBQUM7SUFDbENwQixNQUFNLENBQUNjLE1BQU0sQ0FBQ08sU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQ0Msb0NBQVksQ0FBQ0MsZUFBZSxDQUFDO0VBQzdELENBQ0YsQ0FBQztFQUVELElBQUFsQiwrQkFBbUIsRUFBQ2IsVUFBVSxDQUFDLENBQUMsNkJBQTZCLEVBQUUsWUFBWTtJQUN6RSxNQUFNaUIsT0FBTyxHQUFHO01BQ2QsR0FBR2hCLFdBQVcsQ0FBQ2dCLE9BQU87TUFDdEJDLFNBQVMsRUFBRWxCO0lBQ2IsQ0FBQztJQUVELE1BQU1tQixPQUFPLEdBQUcsSUFBSUMsYUFBVyxDQUFDSCxPQUFPLENBQUM7SUFDeEMsTUFBTUksTUFBTSxHQUFHLE1BQU1GLE9BQU8sQ0FBQ0csTUFBTSxDQUFDckIsV0FBVyxDQUFDK0IsV0FBVyxDQUFDdkIsSUFBSSxDQUFDO0lBQ2pFRixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QixNQUFNdUIsS0FBSyxHQUFHLEdBQUdaLE1BQU0sQ0FBQ08sU0FBUyxJQUFJLEVBQUUsSUFBSVAsTUFBTSxDQUFDYSxZQUFZLElBQUksRUFBRSxFQUFFLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzdFNUIsTUFBTSxDQUFDMEIsS0FBSyxDQUFDLENBQUNKLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDdEJ0QixNQUFNLENBQUNjLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDLENBQUNVLFVBQVUsQ0FBQyxDQUFDO0lBRW5DLElBQUFDLDhCQUFrQixFQUFDckMsVUFBVSxFQUFFcUIsTUFBTSxDQUFDaUIsUUFBUSxJQUFJLEVBQUUsQ0FBQztFQUN2RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.d.ts b/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.d.ts
index 8d387fe..db46b9f 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.d.ts
@@ -7,38 +7,6 @@ export declare function createLoginFields(credentials: ScraperSpecificCredential
     value: string;
 }[];
 export declare function waitForPostLogin(page: Page): Promise<void>;
-/**
- * Ensures the account dropdown is open, then returns the available account labels.
- *
- * This method:
- * - Checks if the dropdown is already open.
- * - If not open, clicks the account selector to open it.
- * - Waits for the dropdown to render.
- * - Extracts and returns the list of available account labels.
- *
- * Graceful handling:
- * - If any error occurs (e.g., selectors not found, timing issues, UI version changes),
- *   the function returns an empty list.
- *
- * @param page Puppeteer Page object.
- * @returns An array of available account labels (e.g., ["127 | XXXX1", "127 | XXXX2"]),
- *          or an empty array if something goes wrong.
- */
-export declare function clickAccountSelectorGetAccountIds(page: Page): Promise<string[]>;
-/**
- * Selects an account from the dropdown based on the provided account label.
- *
- * This method:
- * - Clicks the account selector button to open the dropdown.
- * - Retrieves the list of available account labels.
- * - Checks if the provided account label exists in the list.
- * - Finds and clicks the matching account option if found.
- *
- * @param page Puppeteer Page object.
- * @param accountLabel The text of the account to select (e.g., "127 | XXXXX").
- * @returns True if the account option was found and clicked; false otherwise.
- */
-export declare function selectAccountFromDropdown(page: Page, accountLabel: string): Promise<boolean>;
 type ScraperSpecificCredentials = {
     username: string;
     password: string;
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.js
index 620f430..76dd5e8 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-beinleumi-group.js
@@ -3,12 +3,17 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.clickAccountSelectorGetAccountIds = clickAccountSelectorGetAccountIds;
 exports.createLoginFields = createLoginFields;
 exports.default = void 0;
 exports.getPossibleLoginResults = getPossibleLoginResults;
-exports.selectAccountFromDropdown = selectAccountFromDropdown;
 exports.waitForPostLogin = waitForPostLogin;
+require("core-js/modules/es.symbol.description.js");
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
+require("core-js/modules/es.string.trim.js");
+require("core-js/modules/esnext.string.replace-all.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _constants = require("../constants");
 var _elementsInteractions = require("../helpers/elements-interactions");
@@ -17,6 +22,9 @@ var _waiting = require("../helpers/waiting");
 var _transactions = require("../transactions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const DATE_FORMAT = 'DD/MM/YYYY';
 const NO_TRANSACTION_IN_DATE_RANGE_TEXT = 'לא נמצאו נתונים בנושא המבוקש';
 const DATE_COLUMN_CLASS_COMPLETED = 'date first';
@@ -34,16 +42,9 @@ const COMPLETED_TRANSACTIONS_TABLE = 'table#dataTable077';
 const PENDING_TRANSACTIONS_TABLE = 'table#dataTable023';
 const NEXT_PAGE_LINK = 'a#Npage.paging';
 const CURRENT_BALANCE = '.main_balance';
-const IFRAME_NAME = 'iframe-old-pages';
-const ELEMENT_RENDER_TIMEOUT_MS = 10000;
 function getPossibleLoginResults() {
   const urls = {};
-  urls[_baseScraperWithBrowser.LoginResults.Success] = [/fibi.*accountSummary/,
-  // New UI pattern
-  /Resources\/PortalNG\/shell/,
-  // New UI pattern
-  /FibiMenu\/Online/ // Old UI pattern
-  ];
+  urls[_baseScraperWithBrowser.LoginResults.Success] = [/FibiMenu\/Online/];
   urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = [/FibiMenu\/Marketing\/Private\/Home/];
   return urls;
 }
@@ -170,8 +171,6 @@ async function searchByDates(page, startDate) {
   await (0, _navigation.waitForNavigation)(page);
 }
 async function getAccountNumber(page) {
-  // Wait until the account number element is present in the DOM
-  await (0, _elementsInteractions.waitUntilElementFound)(page, ACCOUNTS_NUMBER, true, ELEMENT_RENDER_TIMEOUT_MS);
   const selectedSnifAccount = await page.$eval(ACCOUNTS_NUMBER, option => {
     return option.innerText;
   });
@@ -203,7 +202,7 @@ async function scrapeTransactions(page, tableLocator, transactionStatus, needToP
   return convertTransactions(txns);
 }
 async function getAccountTransactions(page) {
-  await Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, "div[id*='divTable']", false), (0, _elementsInteractions.waitUntilElementFound)(page, `.${ERROR_MESSAGE_CLASS}`, false)]);
+  await Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, 'div[id*=\'divTable\']', false), (0, _elementsInteractions.waitUntilElementFound)(page, `.${ERROR_MESSAGE_CLASS}`, false)]);
   const noTransactionInRangeError = await isNoTransactionInDateRangeError(page);
   if (noTransactionInRangeError) {
     return [];
@@ -214,29 +213,18 @@ async function getAccountTransactions(page) {
   return txns;
 }
 async function getCurrentBalance(page) {
-  // Wait for the balance element to appear and be visible
-  await (0, _elementsInteractions.waitUntilElementFound)(page, CURRENT_BALANCE, true, ELEMENT_RENDER_TIMEOUT_MS);
-
-  // Extract text content
-  const balanceStr = await page.$eval(CURRENT_BALANCE, el => {
-    return el.innerText;
+  const balanceStr = await page.$eval(CURRENT_BALANCE, option => {
+    return option.innerText;
   });
   return getAmountData(balanceStr);
 }
 async function waitForPostLogin(page) {
-  return Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, '#card-header', true),
-  // New UI
-  (0, _elementsInteractions.waitUntilElementFound)(page, '#account_num', true),
-  // New UI
-  (0, _elementsInteractions.waitUntilElementFound)(page, '#matafLogoutLink', true),
-  // Old UI
-  (0, _elementsInteractions.waitUntilElementFound)(page, '#validationMsg', true) // Old UI
-  ]);
+  return Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, '#matafLogoutLink', true), (0, _elementsInteractions.waitUntilElementFound)(page, '#validationMsg', true)]);
 }
 async function fetchAccountData(page, startDate) {
+  await searchByDates(page, startDate);
   const accountNumber = await getAccountNumber(page);
   const balance = await getCurrentBalance(page);
-  await searchByDates(page, startDate);
   const txns = await getAccountTransactions(page);
   return {
     accountNumber,
@@ -244,157 +232,38 @@ async function fetchAccountData(page, startDate) {
     balance
   };
 }
-async function getAccountIdsOldUI(page) {
-  return page.evaluate(() => {
+async function getAccountIdsBySelector(page) {
+  const accountsIds = await page.evaluate(() => {
     const selectElement = document.getElementById('account_num_select');
     const options = selectElement ? selectElement.querySelectorAll('option') : [];
     if (!options) return [];
     return Array.from(options, option => option.value);
   });
-}
-
-/**
- * Ensures the account dropdown is open, then returns the available account labels.
- *
- * This method:
- * - Checks if the dropdown is already open.
- * - If not open, clicks the account selector to open it.
- * - Waits for the dropdown to render.
- * - Extracts and returns the list of available account labels.
- *
- * Graceful handling:
- * - If any error occurs (e.g., selectors not found, timing issues, UI version changes),
- *   the function returns an empty list.
- *
- * @param page Puppeteer Page object.
- * @returns An array of available account labels (e.g., ["127 | XXXX1", "127 | XXXX2"]),
- *          or an empty array if something goes wrong.
- */
-async function clickAccountSelectorGetAccountIds(page) {
-  try {
-    const accountSelector = 'div.current-account'; // Direct selector to clickable element
-    const dropdownPanelSelector = 'div.mat-mdc-autocomplete-panel.account-select-dd'; // The dropdown list box
-    const optionSelector = 'mat-option .mdc-list-item__primary-text'; // Account option labels
-
-    // Check if dropdown is already open
-    const dropdownVisible = await page.$eval(dropdownPanelSelector, el => {
-      return el && window.getComputedStyle(el).display !== 'none' && el.offsetParent !== null;
-    }).catch(() => false); // catch if dropdown is not in the DOM yet
-
-    if (!dropdownVisible) {
-      await (0, _elementsInteractions.waitUntilElementFound)(page, accountSelector, true, ELEMENT_RENDER_TIMEOUT_MS);
-
-      // Click the account selector to open the dropdown
-      await (0, _elementsInteractions.clickButton)(page, accountSelector);
-
-      // Wait for the dropdown to open
-      await (0, _elementsInteractions.waitUntilElementFound)(page, dropdownPanelSelector, true, ELEMENT_RENDER_TIMEOUT_MS);
-    }
-
-    // Extract account labels from the dropdown options
-    const accountLabels = await page.$$eval(optionSelector, options => {
-      return options.map(option => option.textContent?.trim() || '').filter(label => label !== '');
-    });
-    return accountLabels;
-  } catch (error) {
-    return []; // Graceful fallback
-  }
-}
-async function getAccountIdsBothUIs(page) {
-  let accountsIds = await clickAccountSelectorGetAccountIds(page);
-  if (accountsIds.length === 0) {
-    accountsIds = await getAccountIdsOldUI(page);
-  }
   return accountsIds;
 }
-
-/**
- * Selects an account from the dropdown based on the provided account label.
- *
- * This method:
- * - Clicks the account selector button to open the dropdown.
- * - Retrieves the list of available account labels.
- * - Checks if the provided account label exists in the list.
- * - Finds and clicks the matching account option if found.
- *
- * @param page Puppeteer Page object.
- * @param accountLabel The text of the account to select (e.g., "127 | XXXXX").
- * @returns True if the account option was found and clicked; false otherwise.
- */
-async function selectAccountFromDropdown(page, accountLabel) {
-  // Call clickAccountSelector to get the available accounts and open the dropdown
-  const availableAccounts = await clickAccountSelectorGetAccountIds(page);
-
-  // Check if the account label exists in the available accounts
-  if (!availableAccounts.includes(accountLabel)) {
-    return false;
-  }
-
-  // Wait for the dropdown options to be rendered
-  const optionSelector = 'mat-option .mdc-list-item__primary-text';
-  await (0, _elementsInteractions.waitUntilElementFound)(page, optionSelector, true, ELEMENT_RENDER_TIMEOUT_MS);
-
-  // Query all matching options
-  const accountOptions = await page.$$(optionSelector);
-
-  // Find and click the option matching the accountLabel
-  for (const option of accountOptions) {
-    const text = await page.evaluate(el => el.textContent?.trim(), option);
-    if (text === accountLabel) {
-      const optionHandle = await option.evaluateHandle(el => el);
-      await page.evaluate(el => el.click(), optionHandle);
-      return true;
-    }
-  }
-  return false;
-}
-async function getTransactionsFrame(page) {
-  // Try a few times to find the iframe, as it might not be immediately available
-  for (let attempt = 0; attempt < 3; attempt++) {
-    await (0, _waiting.sleep)(2000);
-    const frames = page.frames();
-    const targetFrame = frames.find(f => f.name() === IFRAME_NAME);
-    if (targetFrame) {
-      return targetFrame;
-    }
-  }
-  return null;
-}
-async function selectAccountBothUIs(page, accountId) {
-  const accountSelected = await selectAccountFromDropdown(page, accountId);
-  if (!accountSelected) {
-    // Old UI format
-    await page.select('#account_num_select', accountId);
-    await (0, _elementsInteractions.waitUntilElementFound)(page, '#account_num_select', true);
-  }
-}
-async function fetchAccountDataBothUIs(page, startDate) {
-  // Try to get the iframe for the new UI
-  const frame = await getTransactionsFrame(page);
-
-  // Use the frame if available (new UI), otherwise use the page directly (old UI)
-  const targetPage = frame || page;
-  return fetchAccountData(targetPage, startDate);
-}
 async function fetchAccounts(page, startDate) {
-  const accountsIds = await getAccountIdsBothUIs(page);
-  if (accountsIds.length === 0) {
-    // In case accountsIds could no be parsed just return the transactions of the currently selected account
-    const accountData = await fetchAccountDataBothUIs(page, startDate);
-    return [accountData];
-  }
   const accounts = [];
-  for (const accountId of accountsIds) {
-    await selectAccountBothUIs(page, accountId);
-    const accountData = await fetchAccountDataBothUIs(page, startDate);
+  const accountsIds = await getAccountIdsBySelector(page);
+  if (accountsIds.length <= 1) {
+    const accountData = await fetchAccountData(page, startDate);
     accounts.push(accountData);
+  } else {
+    for (const accountId of accountsIds) {
+      await page.select('#account_num_select', accountId);
+      await (0, _elementsInteractions.waitUntilElementFound)(page, '#account_num_select', true);
+      const accountData = await fetchAccountData(page, startDate);
+      accounts.push(accountData);
+    }
   }
   return accounts;
 }
 class BeinleumiGroupBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
-  BASE_URL = '';
-  LOGIN_URL = '';
-  TRANSACTIONS_URL = '';
+  constructor(...args) {
+    super(...args);
+    _defineProperty(this, "BASE_URL", '');
+    _defineProperty(this, "LOGIN_URL", '');
+    _defineProperty(this, "TRANSACTIONS_URL", '');
+  }
   getLoginOptions(credentials) {
     return {
       loginUrl: `${this.LOGIN_URL}`,
@@ -411,11 +280,8 @@ class BeinleumiGroupBaseScraper extends _baseScraperWithBrowser.BaseScraperWithB
   }
   async fetchData() {
     const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
-    const startMomentLimit = (0, _moment.default)({
-      year: 1600
-    });
     const startDate = this.options.startDate || defaultStartMoment.toDate();
-    const startMoment = _moment.default.max(startMomentLimit, (0, _moment.default)(startDate));
+    const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
     await this.navigateTo(this.TRANSACTIONS_URL);
     const accounts = await fetchAccounts(this.page, startMoment);
     return {
@@ -425,4 +291,4 @@ class BeinleumiGroupBaseScraper extends _baseScraperWithBrowser.BaseScraperWithB
   }
 }
 var _default = exports.default = BeinleumiGroupBaseScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
index 8827ffc..07fbe58 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
@@ -4,6 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.trim.js");
 var _buildUrl = _interopRequireDefault(require("build-url"));
 var _lodash = _interopRequireDefault(require("lodash"));
 var _moment = _interopRequireDefault(require("moment"));
@@ -17,8 +21,12 @@ var _waiting = require("../helpers/waiting");
 var _transactions2 = require("../transactions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 var _errors = require("./errors");
-var _browser = require("../helpers/browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COUNTRY_CODE = '212';
 const ID_TYPE = '1';
 const INSTALLMENTS_KEYWORD = 'תשלום';
@@ -37,7 +45,7 @@ function getAccountsUrl(servicesUrl, monthMoment) {
 }
 async function fetchAccounts(page, servicesUrl, monthMoment) {
   const dataUrl = getAccountsUrl(servicesUrl, monthMoment);
-  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+  const dataResult = await (0, _fetch.safeFetchGetWithinPage)(page, dataUrl);
   if (dataResult && _lodash.default.get(dataResult, 'Header.Status') === '1' && dataResult.DashboardMonthBean) {
     const {
       cardsCharges
@@ -92,6 +100,7 @@ function getTransactionType(txn) {
 function convertTransactions(txns, processedDate) {
   const filteredTxns = txns.filter(txn => txn.dealSumType !== '1' && txn.voucherNumberRatz !== '000000000' && txn.voucherNumberRatzOutbound !== '000000000');
   return filteredTxns.map(txn => {
+    var _txn$currentPaymentCu;
     const isOutbound = txn.dealSumOutbound;
     const txnDateStr = isOutbound ? txn.fullPurchaseDateOutbound : txn.fullPurchaseDate;
     const txnMoment = (0, _moment.default)(txnDateStr, DATE_FORMAT);
@@ -102,7 +111,7 @@ function convertTransactions(txns, processedDate) {
       date: txnMoment.toISOString(),
       processedDate: currentProcessedDate,
       originalAmount: isOutbound ? -txn.dealSumOutbound : -txn.dealSum,
-      originalCurrency: convertCurrency(txn.currentPaymentCurrency ?? txn.currencyId),
+      originalCurrency: convertCurrency((_txn$currentPaymentCu = txn.currentPaymentCurrency) !== null && _txn$currentPaymentCu !== void 0 ? _txn$currentPaymentCu : txn.currencyId),
       chargedAmount: isOutbound ? -txn.paymentSumOutbound : -txn.paymentSum,
       chargedCurrency: convertCurrency(txn.currencyId),
       description: isOutbound ? txn.fullSupplierNameOutbound : txn.fullSupplierNameHeb,
@@ -113,15 +122,16 @@ function convertTransactions(txns, processedDate) {
     return result;
   });
 }
-async function fetchTransactions(page, options, companyServiceOptions, startMoment, monthMoment) {
-  const accounts = await fetchAccounts(page, companyServiceOptions.servicesUrl, monthMoment);
-  const dataUrl = getTransactionsUrl(companyServiceOptions.servicesUrl, monthMoment);
-  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+async function fetchTransactions(page, options, startMoment, monthMoment) {
+  const accounts = await fetchAccounts(page, options.servicesUrl, monthMoment);
+  const dataUrl = getTransactionsUrl(options.servicesUrl, monthMoment);
+  const dataResult = await (0, _fetch.safeFetchGetWithinPage)(page, dataUrl);
   if (dataResult && _lodash.default.get(dataResult, 'Header.Status') === '1' && dataResult.CardsTransactionsListBean) {
     const accountTxns = {};
     accounts.forEach(account => {
       const txnGroups = _lodash.default.get(dataResult, `CardsTransactionsListBean.Index${account.index}.CurrentCardTransactions`);
       if (txnGroups) {
+        var _options$outputData$e, _options$outputData;
         let allTxns = [];
         txnGroups.forEach(txnGroup => {
           if (txnGroup.txnIsrael) {
@@ -136,7 +146,7 @@ async function fetchTransactions(page, options, companyServiceOptions, startMome
         if (!options.combineInstallments) {
           allTxns = (0, _transactions.fixInstallments)(allTxns);
         }
-        if (options.outputData?.enableTransactionsFilterByDate ?? true) {
+        if ((_options$outputData$e = (_options$outputData = options.outputData) === null || _options$outputData === void 0 ? void 0 : _options$outputData.enableTransactionsFilterByDate) !== null && _options$outputData$e !== void 0 ? _options$outputData$e : true) {
           allTxns = (0, _transactions.filterOldTransactions)(allTxns, startMoment, options.combineInstallments || false);
         }
         accountTxns[account.accountNumber] = {
@@ -162,29 +172,27 @@ function getTransactionExtraDetails(servicesUrl, month, accountIndex, transactio
   });
 }
 async function getExtraScrapTransaction(page, options, month, accountIndex, transaction) {
+  var _$get;
   const dataUrl = getTransactionExtraDetails(options.servicesUrl, month, accountIndex, transaction);
-  const data = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+  const data = await (0, _fetch.safeFetchGetWithinPage)(page, dataUrl);
   if (!data) {
     return transaction;
   }
-  const rawCategory = _lodash.default.get(data, 'PirteyIska_204Bean.sector') ?? '';
-  return {
-    ...transaction,
+  const rawCategory = (_$get = _lodash.default.get(data, 'PirteyIska_204Bean.sector')) !== null && _$get !== void 0 ? _$get : '';
+  return _objectSpread(_objectSpread({}, transaction), {}, {
     category: rawCategory.trim()
-  };
+  });
 }
 function getExtraScrapTransactions(accountWithIndex, page, options, month) {
   const promises = accountWithIndex.txns.map(t => getExtraScrapTransaction(page, options, month, accountWithIndex.index, t));
   return Promise.all(promises);
 }
 async function getExtraScrapAccount(page, options, accountMap, month) {
-  const promises = Object.keys(accountMap).map(async a => ({
-    ...accountMap[a],
+  const promises = Object.keys(accountMap).map(async a => _objectSpread(_objectSpread({}, accountMap[a]), {}, {
     txns: await getExtraScrapTransactions(accountMap[a], page, options, month)
   }));
   const accounts = await Promise.all(promises);
-  return accounts.reduce((m, x) => ({
-    ...m,
+  return accounts.reduce((m, x) => _objectSpread(_objectSpread({}, m), {}, {
     [x.accountNumber]: x
   }), {});
 }
@@ -192,13 +200,16 @@ function getExtraScrap(accountsWithIndex, page, options, allMonths) {
   const actions = accountsWithIndex.map((a, i) => () => getExtraScrapAccount(page, options, a, allMonths[i]));
   return (0, _waiting.runSerial)(actions);
 }
-async function fetchAllTransactions(page, options, companyServiceOptions, startMoment) {
-  const futureMonthsToScrape = options.futureMonthsToScrape ?? 1;
+async function fetchAllTransactions(page, options, startMoment) {
+  var _options$futureMonths;
+  const futureMonthsToScrape = (_options$futureMonths = options.futureMonthsToScrape) !== null && _options$futureMonths !== void 0 ? _options$futureMonths : 1;
   const allMonths = (0, _dates.default)(startMoment, futureMonthsToScrape);
-  const results = await Promise.all(allMonths.map(async monthMoment => {
-    return fetchTransactions(page, options, companyServiceOptions, startMoment, monthMoment);
-  }));
-  const finalResult = options.additionalTransactionInformation ? await getExtraScrap(results, page, companyServiceOptions, allMonths) : results;
+  const results = [];
+  for (const monthMoment of allMonths) {
+    const result = await fetchTransactions(page, options, startMoment, monthMoment);
+    results.push(result);
+  }
+  const finalResult = options.additionalTransactionInformation ? await getExtraScrap(results, page, options, allMonths) : results;
   const combinedTxns = {};
   finalResult.forEach(result => {
     Object.keys(result).forEach(accountNumber => {
@@ -225,6 +236,9 @@ async function fetchAllTransactions(page, options, companyServiceOptions, startM
 class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   constructor(options, baseUrl, companyCode) {
     super(options);
+    _defineProperty(this, "baseUrl", void 0);
+    _defineProperty(this, "companyCode", void 0);
+    _defineProperty(this, "servicesUrl", void 0);
     this.baseUrl = baseUrl;
     this.companyCode = companyCode;
     this.servicesUrl = `${baseUrl}/services/ProxyRequestHandler.ashx`;
@@ -234,12 +248,12 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     this.page.on('request', request => {
       if (request.url().includes('detector-dom.min.js')) {
         debug('force abort for request do download detector-dom.min.js resource');
-        void request.abort(undefined, _browser.interceptionPriorities.abort);
+        void request.abort();
       } else {
-        void request.continue(undefined, _browser.interceptionPriorities.continue);
+        void request.continue();
       }
     });
-    await (0, _browser.maskHeadlessUserAgent)(this.page);
+    debug('navigate to login page');
     await this.navigateTo(`${this.baseUrl}/personalarea/Login`);
     this.emitProgress(_definitions.ScraperProgressTypes.LoggingIn);
     const validateUrl = `${this.servicesUrl}?reqName=ValidateIdData`;
@@ -251,7 +265,7 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
       checkLevel: '1',
       companyCode: this.companyCode
     };
-    const validateResult = await (0, _fetch.fetchPostWithinPage)(this.page, validateUrl, validateRequest);
+    const validateResult = await (0, _fetch.safeFetchPostWithinPage)(this.page, validateUrl, validateRequest);
     if (!validateResult || !validateResult.Header || validateResult.Header.Status !== '1' || !validateResult.ValidateIdDataBean) {
       throw new Error('unknown error during login');
     }
@@ -270,8 +284,8 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
         countryCode: COUNTRY_CODE,
         idType: ID_TYPE
       };
-      const loginResult = await (0, _fetch.fetchPostWithinPage)(this.page, loginUrl, request);
-      debug(`user login with status '${loginResult?.status}'`);
+      const loginResult = await (0, _fetch.safeFetchPostWithinPage)(this.page, loginUrl, request);
+      debug(`user login with status '${loginResult === null || loginResult === void 0 ? void 0 : loginResult.status}'`);
       if (loginResult && loginResult.status === '1') {
         this.emitProgress(_definitions.ScraperProgressTypes.LoginSuccess);
         return {
@@ -308,11 +322,11 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
     const startDate = this.options.startDate || defaultStartMoment.toDate();
     const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
-    return fetchAllTransactions(this.page, this.options, {
+    return fetchAllTransactions(this.page, _objectSpread(_objectSpread({}, this.options), {}, {
       servicesUrl: this.servicesUrl,
       companyCode: this.companyCode
-    }, startMoment);
+    }), startMoment);
   }
 }
 var _default = exports.default = IsracardAmexBaseScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.d.ts b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.d.ts
index 1e1e0af..c80ffec 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.d.ts
@@ -1,4 +1,4 @@
-import { type Frame, type Page, type PuppeteerLifeCycleEvent } from 'puppeteer';
+import { type Browser, type Frame, type Page, type PuppeteerLifeCycleEvent } from 'puppeteer';
 import { BaseScraper } from './base-scraper';
 import { ScraperErrorTypes } from './errors';
 import { type ScraperCredentials, type ScraperScrapingResult } from './interface';
@@ -35,16 +35,14 @@ export interface LoginOptions {
     waitUntil?: PuppeteerLifeCycleEvent;
 }
 declare class BaseScraperWithBrowser<TCredentials extends ScraperCredentials> extends BaseScraper<TCredentials> {
-    private cleanups;
-    private defaultViewportSize;
+    protected browser: Browser;
     protected page: Page;
     protected getViewPort(): {
         width: number;
         height: number;
     };
     initialize(): Promise<void>;
-    private initializePage;
-    navigateTo(url: string, waitUntil?: PuppeteerLifeCycleEvent | undefined, retries?: number): Promise<void>;
+    navigateTo(url: string, page?: Page, timeout?: number, waitUntil?: PuppeteerLifeCycleEvent | undefined): Promise<void>;
     getLoginOptions(_credentials: ScraperCredentials): LoginOptions;
     fillInputs(pageOrFrame: Page | Frame, fields: {
         selector: string;
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
index 6ed10ef..1287e84 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
@@ -4,6 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.LoginResults = exports.BaseScraperWithBrowser = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.constructor.js");
+require("core-js/modules/es.regexp.exec.js");
 var _puppeteer = _interopRequireDefault(require("puppeteer"));
 var _definitions = require("../definitions");
 var _debug = require("../helpers/debug");
@@ -12,6 +16,16 @@ var _navigation = require("../helpers/navigation");
 var _baseScraper = require("./base-scraper");
 var _errors = require("./errors");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
+function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
+function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
+const VIEWPORT_WIDTH = 1024;
+const VIEWPORT_HEIGHT = 768;
+const OK_STATUS = 200;
 const debug = (0, _debug.getDebug)('base-scraper-with-browser');
 var LoginBaseResults = /*#__PURE__*/function (LoginBaseResults) {
   LoginBaseResults["Success"] = "SUCCESS";
@@ -19,15 +33,12 @@ var LoginBaseResults = /*#__PURE__*/function (LoginBaseResults) {
   return LoginBaseResults;
 }(LoginBaseResults || {});
 const {
-  Timeout,
-  Generic,
-  General,
-  ...rest
-} = _errors.ScraperErrorTypes;
-const LoginResults = exports.LoginResults = {
-  ...rest,
-  ...LoginBaseResults
-};
+    Timeout,
+    Generic,
+    General
+  } = _errors.ScraperErrorTypes,
+  rest = _objectWithoutProperties(_errors.ScraperErrorTypes, ["Timeout", "Generic", "General"]);
+const LoginResults = exports.LoginResults = _objectSpread(_objectSpread({}, rest), LoginBaseResults);
 
 // eslint-disable-next-line @typescript-eslint/no-redeclare
 
@@ -62,39 +73,67 @@ function createGeneralError() {
     errorType: _errors.ScraperErrorTypes.General
   };
 }
-async function safeCleanup(cleanup) {
-  try {
-    await cleanup();
-  } catch (e) {
-    debug(`Cleanup function failed: ${e.message}`);
-  }
-}
 class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
-  cleanups = [];
-  defaultViewportSize = {
-    width: 1024,
-    height: 768
-  };
-
-  // NOTICE - it is discouraged to use bang (!) in general. It is used here because
-  // all the classes that inherit from this base assume is it mandatory.
-
+  constructor(...args) {
+    super(...args);
+    // NOTICE - it is discouraged to use bang (!) in general. It is used here because
+    // all the classes that inherit from this base assume is it mandatory.
+    _defineProperty(this, "browser", void 0);
+    // NOTICE - it is discouraged to use bang (!) in general. It is used here because
+    // all the classes that inherit from this base assume is it mandatory.
+    _defineProperty(this, "page", void 0);
+  }
   getViewPort() {
-    return this.options.viewportSize ?? this.defaultViewportSize;
+    return {
+      width: VIEWPORT_WIDTH,
+      height: VIEWPORT_HEIGHT
+    };
   }
   async initialize() {
     await super.initialize();
     debug('initialize scraper');
     this.emitProgress(_definitions.ScraperProgressTypes.Initializing);
-    const page = await this.initializePage();
-    await page.setCacheEnabled(false); // Clear cache and avoid 300's response status
-
-    if (!page) {
-      debug('failed to initiate a browser page, exit');
+    let env;
+    if (this.options.verbose) {
+      env = _objectSpread({
+        DEBUG: '*'
+      }, process.env);
+    }
+    if (typeof this.options.browser !== 'undefined' && this.options.browser !== null) {
+      debug('use custom browser instance provided in options');
+      this.browser = this.options.browser;
+    } else {
+      const executablePath = this.options.executablePath || undefined;
+      const args = this.options.args || [];
+      const {
+        timeout
+      } = this.options;
+      const headless = !this.options.showBrowser;
+      debug(`launch a browser with headless mode = ${headless}`);
+      this.browser = await _puppeteer.default.launch({
+        env,
+        headless,
+        executablePath,
+        args,
+        timeout
+      });
+    }
+    if (this.options.prepareBrowser) {
+      debug("execute 'prepareBrowser' interceptor provided in options");
+      await this.options.prepareBrowser(this.browser);
+    }
+    if (!this.browser) {
+      debug('failed to initiate a browser, exit');
       return;
     }
-    this.page = page;
-    this.cleanups.push(() => page.close());
+    const pages = await this.browser.pages();
+    if (pages.length) {
+      debug('browser has already pages open, use the first one');
+      [this.page] = pages;
+    } else {
+      debug('create a new browser page');
+      this.page = await this.browser.newPage();
+    }
     if (this.options.defaultTimeout) {
       this.page.setDefaultTimeout(this.options.defaultTimeout);
     }
@@ -109,81 +148,25 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
       height: viewport.height
     });
     this.page.on('requestfailed', request => {
-      debug('Request failed: %s %s', request.failure()?.errorText, request.url());
+      var _request$failure;
+      debug('Request failed: %s %s', (_request$failure = request.failure()) === null || _request$failure === void 0 ? void 0 : _request$failure.errorText, request.url());
     });
   }
-  async initializePage() {
-    debug('initialize browser page');
-    if ('browserContext' in this.options) {
-      debug('Using the browser context provided in options');
-      return this.options.browserContext.newPage();
-    }
-    if ('browser' in this.options) {
-      debug('Using the browser instance provided in options');
-      const {
-        browser
-      } = this.options;
-
-      /**
-       * For backward compatibility, we will close the browser even if we didn't create it
-       */
-      if (!this.options.skipCloseBrowser) {
-        this.cleanups.push(async () => {
-          debug('closing the browser');
-          await browser.close();
-        });
-      }
-      return browser.newPage();
+  async navigateTo(url, page, timeout, waitUntil = 'load') {
+    const pageToUse = page || this.page;
+    if (!pageToUse) {
+      return;
     }
-    const {
-      timeout,
-      args,
-      executablePath,
-      showBrowser
-    } = this.options;
-    const headless = !showBrowser;
-    debug(`launch a browser with headless mode = ${headless}`);
-    const browser = await _puppeteer.default.launch({
-      env: this.options.verbose ? {
-        DEBUG: '*',
-        ...process.env
-      } : undefined,
-      headless,
-      executablePath,
-      args,
+    const options = _objectSpread(_objectSpread({}, timeout === null ? null : {
       timeout
-    });
-    this.cleanups.push(async () => {
-      debug('closing the browser');
-      await browser.close();
-    });
-    if (this.options.prepareBrowser) {
-      debug("execute 'prepareBrowser' interceptor provided in options");
-      await this.options.prepareBrowser(browser);
-    }
-    debug('create a new browser page');
-    return browser.newPage();
-  }
-  async navigateTo(url, waitUntil = 'load', retries = this.options.navigationRetryCount ?? 0) {
-    const response = await this.page?.goto(url, {
+    }), {}, {
       waitUntil
     });
-    if (response === null) {
-      // note: response will be null when navigating to same url while changing the hash part.
-      // the condition below will always accept null as valid result.
-      return;
-    }
-    if (!response) {
-      throw new Error(`Error while trying to navigate to url ${url}, response is undefined`);
-    }
-    if (!response.ok()) {
-      const status = response.status();
-      if (retries > 0) {
-        debug(`Failed to navigate to url ${url}, status code: ${status}, retrying ${retries} more times`);
-        await this.navigateTo(url, waitUntil, retries - 1);
-      } else {
-        throw new Error(`Failed to navigate to url ${url}, status code: ${status}`);
-      }
+    const response = await pageToUse.goto(url, options);
+
+    // note: response will be null when navigating to same url while changing the hash part. the condition below will always accept null as valid result.
+    if (response !== null && (response === undefined || response.status() !== OK_STATUS)) {
+      throw new Error(`Error while trying to navigate to url ${url}`);
     }
   }
 
@@ -213,7 +196,7 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
       await this.page.setUserAgent(loginOptions.userAgent);
     }
     debug('navigate to login url');
-    await this.navigateTo(loginOptions.loginUrl, loginOptions.waitUntil);
+    await this.navigateTo(loginOptions.loginUrl, undefined, undefined, loginOptions.waitUntil);
     if (loginOptions.checkReadiness) {
       debug("execute 'checkReadiness' interceptor provided in login options");
       await loginOptions.checkReadiness();
@@ -258,8 +241,10 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
         fullPage: true
       });
     }
-    await Promise.all(this.cleanups.reverse().map(safeCleanup));
-    this.cleanups = [];
+    if (!this.browser) {
+      return;
+    }
+    await this.browser.close();
   }
   handleLoginResult(loginResult) {
     switch (loginResult) {
@@ -288,4 +273,4 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
   }
 }
 exports.BaseScraperWithBrowser = BaseScraperWithBrowser;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHVwcGV0ZWVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZGVmaW5pdGlvbnMiLCJfZGVidWciLCJfZWxlbWVudHNJbnRlcmFjdGlvbnMiLCJfbmF2aWdhdGlvbiIsIl9iYXNlU2NyYXBlciIsIl9lcnJvcnMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJvd25LZXlzIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJuIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaGFzT3duUHJvcGVydHkiLCJWSUVXUE9SVF9XSURUSCIsIlZJRVdQT1JUX0hFSUdIVCIsIk9LX1NUQVRVUyIsImRlYnVnIiwiZ2V0RGVidWciLCJMb2dpbkJhc2VSZXN1bHRzIiwiVGltZW91dCIsIkdlbmVyaWMiLCJHZW5lcmFsIiwiU2NyYXBlckVycm9yVHlwZXMiLCJyZXN0IiwiTG9naW5SZXN1bHRzIiwiZXhwb3J0cyIsImdldEtleUJ5VmFsdWUiLCJvYmplY3QiLCJwYWdlIiwia2V5IiwiY29uZGl0aW9ucyIsImNvbmRpdGlvbiIsInJlc3VsdCIsIlJlZ0V4cCIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiVW5rbm93bkVycm9yIiwiY3JlYXRlR2VuZXJhbEVycm9yIiwic3VjY2VzcyIsImVycm9yVHlwZSIsIkJhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJCYXNlU2NyYXBlciIsImNvbnN0cnVjdG9yIiwiYXJncyIsImdldFZpZXdQb3J0Iiwid2lkdGgiLCJoZWlnaHQiLCJpbml0aWFsaXplIiwiZW1pdFByb2dyZXNzIiwiU2NyYXBlclByb2dyZXNzVHlwZXMiLCJJbml0aWFsaXppbmciLCJlbnYiLCJvcHRpb25zIiwidmVyYm9zZSIsIkRFQlVHIiwicHJvY2VzcyIsImJyb3dzZXIiLCJleGVjdXRhYmxlUGF0aCIsInVuZGVmaW5lZCIsInRpbWVvdXQiLCJoZWFkbGVzcyIsInNob3dCcm93c2VyIiwicHVwcGV0ZWVyIiwibGF1bmNoIiwicHJlcGFyZUJyb3dzZXIiLCJwYWdlcyIsIm5ld1BhZ2UiLCJkZWZhdWx0VGltZW91dCIsInNldERlZmF1bHRUaW1lb3V0IiwicHJlcGFyZVBhZ2UiLCJ2aWV3cG9ydCIsInNldFZpZXdwb3J0Iiwib24iLCJyZXF1ZXN0IiwiX3JlcXVlc3QkZmFpbHVyZSIsImZhaWx1cmUiLCJlcnJvclRleHQiLCJ1cmwiLCJuYXZpZ2F0ZVRvIiwid2FpdFVudGlsIiwicGFnZVRvVXNlIiwicmVzcG9uc2UiLCJnb3RvIiwic3RhdHVzIiwiRXJyb3IiLCJnZXRMb2dpbk9wdGlvbnMiLCJfY3JlZGVudGlhbHMiLCJjb21wYW55SWQiLCJmaWxsSW5wdXRzIiwicGFnZU9yRnJhbWUiLCJmaWVsZHMiLCJtb2RpZmllZCIsImlucHV0Iiwic2hpZnQiLCJmaWxsSW5wdXQiLCJzZWxlY3RvciIsImxvZ2luIiwiY3JlZGVudGlhbHMiLCJsb2dpbk9wdGlvbnMiLCJ1c2VyQWdlbnQiLCJzZXRVc2VyQWdlbnQiLCJsb2dpblVybCIsImNoZWNrUmVhZGluZXNzIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJ3YWl0VW50aWxFbGVtZW50Rm91bmQiLCJsb2dpbkZyYW1lT3JQYWdlIiwicHJlQWN0aW9uIiwiY2xpY2tCdXR0b24iLCJMb2dnaW5nSW4iLCJwb3N0QWN0aW9uIiwid2FpdEZvck5hdmlnYXRpb24iLCJjdXJyZW50IiwiZ2V0Q3VycmVudFVybCIsImxvZ2luUmVzdWx0IiwicG9zc2libGVSZXN1bHRzIiwiaGFuZGxlTG9naW5SZXN1bHQiLCJ0ZXJtaW5hdGUiLCJfc3VjY2VzcyIsIlRlcm1pbmF0aW5nIiwic3RvcmVGYWlsdXJlU2NyZWVuU2hvdFBhdGgiLCJzY3JlZW5zaG90IiwicGF0aCIsImZ1bGxQYWdlIiwiY2xvc2UiLCJTdWNjZXNzIiwiTG9naW5TdWNjZXNzIiwiSW52YWxpZFBhc3N3b3JkIiwiTG9naW5GYWlsZWQiLCJlcnJvck1lc3NhZ2UiLCJDaGFuZ2VQYXNzd29yZCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwdXBwZXRlZXIsIHtcbiAgdHlwZSBCcm93c2VyLCB0eXBlIEZyYW1lLCB0eXBlIEdvVG9PcHRpb25zLCB0eXBlIFBhZ2UsIHR5cGUgUHVwcGV0ZWVyTGlmZUN5Y2xlRXZlbnQsXG59IGZyb20gJ3B1cHBldGVlcic7XG5cbmltcG9ydCB7IFNjcmFwZXJQcm9ncmVzc1R5cGVzIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgZ2V0RGVidWcgfSBmcm9tICcuLi9oZWxwZXJzL2RlYnVnJztcbmltcG9ydCB7IGNsaWNrQnV0dG9uLCBmaWxsSW5wdXQsIHdhaXRVbnRpbEVsZW1lbnRGb3VuZCB9IGZyb20gJy4uL2hlbHBlcnMvZWxlbWVudHMtaW50ZXJhY3Rpb25zJztcbmltcG9ydCB7IGdldEN1cnJlbnRVcmwsIHdhaXRGb3JOYXZpZ2F0aW9uIH0gZnJvbSAnLi4vaGVscGVycy9uYXZpZ2F0aW9uJztcbmltcG9ydCB7IEJhc2VTY3JhcGVyIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXInO1xuaW1wb3J0IHsgU2NyYXBlckVycm9yVHlwZXMgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgeyB0eXBlIFNjcmFwZXJDcmVkZW50aWFscywgdHlwZSBTY3JhcGVyU2NyYXBpbmdSZXN1bHQgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbmNvbnN0IFZJRVdQT1JUX1dJRFRIID0gMTAyNDtcbmNvbnN0IFZJRVdQT1JUX0hFSUdIVCA9IDc2ODtcbmNvbnN0IE9LX1NUQVRVUyA9IDIwMDtcblxuY29uc3QgZGVidWcgPSBnZXREZWJ1ZygnYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3NlcicpO1xuXG5lbnVtIExvZ2luQmFzZVJlc3VsdHMge1xuICBTdWNjZXNzID0gJ1NVQ0NFU1MnLFxuICBVbmtub3duRXJyb3IgPSAnVU5LTk9XTl9FUlJPUicsXG59XG5cbmNvbnN0IHtcbiAgVGltZW91dCwgR2VuZXJpYywgR2VuZXJhbCwgLi4ucmVzdFxufSA9IFNjcmFwZXJFcnJvclR5cGVzO1xuZXhwb3J0IGNvbnN0IExvZ2luUmVzdWx0cyA9IHtcbiAgLi4ucmVzdCxcbiAgLi4uTG9naW5CYXNlUmVzdWx0cyxcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgdHlwZSBMb2dpblJlc3VsdHMgPVxuICB8IEV4Y2x1ZGU8U2NyYXBlckVycm9yVHlwZXMsIFNjcmFwZXJFcnJvclR5cGVzLlRpbWVvdXQgfCBTY3JhcGVyRXJyb3JUeXBlcy5HZW5lcmljIHwgU2NyYXBlckVycm9yVHlwZXMuR2VuZXJhbD5cbiAgfCBMb2dpbkJhc2VSZXN1bHRzO1xuXG5leHBvcnQgdHlwZSBQb3NzaWJsZUxvZ2luUmVzdWx0cyA9IHtcbiAgW2tleSBpbiBMb2dpblJlc3VsdHNdPzogKHN0cmluZyB8IFJlZ0V4cCB8ICgob3B0aW9ucz86IHsgcGFnZT86IFBhZ2UgfSkgPT4gUHJvbWlzZTxib29sZWFuPikpW107XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2luT3B0aW9ucyB7XG4gIGxvZ2luVXJsOiBzdHJpbmc7XG4gIGNoZWNrUmVhZGluZXNzPzogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgZmllbGRzOiB7IHNlbGVjdG9yOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfVtdO1xuICBzdWJtaXRCdXR0b25TZWxlY3Rvcjogc3RyaW5nIHwgKCgpID0+IFByb21pc2U8dm9pZD4pO1xuICBwcmVBY3Rpb24/OiAoKSA9PiBQcm9taXNlPEZyYW1lIHwgdm9pZD47XG4gIHBvc3RBY3Rpb24/OiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBwb3NzaWJsZVJlc3VsdHM6IFBvc3NpYmxlTG9naW5SZXN1bHRzO1xuICB1c2VyQWdlbnQ/OiBzdHJpbmc7XG4gIHdhaXRVbnRpbD86IFB1cHBldGVlckxpZmVDeWNsZUV2ZW50O1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRLZXlCeVZhbHVlKG9iamVjdDogUG9zc2libGVMb2dpblJlc3VsdHMsIHZhbHVlOiBzdHJpbmcsIHBhZ2U6IFBhZ2UpOiBQcm9taXNlPExvZ2luUmVzdWx0cz4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBjb25kaXRpb25zID0gb2JqZWN0W2tleV07XG5cbiAgICBmb3IgKGNvbnN0IGNvbmRpdGlvbiBvZiBjb25kaXRpb25zKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIGlmIChjb25kaXRpb24gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmVzdWx0ID0gY29uZGl0aW9uLnRlc3QodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZGl0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IGNvbmRpdGlvbih7IHBhZ2UsIHZhbHVlIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gY29uZGl0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShMb2dpblJlc3VsdHMuVW5rbm93bkVycm9yKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2VuZXJhbEVycm9yKCk6IFNjcmFwZXJTY3JhcGluZ1Jlc3VsdCB7XG4gIHJldHVybiB7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgZXJyb3JUeXBlOiBTY3JhcGVyRXJyb3JUeXBlcy5HZW5lcmFsLFxuICB9O1xufVxuXG5jbGFzcyBCYXNlU2NyYXBlcldpdGhCcm93c2VyPFRDcmVkZW50aWFscyBleHRlbmRzIFNjcmFwZXJDcmVkZW50aWFscz4gZXh0ZW5kcyBCYXNlU2NyYXBlcjxUQ3JlZGVudGlhbHM+IHtcbiAgLy8gTk9USUNFIC0gaXQgaXMgZGlzY291cmFnZWQgdG8gdXNlIGJhbmcgKCEpIGluIGdlbmVyYWwuIEl0IGlzIHVzZWQgaGVyZSBiZWNhdXNlXG4gIC8vIGFsbCB0aGUgY2xhc3NlcyB0aGF0IGluaGVyaXQgZnJvbSB0aGlzIGJhc2UgYXNzdW1lIGlzIGl0IG1hbmRhdG9yeS5cbiAgcHJvdGVjdGVkIGJyb3dzZXIhOiBCcm93c2VyO1xuXG4gIC8vIE5PVElDRSAtIGl0IGlzIGRpc2NvdXJhZ2VkIHRvIHVzZSBiYW5nICghKSBpbiBnZW5lcmFsLiBJdCBpcyB1c2VkIGhlcmUgYmVjYXVzZVxuICAvLyBhbGwgdGhlIGNsYXNzZXMgdGhhdCBpbmhlcml0IGZyb20gdGhpcyBiYXNlIGFzc3VtZSBpcyBpdCBtYW5kYXRvcnkuXG4gIHByb3RlY3RlZCBwYWdlITogUGFnZTtcblxuICBwcm90ZWN0ZWQgZ2V0Vmlld1BvcnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBWSUVXUE9SVF9XSURUSCxcbiAgICAgIGhlaWdodDogVklFV1BPUlRfSEVJR0hULFxuICAgIH07XG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgIGF3YWl0IHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICBkZWJ1ZygnaW5pdGlhbGl6ZSBzY3JhcGVyJyk7XG4gICAgdGhpcy5lbWl0UHJvZ3Jlc3MoU2NyYXBlclByb2dyZXNzVHlwZXMuSW5pdGlhbGl6aW5nKTtcblxuICAgIGxldCBlbnY6IFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMub3B0aW9ucy52ZXJib3NlKSB7XG4gICAgICBlbnYgPSB7IERFQlVHOiAnKicsIC4uLnByb2Nlc3MuZW52IH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYnJvd3NlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5vcHRpb25zLmJyb3dzZXIgIT09IG51bGwpIHtcbiAgICAgIGRlYnVnKCd1c2UgY3VzdG9tIGJyb3dzZXIgaW5zdGFuY2UgcHJvdmlkZWQgaW4gb3B0aW9ucycpO1xuICAgICAgdGhpcy5icm93c2VyID0gdGhpcy5vcHRpb25zLmJyb3dzZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGV4ZWN1dGFibGVQYXRoID0gdGhpcy5vcHRpb25zLmV4ZWN1dGFibGVQYXRoIHx8IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLm9wdGlvbnMuYXJncyB8fCBbXTtcbiAgICAgIGNvbnN0IHsgdGltZW91dCB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBjb25zdCBoZWFkbGVzcyA9ICF0aGlzLm9wdGlvbnMuc2hvd0Jyb3dzZXI7XG4gICAgICBkZWJ1ZyhgbGF1bmNoIGEgYnJvd3NlciB3aXRoIGhlYWRsZXNzIG1vZGUgPSAke2hlYWRsZXNzfWApO1xuICAgICAgdGhpcy5icm93c2VyID0gYXdhaXQgcHVwcGV0ZWVyLmxhdW5jaCh7XG4gICAgICAgIGVudixcbiAgICAgICAgaGVhZGxlc3MsXG4gICAgICAgIGV4ZWN1dGFibGVQYXRoLFxuICAgICAgICBhcmdzLFxuICAgICAgICB0aW1lb3V0LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wcmVwYXJlQnJvd3Nlcikge1xuICAgICAgZGVidWcoXCJleGVjdXRlICdwcmVwYXJlQnJvd3NlcicgaW50ZXJjZXB0b3IgcHJvdmlkZWQgaW4gb3B0aW9uc1wiKTtcbiAgICAgIGF3YWl0IHRoaXMub3B0aW9ucy5wcmVwYXJlQnJvd3Nlcih0aGlzLmJyb3dzZXIpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5icm93c2VyKSB7XG4gICAgICBkZWJ1ZygnZmFpbGVkIHRvIGluaXRpYXRlIGEgYnJvd3NlciwgZXhpdCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhZ2VzID0gYXdhaXQgdGhpcy5icm93c2VyLnBhZ2VzKCk7XG4gICAgaWYgKHBhZ2VzLmxlbmd0aCkge1xuICAgICAgZGVidWcoJ2Jyb3dzZXIgaGFzIGFscmVhZHkgcGFnZXMgb3BlbiwgdXNlIHRoZSBmaXJzdCBvbmUnKTtcbiAgICAgIFt0aGlzLnBhZ2VdID0gcGFnZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdjcmVhdGUgYSBuZXcgYnJvd3NlciBwYWdlJyk7XG4gICAgICB0aGlzLnBhZ2UgPSBhd2FpdCB0aGlzLmJyb3dzZXIubmV3UGFnZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVmYXVsdFRpbWVvdXQpIHtcbiAgICAgIHRoaXMucGFnZS5zZXREZWZhdWx0VGltZW91dCh0aGlzLm9wdGlvbnMuZGVmYXVsdFRpbWVvdXQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMucHJlcGFyZVBhZ2UpIHtcbiAgICAgIGRlYnVnKFwiZXhlY3V0ZSAncHJlcGFyZVBhZ2UnIGludGVyY2VwdG9yIHByb3ZpZGVkIGluIG9wdGlvbnNcIik7XG4gICAgICBhd2FpdCB0aGlzLm9wdGlvbnMucHJlcGFyZVBhZ2UodGhpcy5wYWdlKTtcbiAgICB9XG5cbiAgICBjb25zdCB2aWV3cG9ydCA9IHRoaXMuZ2V0Vmlld1BvcnQoKTtcbiAgICBkZWJ1Zyhgc2V0IHZpZXdwb3J0IHRvIHdpZHRoICR7dmlld3BvcnQud2lkdGh9LCBoZWlnaHQgJHt2aWV3cG9ydC5oZWlnaHR9YCk7XG4gICAgYXdhaXQgdGhpcy5wYWdlLnNldFZpZXdwb3J0KHtcbiAgICAgIHdpZHRoOiB2aWV3cG9ydC53aWR0aCxcbiAgICAgIGhlaWdodDogdmlld3BvcnQuaGVpZ2h0LFxuICAgIH0pO1xuXG4gICAgdGhpcy5wYWdlLm9uKCdyZXF1ZXN0ZmFpbGVkJywgKHJlcXVlc3QpID0+IHtcbiAgICAgIGRlYnVnKCdSZXF1ZXN0IGZhaWxlZDogJXMgJXMnLCByZXF1ZXN0LmZhaWx1cmUoKT8uZXJyb3JUZXh0LCByZXF1ZXN0LnVybCgpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIG5hdmlnYXRlVG8oXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgcGFnZT86IFBhZ2UsXG4gICAgdGltZW91dD86IG51bWJlcixcbiAgICB3YWl0VW50aWw6IFB1cHBldGVlckxpZmVDeWNsZUV2ZW50IHwgdW5kZWZpbmVkID0gJ2xvYWQnLFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBwYWdlVG9Vc2UgPSBwYWdlIHx8IHRoaXMucGFnZTtcblxuICAgIGlmICghcGFnZVRvVXNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9uczogR29Ub09wdGlvbnMgPSB7IC4uLih0aW1lb3V0ID09PSBudWxsID8gbnVsbCA6IHsgdGltZW91dCB9KSwgd2FpdFVudGlsIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwYWdlVG9Vc2UuZ290byh1cmwsIG9wdGlvbnMpO1xuXG4gICAgLy8gbm90ZTogcmVzcG9uc2Ugd2lsbCBiZSBudWxsIHdoZW4gbmF2aWdhdGluZyB0byBzYW1lIHVybCB3aGlsZSBjaGFuZ2luZyB0aGUgaGFzaCBwYXJ0LiB0aGUgY29uZGl0aW9uIGJlbG93IHdpbGwgYWx3YXlzIGFjY2VwdCBudWxsIGFzIHZhbGlkIHJlc3VsdC5cbiAgICBpZiAocmVzcG9uc2UgIT09IG51bGwgJiYgKHJlc3BvbnNlID09PSB1bmRlZmluZWQgfHwgcmVzcG9uc2Uuc3RhdHVzKCkgIT09IE9LX1NUQVRVUykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3Igd2hpbGUgdHJ5aW5nIHRvIG5hdmlnYXRlIHRvIHVybCAke3VybH1gKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGdldExvZ2luT3B0aW9ucyhfY3JlZGVudGlhbHM6IFNjcmFwZXJDcmVkZW50aWFscyk6IExvZ2luT3B0aW9ucyB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBnZXRMb2dpbk9wdGlvbnMoKSBpcyBub3QgY3JlYXRlZCBpbiAke3RoaXMub3B0aW9ucy5jb21wYW55SWR9YCk7XG4gIH1cblxuICBhc3luYyBmaWxsSW5wdXRzKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIGZpZWxkczogeyBzZWxlY3Rvcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH1bXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG1vZGlmaWVkID0gWy4uLmZpZWxkc107XG4gICAgY29uc3QgaW5wdXQgPSBtb2RpZmllZC5zaGlmdCgpO1xuXG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCBmaWxsSW5wdXQocGFnZU9yRnJhbWUsIGlucHV0LnNlbGVjdG9yLCBpbnB1dC52YWx1ZSk7XG4gICAgaWYgKG1vZGlmaWVkLmxlbmd0aCkge1xuICAgICAgYXdhaXQgdGhpcy5maWxsSW5wdXRzKHBhZ2VPckZyYW1lLCBtb2RpZmllZCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbG9naW4oY3JlZGVudGlhbHM6IFNjcmFwZXJDcmVkZW50aWFscyk6IFByb21pc2U8U2NyYXBlclNjcmFwaW5nUmVzdWx0PiB7XG4gICAgaWYgKCFjcmVkZW50aWFscyB8fCAhdGhpcy5wYWdlKSB7XG4gICAgICByZXR1cm4gY3JlYXRlR2VuZXJhbEVycm9yKCk7XG4gICAgfVxuXG4gICAgZGVidWcoJ2V4ZWN1dGUgbG9naW4gcHJvY2VzcycpO1xuICAgIGNvbnN0IGxvZ2luT3B0aW9ucyA9IHRoaXMuZ2V0TG9naW5PcHRpb25zKGNyZWRlbnRpYWxzKTtcblxuICAgIGlmIChsb2dpbk9wdGlvbnMudXNlckFnZW50KSB7XG4gICAgICBkZWJ1Zygnc2V0IGN1c3RvbSB1c2VyIGFnZW50IHByb3ZpZGVkIGluIG9wdGlvbnMnKTtcbiAgICAgIGF3YWl0IHRoaXMucGFnZS5zZXRVc2VyQWdlbnQobG9naW5PcHRpb25zLnVzZXJBZ2VudCk7XG4gICAgfVxuXG4gICAgZGVidWcoJ25hdmlnYXRlIHRvIGxvZ2luIHVybCcpO1xuICAgIGF3YWl0IHRoaXMubmF2aWdhdGVUbyhsb2dpbk9wdGlvbnMubG9naW5VcmwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBsb2dpbk9wdGlvbnMud2FpdFVudGlsKTtcbiAgICBpZiAobG9naW5PcHRpb25zLmNoZWNrUmVhZGluZXNzKSB7XG4gICAgICBkZWJ1ZyhcImV4ZWN1dGUgJ2NoZWNrUmVhZGluZXNzJyBpbnRlcmNlcHRvciBwcm92aWRlZCBpbiBsb2dpbiBvcHRpb25zXCIpO1xuICAgICAgYXdhaXQgbG9naW5PcHRpb25zLmNoZWNrUmVhZGluZXNzKCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbG9naW5PcHRpb25zLnN1Ym1pdEJ1dHRvblNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgZGVidWcoJ3dhaXQgdW50aWwgc3VibWl0IGJ1dHRvbiBpcyBhdmFpbGFibGUnKTtcbiAgICAgIGF3YWl0IHdhaXRVbnRpbEVsZW1lbnRGb3VuZCh0aGlzLnBhZ2UsIGxvZ2luT3B0aW9ucy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgbGV0IGxvZ2luRnJhbWVPclBhZ2U6IFBhZ2UgfCBGcmFtZSB8IG51bGwgPSB0aGlzLnBhZ2U7XG4gICAgaWYgKGxvZ2luT3B0aW9ucy5wcmVBY3Rpb24pIHtcbiAgICAgIGRlYnVnKFwiZXhlY3V0ZSAncHJlQWN0aW9uJyBpbnRlcmNlcHRvciBwcm92aWRlZCBpbiBsb2dpbiBvcHRpb25zXCIpO1xuICAgICAgbG9naW5GcmFtZU9yUGFnZSA9IChhd2FpdCBsb2dpbk9wdGlvbnMucHJlQWN0aW9uKCkpIHx8IHRoaXMucGFnZTtcbiAgICB9XG5cbiAgICBkZWJ1ZygnZmlsbCBsb2dpbiBjb21wb25lbnRzIGlucHV0IHdpdGggcmVsZXZhbnQgdmFsdWVzJyk7XG4gICAgYXdhaXQgdGhpcy5maWxsSW5wdXRzKGxvZ2luRnJhbWVPclBhZ2UsIGxvZ2luT3B0aW9ucy5maWVsZHMpO1xuICAgIGRlYnVnKCdjbGljayBvbiBsb2dpbiBzdWJtaXQgYnV0dG9uJyk7XG4gICAgaWYgKHR5cGVvZiBsb2dpbk9wdGlvbnMuc3VibWl0QnV0dG9uU2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhd2FpdCBjbGlja0J1dHRvbihsb2dpbkZyYW1lT3JQYWdlLCBsb2dpbk9wdGlvbnMuc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBsb2dpbk9wdGlvbnMuc3VibWl0QnV0dG9uU2VsZWN0b3IoKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0UHJvZ3Jlc3MoU2NyYXBlclByb2dyZXNzVHlwZXMuTG9nZ2luZ0luKTtcblxuICAgIGlmIChsb2dpbk9wdGlvbnMucG9zdEFjdGlvbikge1xuICAgICAgZGVidWcoXCJleGVjdXRlICdwb3N0QWN0aW9uJyBpbnRlcmNlcHRvciBwcm92aWRlZCBpbiBsb2dpbiBvcHRpb25zXCIpO1xuICAgICAgYXdhaXQgbG9naW5PcHRpb25zLnBvc3RBY3Rpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ3dhaXQgZm9yIHBhZ2UgbmF2aWdhdGlvbicpO1xuICAgICAgYXdhaXQgd2FpdEZvck5hdmlnYXRpb24odGhpcy5wYWdlKTtcbiAgICB9XG5cbiAgICBkZWJ1ZygnY2hlY2sgbG9naW4gcmVzdWx0Jyk7XG4gICAgY29uc3QgY3VycmVudCA9IGF3YWl0IGdldEN1cnJlbnRVcmwodGhpcy5wYWdlLCB0cnVlKTtcbiAgICBjb25zdCBsb2dpblJlc3VsdCA9IGF3YWl0IGdldEtleUJ5VmFsdWUobG9naW5PcHRpb25zLnBvc3NpYmxlUmVzdWx0cywgY3VycmVudCwgdGhpcy5wYWdlKTtcbiAgICBkZWJ1ZyhgaGFuZGxlIGxvZ2luIHJlc3VsdHMgJHtsb2dpblJlc3VsdH1gKTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVMb2dpblJlc3VsdChsb2dpblJlc3VsdCk7XG4gIH1cblxuICBhc3luYyB0ZXJtaW5hdGUoX3N1Y2Nlc3M6IGJvb2xlYW4pIHtcbiAgICBkZWJ1ZyhgdGVybWluYXRpbmcgYnJvd3NlciB3aXRoIHN1Y2Nlc3MgPSAke19zdWNjZXNzfWApO1xuICAgIHRoaXMuZW1pdFByb2dyZXNzKFNjcmFwZXJQcm9ncmVzc1R5cGVzLlRlcm1pbmF0aW5nKTtcblxuICAgIGlmICghX3N1Y2Nlc3MgJiYgISF0aGlzLm9wdGlvbnMuc3RvcmVGYWlsdXJlU2NyZWVuU2hvdFBhdGgpIHtcbiAgICAgIGRlYnVnKGBjcmVhdGUgYSBzbmFwc2hvdCBiZWZvcmUgdGVybWluYXRlZCBpbiAke3RoaXMub3B0aW9ucy5zdG9yZUZhaWx1cmVTY3JlZW5TaG90UGF0aH1gKTtcbiAgICAgIGF3YWl0IHRoaXMucGFnZS5zY3JlZW5zaG90KHtcbiAgICAgICAgcGF0aDogdGhpcy5vcHRpb25zLnN0b3JlRmFpbHVyZVNjcmVlblNob3RQYXRoLFxuICAgICAgICBmdWxsUGFnZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5icm93c2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5icm93c2VyLmNsb3NlKCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUxvZ2luUmVzdWx0KGxvZ2luUmVzdWx0OiBMb2dpblJlc3VsdHMpIHtcbiAgICBzd2l0Y2ggKGxvZ2luUmVzdWx0KSB7XG4gICAgICBjYXNlIExvZ2luUmVzdWx0cy5TdWNjZXNzOlxuICAgICAgICB0aGlzLmVtaXRQcm9ncmVzcyhTY3JhcGVyUHJvZ3Jlc3NUeXBlcy5Mb2dpblN1Y2Nlc3MpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICBjYXNlIExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQ6XG4gICAgICBjYXNlIExvZ2luUmVzdWx0cy5Vbmtub3duRXJyb3I6XG4gICAgICAgIHRoaXMuZW1pdFByb2dyZXNzKFNjcmFwZXJQcm9ncmVzc1R5cGVzLkxvZ2luRmFpbGVkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBlcnJvclR5cGU6XG4gICAgICAgICAgICBsb2dpblJlc3VsdCA9PT0gTG9naW5SZXN1bHRzLkludmFsaWRQYXNzd29yZCA/XG4gICAgICAgICAgICAgIFNjcmFwZXJFcnJvclR5cGVzLkludmFsaWRQYXNzd29yZCA6XG4gICAgICAgICAgICAgIFNjcmFwZXJFcnJvclR5cGVzLkdlbmVyYWwsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiBgTG9naW4gZmFpbGVkIHdpdGggJHtsb2dpblJlc3VsdH0gZXJyb3JgLFxuICAgICAgICB9O1xuICAgICAgY2FzZSBMb2dpblJlc3VsdHMuQ2hhbmdlUGFzc3dvcmQ6XG4gICAgICAgIHRoaXMuZW1pdFByb2dyZXNzKFNjcmFwZXJQcm9ncmVzc1R5cGVzLkNoYW5nZVBhc3N3b3JkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBlcnJvclR5cGU6IFNjcmFwZXJFcnJvclR5cGVzLkNoYW5nZVBhc3N3b3JkLFxuICAgICAgICB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGxvZ2luIHJlc3VsdCBcIiR7bG9naW5SZXN1bHR9XCJgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgQmFzZVNjcmFwZXJXaXRoQnJvd3NlciB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBSUEsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcscUJBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLE9BQUEsR0FBQU4sT0FBQTtBQUE2QyxTQUFBRCx1QkFBQVEsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUFBLFNBQUFHLFFBQUFILENBQUEsRUFBQUksQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBUCxDQUFBLE9BQUFNLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFSLENBQUEsR0FBQUksQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVgsQ0FBQSxFQUFBSSxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBZixDQUFBLGFBQUFJLENBQUEsTUFBQUEsQ0FB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
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.test.js
index 0152d64..8d9c885 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.test.js
@@ -1,7 +1,13 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
 var _testsUtils = require("../tests/tests-utils");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 function isNoSandbox(browser) {
   // eslint-disable-next-line no-underscore-dangle
@@ -13,12 +19,11 @@ describe('Base scraper with browser', () => {
     (0, _testsUtils.extendAsyncTimeout)(); // The default timeout is 5 seconds per async test, this function extends the timeout value
   });
   xtest('should pass custom args to scraper if provided', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: 'test',
       showBrowser: false,
       args: []
-    };
+    });
 
     // avoid false-positive result by confirming that --no-sandbox is not a default flag provided by puppeteer
     let baseScraperWithBrowser = new _baseScraperWithBrowser.BaseScraperWithBrowser(options);
@@ -50,4 +55,4 @@ describe('Base scraper with browser', () => {
     }
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVzdHNVdGlscyIsInJlcXVpcmUiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsInRlc3RzQ29uZmlnIiwiZ2V0VGVzdHNDb25maWciLCJpc05vU2FuZGJveCIsImJyb3dzZXIiLCJhcmdzIiwiX3Byb2Nlc3MiLCJzcGF3bmFyZ3MiLCJpbmNsdWRlcyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwieHRlc3QiLCJvcHRpb25zIiwiY29tcGFueUlkIiwic2hvd0Jyb3dzZXIiLCJiYXNlU2NyYXBlcldpdGhCcm93c2VyIiwiQmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsImluaXRpYWxpemUiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsInRvQmUiLCJ0ZXJtaW5hdGUiLCJlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHRlbmRBc3luY1RpbWVvdXQsIGdldFRlc3RzQ29uZmlnIH0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgQmFzZVNjcmFwZXJXaXRoQnJvd3NlciB9IGZyb20gJy4vYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3Nlcic7XG5cbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZnVuY3Rpb24gaXNOb1NhbmRib3goYnJvd3NlcjogYW55KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICBjb25zdCBhcmdzID0gYnJvd3Nlci5fcHJvY2Vzcy5zcGF3bmFyZ3M7XG4gIHJldHVybiBhcmdzLmluY2x1ZGVzKCctLW5vLXNhbmRib3gnKTtcbn1cblxuZGVzY3JpYmUoJ0Jhc2Ugc2NyYXBlciB3aXRoIGJyb3dzZXInLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgZXh0ZW5kQXN5bmNUaW1lb3V0KCk7IC8vIFRoZSBkZWZhdWx0IHRpbWVvdXQgaXMgNSBzZWNvbmRzIHBlciBhc3luYyB0ZXN0LCB0aGlzIGZ1bmN0aW9uIGV4dGVuZHMgdGhlIHRpbWVvdXQgdmFsdWVcbiAgfSk7XG5cbiAgeHRlc3QoJ3Nob3VsZCBwYXNzIGN1c3RvbSBhcmdzIHRvIHNjcmFwZXIgaWYgcHJvdmlkZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICBjb21wYW55SWQ6ICd0ZXN0JyxcbiAgICAgIHNob3dCcm93c2VyOiBmYWxzZSxcbiAgICAgIGFyZ3M6IFtdLFxuICAgIH07XG5cbiAgICAvLyBhdm9pZCBmYWxzZS1wb3NpdGl2ZSByZXN1bHQgYnkgY29uZmlybWluZyB0aGF0IC0tbm8tc2FuZGJveCBpcyBub3QgYSBkZWZhdWx0IGZsYWcgcHJvdmlkZWQgYnkgcHVwcGV0ZWVyXG4gICAgbGV0IGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIgPSBuZXcgQmFzZVNjcmFwZXJXaXRoQnJvd3NlcihvcHRpb25zKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci5pbml0aWFsaXplKCk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBleHBlY3QoYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci5icm93c2VyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZXhwZWN0KGlzTm9TYW5kYm94KGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIuYnJvd3NlcikpLnRvQmUoZmFsc2UpO1xuICAgICAgYXdhaXQgYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci50ZXJtaW5hdGUodHJ1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci50ZXJtaW5hdGUoZmFsc2UpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICAvLyBzZXQgLS1uby1zYW5kYm94IGZsYWcgYW5kIGV4cGVjdCBpdCB0byBiZSBwYXNzZWQgYnkgcHVwcGV0ZWVyLmx1bmNoIHRvIHRoZSBuZXcgY3JlYXRlZCBicm93c2VyIGluc3RhbmNlXG4gICAgb3B0aW9ucy5hcmdzID0gWyctLW5vLXNhbmRib3gnLCAnLS1kaXNhYmxlLWdwdScsICctLXdpbmRvdy1zaXplPTE5MjB4MTA4MCddO1xuICAgIGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIgPSBuZXcgQmFzZVNjcmFwZXJXaXRoQnJvd3NlcihvcHRpb25zKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci5pbml0aWFsaXplKCk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBleHBlY3QoYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci5icm93c2VyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZXhwZWN0KGlzTm9TYW5kYm94KGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIuYnJvd3NlcikpLnRvQmUodHJ1ZSk7XG4gICAgICBhd2FpdCBiYXNlU2NyYXBlcldpdGhCcm93c2VyLnRlcm1pbmF0ZSh0cnVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhd2FpdCBiYXNlU2NyYXBlcldpdGhCcm93c2VyLnRlcm1pbmF0ZShmYWxzZSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxXQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyx1QkFBQSxHQUFBRCxPQUFBO0FBRUEsTUFBTUUsV0FBVyxHQUFHLElBQUFDLDBCQUFjLEVBQUMsQ0FBQztBQUVwQyxTQUFTQyxXQUFXQSxDQUFDQyxPQUFZLEVBQUU7RUFDakM7RUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQ0UsUUFBUSxDQUFDQyxTQUFTO0VBQ3ZDLE9BQU9GLElBQUksQ0FBQ0csUUFBUSxDQUFDLGNBQWMsQ0FBQztBQUN0QztBQUVBQyxRQUFRLENBQUMsMkJBQTJCLEVBQUUsTUFBTTtFQUMxQ0MsU0FBUyxDQUFDLE1BQU07SUFDZCxJQUFBQyw4QkFBa0IsRUFBQyxDQUFDLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQUM7RUFFRkMsS0FBSyxDQUFDLGdEQUFnRCxFQUFFLFlBQVk7SUFDbEUsTUFBTUMsT0FBTyxHQUFHO01BQ2QsR0FBR1osV0FBVyxDQUFDWSxPQUFPO01BQ3RCQyxTQUFTLEVBQUUsTUFBTTtNQUNqQkMsV0FBVyxFQUFFLEtBQUs7TUFDbEJWLElBQUksRUFBRTtJQUNSLENBQUM7O0lBRUQ7SUFDQSxJQUFJVyxzQkFBc0IsR0FBRyxJQUFJQyw4Q0FBc0IsQ0FBQ0osT0FBTyxDQUFDO0lBQ2hFLElBQUk7TUFDRixNQUFNRyxzQkFBc0IsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7TUFDekM7TUFDQUMsTUFBTSxDQUFDSCxzQkFBc0IsQ0FBQ1osT0FBTyxDQUFDLENBQUNnQixXQUFXLENBQUMsQ0FBQztNQUNwRDtNQUNBRCxNQUFNLENBQUNoQixXQUFXLENBQUNhLHNCQUFzQixDQUFDWixPQUFPLENBQUMsQ0FBQyxDQUFDaUIsSUFBSSxDQUFDLEtBQUssQ0FBQztNQUMvRCxNQUFNTCxzQkFBc0IsQ0FBQ00sU0FBUyxDQUFDLElBQUksQ0FBQztJQUM5QyxDQUFDLENBQUMsT0FBT0MsQ0FBQyxFQUFFO01BQ1YsTUFBTVAsc0JBQXNCLENBQUNNLFNBQVMsQ0FBQyxLQUFLLENBQUM7TUFDN0MsTUFBTUMsQ0FBQztJQUNUOztJQUVBO0lBQ0FWLE9BQU8sQ0FBQ1IsSUFBSSxHQUFHLENBQUMsY0FBYyxFQUFFLGVBQWUsRUFBRSx5QkFBeUIsQ0FBQztJQUMzRVcsc0JBQXNCLEdBQUcsSUFBSUMsOENBQXNCLENBQUNKLE9BQU8sQ0FBQztJQUM1RCxJQUFJO01BQ0YsTUFBTUcsc0JBQXNCLENBQUNFLFVBQVUsQ0FBQyxDQUFDO01BQ3pDO01BQ0FDLE1BQU0sQ0FBQ0gsc0JBQXNCLENBQUNaLE9BQU8sQ0FBQyxDQUFDZ0IsV0FBVyxDQUFDLENBQUM7TUFDcEQ7TUFDQUQsTUFBTSxDQUFDaEIsV0FBVyxDQUFDYSxzQkFBc0IsQ0FBQ1osT0FBTyxDQUFDLENBQUMsQ0FBQ2lCLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDOUQsTUFBTUwsc0JBQXNCLENBQUNNLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDOUMsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtNQUNWLE1BQU1QLHNCQUFzQixDQUFDTSxTQUFTLENBQUMsS0FBSyxDQUFDO01BQzdDLE1BQU1DLENBQUM7SUFDVDtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVzdHNVdGlscyIsInJlcXVpcmUiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImlzTm9TYW5kYm94IiwiYnJvd3NlciIsImFyZ3MiLCJfcHJvY2VzcyIsInNwYXduYXJncyIsImluY2x1ZGVzIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJleHRlbmRBc3luY1RpbWVvdXQiLCJ4dGVzdCIsIm9wdGlvbnMiLCJjb21wYW55SWQiLCJzaG93QnJvd3NlciIsImJhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJCYXNlU2NyYXBlcldpdGhCcm93c2VyIiwiaW5pdGlhbGl6ZSIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwidG9CZSIsInRlcm1pbmF0ZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZXh0ZW5kQXN5bmNUaW1lb3V0LCBnZXRUZXN0c0NvbmZpZyxcbn0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgQmFzZVNjcmFwZXJXaXRoQnJvd3NlciB9IGZyb20gJy4vYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3Nlcic7XG5cbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZnVuY3Rpb24gaXNOb1NhbmRib3goYnJvd3NlcjogYW55KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICBjb25zdCBhcmdzID0gYnJvd3Nlci5fcHJvY2Vzcy5zcGF3bmFyZ3M7XG4gIHJldHVybiBhcmdzLmluY2x1ZGVzKCctLW5vLXNhbmRib3gnKTtcbn1cblxuZGVzY3JpYmUoJ0Jhc2Ugc2NyYXBlciB3aXRoIGJyb3dzZXInLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgZXh0ZW5kQXN5bmNUaW1lb3V0KCk7IC8vIFRoZSBkZWZhdWx0IHRpbWVvdXQgaXMgNSBzZWNvbmRzIHBlciBhc3luYyB0ZXN0LCB0aGlzIGZ1bmN0aW9uIGV4dGVuZHMgdGhlIHRpbWVvdXQgdmFsdWVcbiAgfSk7XG5cbiAgeHRlc3QoJ3Nob3VsZCBwYXNzIGN1c3RvbSBhcmdzIHRvIHNjcmFwZXIgaWYgcHJvdmlkZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICBjb21wYW55SWQ6ICd0ZXN0JyxcbiAgICAgIHNob3dCcm93c2VyOiBmYWxzZSxcbiAgICAgIGFyZ3M6IFtdLFxuICAgIH07XG5cbiAgICAvLyBhdm9pZCBmYWxzZS1wb3NpdGl2ZSByZXN1bHQgYnkgY29uZmlybWluZyB0aGF0IC0tbm8tc2FuZGJveCBpcyBub3QgYSBkZWZhdWx0IGZsYWcgcHJvdmlkZWQgYnkgcHVwcGV0ZWVyXG4gICAgbGV0IGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIgPSBuZXcgQmFzZVNjcmFwZXJXaXRoQnJvd3NlcihvcHRpb25zKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci5pbml0aWFsaXplKCk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBleHBlY3QoYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci5icm93c2VyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZXhwZWN0KGlzTm9TYW5kYm94KGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIuYnJvd3NlcikpLnRvQmUoZmFsc2UpO1xuICAgICAgYXdhaXQgYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci50ZXJtaW5hdGUodHJ1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci50ZXJtaW5hdGUoZmFsc2UpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICAvLyBzZXQgLS1uby1zYW5kYm94IGZsYWcgYW5kIGV4cGVjdCBpdCB0byBiZSBwYXNzZWQgYnkgcHVwcGV0ZWVyLmx1bmNoIHRvIHRoZSBuZXcgY3JlYXRlZCBicm93c2VyIGluc3RhbmNlXG4gICAgb3B0aW9ucy5hcmdzID0gW1xuICAgICAgJy0tbm8tc2FuZGJveCcsXG4gICAgICAnLS1kaXNhYmxlLWdwdScsXG4gICAgICAnLS13aW5kb3ctc2l6ZT0xOTIweDEwODAnLFxuICAgIF07XG4gICAgYmFzZVNjcmFwZXJXaXRoQnJvd3NlciA9IG5ldyBCYXNlU2NyYXBlcldpdGhCcm93c2VyKG9wdGlvbnMpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBiYXNlU2NyYXBlcldpdGhCcm93c2VyLmluaXRpYWxpemUoKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGV4cGVjdChiYXNlU2NyYXBlcldpdGhCcm93c2VyLmJyb3dzZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBleHBlY3QoaXNOb1NhbmRib3goYmFzZVNjcmFwZXJXaXRoQnJvd3Nlci5icm93c2VyKSkudG9CZSh0cnVlKTtcbiAgICAgIGF3YWl0IGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIudGVybWluYXRlKHRydWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGF3YWl0IGJhc2VTY3JhcGVyV2l0aEJyb3dzZXIudGVybWluYXRlKGZhbHNlKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFBQSxXQUFBLEdBQUFDLE9BQUE7QUFHQSxJQUFBQyx1QkFBQSxHQUFBRCxPQUFBO0FBQXFFLFNBQUFFLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQWUsZUFBQSxDQUFBaEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBRSxNQUFBLENBQUFjLHlCQUFBLEdBQUFkLE1BQUEsQ0FBQWUsZ0JBQUEsQ0FBQWxCLENBQUEsRUFBQUcsTUFBQSxDQUFBYyx5QkFB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
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper.js
index 6a1fef3..bfe8322 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper.js
@@ -4,17 +4,21 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.BaseScraper = void 0;
+require("core-js/modules/es.promise.js");
 var _events = require("events");
 var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
 var _definitions = require("../definitions");
 var _waiting = require("../helpers/waiting");
 var _errors = require("./errors");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const SCRAPE_PROGRESS = 'SCRAPE_PROGRESS';
 class BaseScraper {
-  eventEmitter = new _events.EventEmitter();
   constructor(options) {
     this.options = options;
+    _defineProperty(this, "eventEmitter", new _events.EventEmitter());
   }
 
   // eslint-disable-next-line  @typescript-eslint/require-await
@@ -88,4 +92,4 @@ class BaseScraper {
   }
 }
 exports.BaseScraper = BaseScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.js b/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.js
index 6c1c70c..4ea29f9 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.js
@@ -4,6 +4,8 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _debug = require("../helpers/debug");
 var _elementsInteractions = require("../helpers/elements-interactions");
@@ -65,6 +67,7 @@ class BehatsdaaScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     };
   }
   async fetchData() {
+    var _res$data;
     const token = await this.page.evaluate(() => window.localStorage.getItem('userToken'));
     if (!token) {
       debug('Token not found in local storage');
@@ -80,19 +83,20 @@ class BehatsdaaScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     };
     debug('Fetching data');
     const res = await (0, _fetch.fetchPostWithinPage)(this.page, PURCHASE_HISTORY_URL, body, {
-      authorization: `Bearer ${token}`,
+      'authorization': `Bearer ${token}`,
       'Content-Type': 'application/json',
-      organizationid: '20'
+      'organizationid': '20'
     });
     debug('Data fetched');
-    if (res?.errorDescription || res?.data?.errorDescription) {
-      debug('Error fetching data', res.errorDescription || res.data?.errorDescription);
+    if (res !== null && res !== void 0 && res.errorDescription || res !== null && res !== void 0 && (_res$data = res.data) !== null && _res$data !== void 0 && _res$data.errorDescription) {
+      var _res$data2;
+      debug('Error fetching data', res.errorDescription || ((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.errorDescription));
       return {
         success: false,
         errorMessage: res.errorDescription
       };
     }
-    if (!res?.data) {
+    if (!(res !== null && res !== void 0 && res.data)) {
       debug('No data found');
       return {
         success: false,
@@ -110,4 +114,4 @@ class BehatsdaaScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = BehatsdaaScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9tZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZGVidWciLCJfZWxlbWVudHNJbnRlcmFjdGlvbnMiLCJfZmV0Y2giLCJfd2FpdGluZyIsIl90cmFuc2FjdGlvbnMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkJBU0VfVVJMIiwiTE9HSU5fVVJMIiwiUFVSQ0hBU0VfSElTVE9SWV9VUkwiLCJkZWJ1ZyIsImdldERlYnVnIiwidmFyaWFudFRvVHJhbnNhY3Rpb24iLCJ2YXJpYW50Iiwib3JpZ2luYWxBbW91bnQiLCJjdXN0b21lclByaWNlIiwidHlwZSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJOb3JtYWwiLCJpZGVudGlmaWVyIiwidFRyYW5zYWN0aW9uSUQiLCJkYXRlIiwibW9tZW50Iiwib3JkZXJEYXRlIiwiZm9ybWF0IiwicHJvY2Vzc2VkRGF0ZSIsIm9yaWdpbmFsQ3VycmVuY3kiLCJjaGFyZ2VkQW1vdW50IiwiY2hhcmdlZEN1cnJlbmN5IiwiZGVzY3JpcHRpb24iLCJuYW1lIiwic3RhdHVzIiwiVHJhbnNhY3Rpb25TdGF0dXNlcyIsIkNvbXBsZXRlZCIsIm1lbW8iLCJ2YXJpYW50TmFtZSIsIkJlaGF0c2RhYVNjcmFwZXIiLCJCYXNlU2NyYXBlcldpdGhCcm93c2VyIiwiZ2V0TG9naW5PcHRpb25zIiwiY3JlZGVudGlhbHMiLCJsb2dpblVybCIsImZpZWxkcyIsInNlbGVjdG9yIiwidmFsdWUiLCJpZCIsInBhc3N3b3JkIiwiY2hlY2tSZWFkaW5lc3MiLCJQcm9taXNlIiwiYWxsIiwid2FpdFVudGlsRWxlbWVudEZvdW5kIiwicGFnZSIsInBvc3NpYmxlUmVzdWx0cyIsIkxvZ2luUmVzdWx0cyIsIlN1Y2Nlc3MiLCJJbnZhbGlkUGFzc3dvcmQiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsInNsZWVwIiwiYnV0dG9uIiwiJCIsImNsaWNrIiwiZmV0Y2hEYXRhIiwiX3JlcyRkYXRhIiwidG9rZW4iLCJldmFsdWF0ZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzdWNjZXNzIiwiZXJyb3JNZXNzYWdlIiwiYm9keSIsIkZyb21EYXRlIiwib3B0aW9ucyIsInN0YXJ0RGF0ZSIsIlRvRGF0ZSIsIkJlbmVmaXRTdGF0dXNJZCIsInJlcyIsImZldGNoUG9zdFdpdGhpblBhZ2UiLCJlcnJvckRlc2NyaXB0aW9uIiwiZGF0YSIsIl9yZXMkZGF0YTIiLCJhY2NvdW50cyIsImFjY291bnROdW1iZXIiLCJtZW1iZXJJZCIsInR4bnMiLCJ2YXJpYW50cyIsIm1hcCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9iZWhhdHNkYWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgZ2V0RGVidWcgfSBmcm9tICcuLi9oZWxwZXJzL2RlYnVnJztcbmltcG9ydCB7IHdhaXRVbnRpbEVsZW1lbnRGb3VuZCB9IGZyb20gJy4uL2hlbHBlcnMvZWxlbWVudHMtaW50ZXJhY3Rpb25zJztcbmltcG9ydCB7IGZldGNoUG9zdFdpdGhpblBhZ2UgfSBmcm9tICcuLi9oZWxwZXJzL2ZldGNoJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnLi4vaGVscGVycy93YWl0aW5nJztcbmltcG9ydCB7IHR5cGUgVHJhbnNhY3Rpb24sIFRyYW5zYWN0aW9uU3RhdHVzZXMsIFRyYW5zYWN0aW9uVHlwZXMgfSBmcm9tICcuLi90cmFuc2FjdGlvbnMnO1xuaW1wb3J0IHsgQmFzZVNjcmFwZXJXaXRoQnJvd3NlciwgdHlwZSBMb2dpbk9wdGlvbnMsIExvZ2luUmVzdWx0cyB9IGZyb20gJy4vYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3Nlcic7XG5pbXBvcnQgeyB0eXBlIFNjcmFwZXJTY3JhcGluZ1Jlc3VsdCB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuY29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly93d3cuYmVoYXRzZGFhLm9yZy5pbCc7XG5jb25zdCBMT0dJTl9VUkwgPSBgJHtCQVNFX1VSTH0vbG9naW5gO1xuY29uc3QgUFVSQ0hBU0VfSElTVE9SWV9VUkwgPSAnaHR0cHM6Ly9iYWNrLmJlaGF0c2RhYS5vcmcuaWwvYXBpL3B1cmNoYXNlcy9wdXJjaGFzZUhpc3RvcnknO1xuXG5jb25zdCBkZWJ1ZyA9IGdldERlYnVnKCdiZWhhdHNkYWEnKTtcblxudHlwZSBTY3JhcGVyU3BlY2lmaWNDcmVkZW50aWFscyA9IHsgaWQ6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9O1xuXG50eXBlIFZhcmlhbnQgPSB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmFyaWFudE5hbWU6IHN0cmluZztcbiAgY3VzdG9tZXJQcmljZTogbnVtYmVyO1xuICBvcmRlckRhdGU6IHN0cmluZzsgLy8gSVNPIHRpbWVzdGFtcCB3aXRoIG5vIHRpbWV6b25lXG4gIHRUcmFuc2FjdGlvbklEOiBzdHJpbmc7XG59O1xuXG50eXBlIFB1cmNoYXNlSGlzdG9yeVJlc3BvbnNlID0ge1xuICBkYXRhPzoge1xuICAgIGVycm9yRGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgbWVtYmVySWQ6IHN0cmluZztcbiAgICB2YXJpYW50czogVmFyaWFudFtdO1xuICB9O1xuICBlcnJvckRlc2NyaXB0aW9uPzogc3RyaW5nO1xufTtcblxuZnVuY3Rpb24gdmFyaWFudFRvVHJhbnNhY3Rpb24odmFyaWFudDogVmFyaWFudCk6IFRyYW5zYWN0aW9uIHtcbiAgLy8gVGhlIHByaWNlIGlzIHBvc2l0aXZlLCBtYWtlIGl0IG5lZ2F0aXZlIGFzIGl0J3MgYW4gZXhwZW5zZVxuICBjb25zdCBvcmlnaW5hbEFtb3VudCA9IC12YXJpYW50LmN1c3RvbWVyUHJpY2U7XG4gIHJldHVybiB7XG4gICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlcy5Ob3JtYWwsXG4gICAgaWRlbnRpZmllcjogdmFyaWFudC50VHJhbnNhY3Rpb25JRCxcbiAgICBkYXRlOiBtb21lbnQodmFyaWFudC5vcmRlckRhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCcpLFxuICAgIHByb2Nlc3NlZERhdGU6IG1vbWVudCh2YXJpYW50Lm9yZGVyRGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREJyksXG4gICAgb3JpZ2luYWxBbW91bnQsXG4gICAgb3JpZ2luYWxDdXJyZW5jeTogJ0lMUycsXG4gICAgY2hhcmdlZEFtb3VudDogb3JpZ2luYWxBbW91bnQsXG4gICAgY2hhcmdlZEN1cnJlbmN5OiAnSUxTJyxcbiAgICBkZXNjcmlwdGlvbjogdmFyaWFudC5uYW1lLFxuICAgIHN0YXR1czogVHJhbnNhY3Rpb25TdGF0dXNlcy5Db21wbGV0ZWQsXG4gICAgbWVtbzogdmFyaWFudC52YXJpYW50TmFtZSxcbiAgfTtcbn1cblxuY2xhc3MgQmVoYXRzZGFhU2NyYXBlciBleHRlbmRzIEJhc2VTY3JhcGVyV2l0aEJyb3dzZXI8U2NyYXBlclNwZWNpZmljQ3JlZGVudGlhbHM+IHtcbiAgcHVibGljIGdldExvZ2luT3B0aW9ucyhjcmVkZW50aWFsczogU2NyYXBlclNwZWNpZmljQ3JlZGVudGlhbHMpOiBMb2dpbk9wdGlvbnMge1xuICAgIHJldHVybiB7XG4gICAgICBsb2dpblVybDogTE9HSU5fVVJMLFxuICAgICAgZmllbGRzOiBbXG4gICAgICAgIHsgc2VsZWN0b3I6ICcjbG9naW5JZCcsIHZhbHVlOiBjcmVkZW50aWFscy5pZCB9LFxuICAgICAgICB7IHNlbGVjdG9yOiAnI2xvZ2luUGFzc3dvcmQnLCB2YWx1ZTogY3JlZGVudGlhbHMucGFzc3dvcmQgfSxcbiAgICAgIF0sXG4gICAgICBjaGVja1JlYWRpbmVzczogYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgd2FpdFVudGlsRWxlbWVudEZvdW5kKHRoaXMucGFnZSwgJyNsb2dpblBhc3N3b3JkJyksXG4gICAgICAgICAgd2FpdFVudGlsRWxlbWVudEZvdW5kKHRoaXMucGFnZSwgJyNsb2dpbklkJyksXG4gICAgICAgIF0pO1xuICAgICAgfSxcbiAgICAgIHBvc3NpYmxlUmVzdWx0czoge1xuICAgICAgICBbTG9naW5SZXN1bHRzLlN1Y2Nlc3NdOiBbYCR7QkFTRV9VUkx9L2BdLFxuICAgICAgICBbTG9naW5SZXN1bHRzLkludmFsaWRQYXNzd29yZF06IFsnLmN1c3RvbS1pbnB1dC1lcnJvci1sYWJlbCddLFxuICAgICAgfSxcbiAgICAgIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEwMDApO1xuICAgICAgICBkZWJ1ZygnVHJ5aW5nIHRvIGZpbmQgc3VibWl0IGJ1dHRvbicpO1xuICAgICAgICBjb25zdCBidXR0b24gPSBhd2FpdCB0aGlzLnBhZ2UuJCgneHBhdGg9Ly9idXR0b25bY29udGFpbnMoLiwgXCLXlNeq15fXkdeo15XXqlwiKV0nKTtcbiAgICAgICAgaWYgKGJ1dHRvbikge1xuICAgICAgICAgIGRlYnVnKCdTdWJtaXQgYnV0dG9uIGZvdW5kJyk7XG4gICAgICAgICAgYXdhaXQgYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWcoJ1N1Ym1pdCBidXR0b24gbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGZldGNoRGF0YSgpOiBQcm9taXNlPFNjcmFwZXJTY3JhcGluZ1Jlc3VsdD4ge1xuICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy5wYWdlLmV2YWx1YXRlKCgpID0+IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlclRva2VuJykpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIGRlYnVnKCdUb2tlbiBub3QgZm91bmQgaW4gbG9jYWwgc3RvcmFnZScpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yTWVzc2FnZTogJ1Rva2VuTm90Rm91bmQnLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgRnJvbURhdGU6IG1vbWVudCh0aGlzLm9wdGlvbnMuc3RhcnREYXRlKS5mb3JtYXQoJ1lZWVktTU0tRERUSEg6bW06c3MnKSxcbiAgICAgIFRvRGF0ZTogbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREVEhIOm1tOnNzJyksXG4gICAgICBCZW5lZml0U3RhdHVzSWQ6IG51bGwsXG4gICAgfTtcblxuICAgIGRlYnVnKCdGZXRjaGluZyBkYXRhJyk7XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaFBvc3RXaXRoaW5QYWdlPFB1cmNoYXNlSGlzdG9yeVJlc3BvbnNlPih0aGlzLnBhZ2UsIFBVUkNIQVNFX0hJU1RPUllfVVJMLCBib2R5LCB7XG4gICAgICAnYXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0b2tlbn1gLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICdvcmdhbml6YXRpb25pZCc6ICcyMCcsXG4gICAgfSk7XG5cbiAgICBkZWJ1ZygnRGF0YSBmZXRjaGVkJyk7XG5cbiAgICBpZiAocmVzPy5lcnJvckRlc2NyaXB0aW9uIHx8IHJlcz8uZGF0YT8uZXJyb3JEZXNjcmlwdGlvbikge1xuICAgICAgZGVidWcoJ0Vycm9yIGZldGNoaW5nIGRhdGEnLCByZXMuZXJyb3JEZXNjcmlwdGlvbiB8fCByZXMuZGF0YT8uZXJyb3JEZXNjcmlwdGlvbik7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3JNZXNzYWdlOiByZXMuZXJyb3JEZXNjcmlwdGlvbiB9O1xuICAgIH1cblxuICAgIGlmICghcmVzPy5kYXRhKSB7XG4gICAgICBkZWJ1ZygnTm8gZGF0YSBmb3VuZCcpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yTWVzc2FnZTogJ05vRGF0YScgfTtcbiAgICB9XG5cbiAgICBkZWJ1ZygnRGF0YSBmZXRjaGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgYWNjb3VudHM6IFt7XG4gICAgICAgIGFjY291bnROdW1iZXI6IHJlcy5kYXRhLm1lbWJlcklkLFxuICAgICAgICB0eG5zOiByZXMuZGF0YS52YXJpYW50cy5tYXAodmFyaWFudFRvVHJhbnNhY3Rpb24pLFxuICAgICAgfV0sXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCZWhhdHNkYWFTY3JhcGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHFCQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxhQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSx1QkFBQSxHQUFBTixPQUFBO0FBQXNHLFNBQUFELHVCQUFBUSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBR3RHLE1BQU1HLFFBQVEsR0FBRyw4QkFBOEI7QUFDL0MsTUFBTUMsU0FBUyxHQUFHLEdBQUdELFFBQVEsUUFBUTtBQUNyQyxNQUFNRSxvQkFBb0IsR0FBRyw2REFBNkQ7QUFFMUYsTUFBTUMsS0FBSyxHQUFHLElBQUFDLGVBQVEsRUFBQyxXQUFXLENBQUM7QUFxQm5DLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsT0FBZ0IsRUFBZTtFQUMzRDtFQUNBLE1BQU1DLGNBQWMsR0FBRyxDQUFDRCxPQUFPLENBQUNFLGFBQWE7RUFDN0MsT0FBTztJQUNMQyxJQUFJLEVBQUVDLDhCQUFnQixDQUFDQyxNQUFNO0lBQzdCQyxVQUFVLEVBQUVOLE9BQU8sQ0FBQ08sY0FBYztJQUNsQ0MsSUFBSSxFQUFFLElBQUFDLGVBQU0sRUFBQ1QsT0FBTyxDQUFDVSxTQUFTLENBQUMs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
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.test.js
index ddc4aa4..83ec689 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.test.js
@@ -1,10 +1,16 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
 var _definitions = require("../definitions");
 var _testsUtils = require("../tests/tests-utils");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 var _behatsdaa = _interopRequireDefault(require("./behatsdaa"));
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Behatsdaa scraper', () => {
   beforeAll(() => {
@@ -16,10 +22,9 @@ describe('Behatsdaa scraper', () => {
     expect(_definitions.SCRAPERS[_definitions.CompanyTypes.behatsdaa].loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(_definitions.CompanyTypes.behatsdaa, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const scraper = new _behatsdaa.default({
-      ...testsConfig.options,
+    const scraper = new _behatsdaa.default(_objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: _definitions.CompanyTypes.behatsdaa
-    });
+    }));
     const result = await scraper.scrape({
       id: 'foofoofoo',
       password: 'barbarbar'
@@ -29,10 +34,9 @@ describe('Behatsdaa scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(_definitions.CompanyTypes.behatsdaa)('should scrape transactions', async () => {
-    const scraper = new _behatsdaa.default({
-      ...testsConfig.options,
+    const scraper = new _behatsdaa.default(_objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: _definitions.CompanyTypes.behatsdaa
-    });
+    }));
     const result = await scraper.scrape(testsConfig.credentials[_definitions.CompanyTypes.behatsdaa]);
     expect(result).toBeDefined();
     expect(result.errorMessage).toBeFalsy();
@@ -43,4 +47,4 @@ describe('Behatsdaa scraper', () => {
     (0, _testsUtils.exportTransactions)(_definitions.CompanyTypes.behatsdaa, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmaW5pdGlvbnMiLCJyZXF1aXJlIiwiX3Rlc3RzVXRpbHMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsIl9iZWhhdHNkYWEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwiaXQiLCJleHBlY3QiLCJTQ1JBUEVSUyIsIkNvbXBhbnlUeXBlcyIsImJlaGF0c2RhYSIsInRvQmVEZWZpbmVkIiwibG9naW5GaWVsZHMiLCJ0b0NvbnRhaW4iLCJtYXliZVRlc3RDb21wYW55QVBJIiwiY29uZmlnIiwiY29tcGFueUFQSSIsImludmFsaWRQYXNzd29yZCIsInNjcmFwZXIiLCJCZWhhdHNkYWFTY3JhcGVyIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInJlc3VsdCIsInNjcmFwZSIsImlkIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3JNZXNzYWdlIiwidG9CZVRydXRoeSIsImFjY291bnRzIiwidG9IYXZlTGVuZ3RoIiwiZXhwb3J0VHJhbnNhY3Rpb25zIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2JlaGF0c2RhYS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBhbnlUeXBlcywgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBleHBvcnRUcmFuc2FjdGlvbnMsIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIG1heWJlVGVzdENvbXBhbnlBUEkgfSBmcm9tICcuLi90ZXN0cy90ZXN0cy11dGlscyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuaW1wb3J0IEJlaGF0c2RhYVNjcmFwZXIgZnJvbSAnLi9iZWhhdHNkYWEnO1xuXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdCZWhhdHNkYWEgc2NyYXBlcicsICgpID0+IHtcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBleHRlbmRBc3luY1RpbWVvdXQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSU1tDb21wYW55VHlwZXMuYmVoYXRzZGFhXSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU0NSQVBFUlNbQ29tcGFueVR5cGVzLmJlaGF0c2RhYV0ubG9naW5GaWVsZHMpLnRvQ29udGFpbignaWQnKTtcbiAgICBleHBlY3QoU0NSQVBFUlNbQ29tcGFueVR5cGVzLmJlaGF0c2RhYV0ubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDb21wYW55VHlwZXMuYmVoYXRzZGFhLCBjb25maWcgPT4gY29uZmlnLmNvbXBhbnlBUEkuaW52YWxpZFBhc3N3b3JkKShcbiAgICAnc2hvdWxkIGZhaWwgb24gaW52YWxpZCB1c2VyL3Bhc3N3b3JkXCInLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgQmVoYXRzZGFhU2NyYXBlcih7XG4gICAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNvbXBhbnlJZDogQ29tcGFueVR5cGVzLmJlaGF0c2RhYSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh7IGlkOiAnZm9vZm9vZm9vJywgcGFzc3dvcmQ6ICdiYXJiYXJiYXInIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDb21wYW55VHlwZXMuYmVoYXRzZGFhKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBCZWhhdHNkYWFTY3JhcGVyKHtcbiAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICBjb21wYW55SWQ6IENvbXBhbnlUeXBlcy5iZWhhdHNkYWEsXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh0ZXN0c0NvbmZpZy5jcmVkZW50aWFsc1tDb21wYW55VHlwZXMuYmVoYXRzZGFhXSk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LmVycm9yTWVzc2FnZSkudG9CZUZhbHN5KCk7XG4gICAgZXhwZWN0KHJlc3VsdC5lcnJvclR5cGUpLnRvQmVGYWxzeSgpO1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChyZXN1bHQuYWNjb3VudHMpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHJlc3VsdC5hY2NvdW50cykudG9IYXZlTGVuZ3RoKDEpO1xuICAgIGV4cG9ydFRyYW5zYWN0aW9ucyhDb21wYW55VHlwZXMuYmVoYXRzZGFhLCByZXN1bHQuYWNjb3VudHMgfHwgW10pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHVCQUFBLEdB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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.js b/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.js
index 362eb6d..f4d4c94 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.js
@@ -4,12 +4,19 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
 var _baseBeinleumiGroup = _interopRequireDefault(require("./base-beinleumi-group"));
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 class BeinleumiScraper extends _baseBeinleumiGroup.default {
-  BASE_URL = 'https://online.fibi.co.il';
-  LOGIN_URL = `${this.BASE_URL}/MatafLoginService/MatafLoginServlet?bankId=FIBIPORTAL&site=Private&KODSAFA=HE`;
-  TRANSACTIONS_URL = `${this.BASE_URL}/wps/myportal/FibiMenu/Online/OnAccountMngment/OnBalanceTrans/PrivateAccountFlow`;
+  constructor(...args) {
+    super(...args);
+    _defineProperty(this, "BASE_URL", 'https://online.fibi.co.il');
+    _defineProperty(this, "LOGIN_URL", `${this.BASE_URL}/MatafLoginService/MatafLoginServlet?bankId=FIBIPORTAL&site=Private&KODSAFA=HE`);
+    _defineProperty(this, "TRANSACTIONS_URL", `${this.BASE_URL}/wps/myportal/FibiMenu/Online/OnAccountMngment/OnBalanceTrans/PrivateAccountFlow`);
+  }
 }
 var _default = exports.default = BeinleumiScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZUJlaW5sZXVtaUdyb3VwIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJCZWlubGV1bWlTY3JhcGVyIiwiQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciIsIkJBU0VfVVJMIiwiTE9HSU5fVVJMIiwiVFJBTlNBQ1RJT05TX1VSTCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9iZWlubGV1bWkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJlaW5sZXVtaUdyb3VwQmFzZVNjcmFwZXIgZnJvbSAnLi9iYXNlLWJlaW5sZXVtaS1ncm91cCc7XG5cbmNsYXNzIEJlaW5sZXVtaVNjcmFwZXIgZXh0ZW5kcyBCZWlubGV1bWlHcm91cEJhc2VTY3JhcGVyIHtcbiAgQkFTRV9VUkwgPSAnaHR0cHM6Ly9vbmxpbmUuZmliaS5jby5pbCc7XG5cbiAgTE9HSU5fVVJMID0gYCR7dGhpcy5CQVNFX1VSTH0vTWF0YWZMb2dpblNlcnZpY2UvTWF0YWZMb2dpblNlcnZsZXQ/YmFua0lkPUZJQklQT1JUQUwmc2l0ZT1Qcml2YXRlJktPRFNBRkE9SEVgO1xuXG4gIFRSQU5TQUNUSU9OU19VUkwgPSBgJHt0aGlzLkJBU0VfVVJMfS93cHMvbXlwb3J0YWwvRmliaU1lbnUvT25saW5lL09uQWNjb3VudE1uZ21lbnQvT25CYWxhbmNlVHJhbnMvUHJpdmF0ZUFjY291bnRGbG93YDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmVpbmxldW1pU2NyYXBlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUErRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUUvRCxNQUFNRyxnQkFBZ0IsU0FBU0MsMkJBQXlCLENBQUM7RUFDdkRDLFFBQVEsR0FBRywyQkFBMkI7RUFFdENDLFNBQVMsR0FBRyxHQUFHLElBQUksQ0FBQ0QsUUFBUSxnRkFBZ0Y7RUFFNUdFLGdCQUFnQixHQUFHLEdBQUcsSUFBSSxDQUFDRixRQUFRLGtGQUFrRjtBQUN2SDtBQUFDLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxDQUFBUCxPQUFBLEdBRWNDLGdCQUFnQiIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZUJlaW5sZXVtaUdyb3VwIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJyIiwidCIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJCZWlubGV1bWlTY3JhcGVyIiwiQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciIsImNvbnN0cnVjdG9yIiwiYXJncyIsIkJBU0VfVVJMIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2JlaW5sZXVtaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciBmcm9tICcuL2Jhc2UtYmVpbmxldW1pLWdyb3VwJztcblxuY2xhc3MgQmVpbmxldW1pU2NyYXBlciBleHRlbmRzIEJlaW5sZXVtaUdyb3VwQmFzZVNjcmFwZXIge1xuICBCQVNFX1VSTCA9ICdodHRwczovL29ubGluZS5maWJpLmNvLmlsJztcblxuICBMT0dJTl9VUkwgPSBgJHt0aGlzLkJBU0VfVVJMfS9NYXRhZkxvZ2luU2VydmljZS9NYXRhZkxvZ2luU2VydmxldD9iYW5rSWQ9RklCSVBPUlRBTCZzaXRlPVByaXZhdGUmS09EU0FGQT1IRWA7XG5cbiAgVFJBTlNBQ1RJT05TX1VSTCA9IGAke3RoaXMuQkFTRV9VUkx9L3dwcy9teXBvcnRhbC9GaWJpTWVudS9PbmxpbmUvT25BY2NvdW50TW5nbWVudC9PbkJhbGFuY2VUcmFucy9Qcml2YXRlQWNjb3VudEZsb3dgO1xufVxuXG5leHBvcnQgZGVmYXVsdCBCZWlubGV1bWlTY3JhcGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUErRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxDQUFBLEVBQUFJLENBQUEsRUFBQUMsQ0FBQSxZQUFBRCxDQUFBLEdBQUFFLGNBQUEsQ0FBQUYsQ0FBQSxNQUFBSixDQUFBLEdBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixDQUFBLEVBQUFJLENBQUEsSUFBQUssS0FBQSxFQUFBSixDQUFBLEVBQUFLLFVBQUEsTUFBQUMsWUFBQSxNQUFBQyxRQUFBLFVBQUFaLENBQUEsQ0FBQUksQ0FBQSxJQUFBQyxDQUFBLEVBQUFMLENBQUE7QUFBQSxTQUFBTSxlQUFBRCxDQUFBLFFBQUFRLENBQUEsR0FBQUMsWUFBQSxDQUFBVCxDQUFBLHVDQUFBUSxDQUFBLEdBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFULENBQUEsRUFBQUQsQ0FBQSwyQkFBQUMsQ0FBQSxLQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUwsQ0FBQSxHQUFBSyxDQUFBLENBQUFVLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQWhCLENBQUEsUUFBQWEsQ0FBQSxHQUFBYixDQUFBLENBQUFpQixJQUFBLENBQUFaLENBQUEsRUFBQUQsQ0FBQSx1Q0FBQVMsQ0FBQSxTQUFBQSxDQUFBLFlBQUFLLFNBQUEseUVBQUFkLENBQUEsR0FBQWUsTUFBQSxHQUFBQyxNQUFBLEVBQUFmLENBQUE7QUFFL0QsTUFBTWdCLGdCQUFnQixTQUFTQywyQkFBeUIsQ0FBQztFQUFBQyxZQUFBLEdBQUFDLElBQUE7SUFBQSxTQUFBQSxJQUFBO0lBQUFyQixlQUFBLG1CQUM1QywyQkFBMkI7SUFBQUEsZUFBQSxvQkFFMUIsR0FBRyxJQUFJLENBQUNzQixRQUFRLGdGQUFnRjtJQUFBdEIsZUFBQSwyQkFFekYsR0FBRyxJQUFJLENBQUNzQixRQUFRLGtGQUFrRjtFQUFBO0FBQ3ZIO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUF6QixPQUFBLEdBRWNtQixnQkFBZ0IiLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.test.js
index f9117d7..d0b9572 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/beinleumi.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _beinleumi = _interopRequireDefault(require("./beinleumi"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'beinleumi'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Beinleumi', () => {
@@ -17,10 +24,9 @@ describe('Beinleumi', () => {
     expect(_definitions.SCRAPERS.beinleumi.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _beinleumi.default(options);
     const result = await scraper.scrape({
       username: 'e10s12',
@@ -31,10 +37,9 @@ describe('Beinleumi', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _beinleumi.default(options);
     const result = await scraper.scrape(testsConfig.credentials.beinleumi);
     expect(result).toBeDefined();
@@ -44,4 +49,4 @@ describe('Beinleumi', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmVpbmxldW1pIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdGVzdHNVdGlscyIsIl9kZWZpbml0aW9ucyIsIl9iYXNlU2NyYXBlcldpdGhCcm93c2VyIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiQ09NUEFOWV9JRCIsInRlc3RzQ29uZmlnIiwiZ2V0VGVzdHNDb25maWciLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsImV4dGVuZEFzeW5jVGltZW91dCIsInRlc3QiLCJleHBlY3QiLCJTQ1JBUEVSUyIsImJlaW5sZXVtaSIsInRvQmVEZWZpbmVkIiwibG9naW5GaWVsZHMiLCJ0b0NvbnRhaW4iLCJtYXliZVRlc3RDb21wYW55QVBJIiwiY29uZmlnIiwiY29tcGFueUFQSSIsImludmFsaWRQYXNzd29yZCIsIm9wdGlvbnMiLCJjb21wYW55SWQiLCJzY3JhcGVyIiwiQmVpbmxldW1pU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ0cmltIiwidG9CZVRydXRoeSIsImV4cG9ydFRyYW5zYWN0aW9ucyIsImFjY291bnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2JlaW5sZXVtaS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCZWlubGV1bWlTY3JhcGVyIGZyb20gJy4vYmVpbmxldW1pJztcbmltcG9ydCB7IG1heWJlVGVzdENvbXBhbnlBUEksIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIGV4cG9ydFRyYW5zYWN0aW9ucyB9IGZyb20gJy4uL3Rlc3RzL3Rlc3RzLXV0aWxzJztcbmltcG9ydCB7IFNDUkFQRVJTIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgTG9naW5SZXN1bHRzIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyJztcblxuY29uc3QgQ09NUEFOWV9JRCA9ICdiZWlubGV1bWknOyAvLyBUT0RPIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGhhcmQtY29kZWQgaW4gdGhlIHByb3ZpZGVyXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdCZWlubGV1bWknLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgZXh0ZW5kQXN5bmNUaW1lb3V0KCk7IC8vIFRoZSBkZWZhdWx0IHRpbWVvdXQgaXMgNSBzZWNvbmRzIHBlciBhc3luYyB0ZXN0LCB0aGlzIGZ1bmN0aW9uIGV4dGVuZHMgdGhlIHRpbWVvdXQgdmFsdWVcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGV4cG9zZSBsb2dpbiBmaWVsZHMgaW4gc2NyYXBlcnMgY29uc3RhbnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFNDUkFQRVJTLmJlaW5sZXVtaSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuYmVpbmxldW1pLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ3VzZXJuYW1lJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLmJlaW5sZXVtaS5sb2dpbkZpZWxkcykudG9Db250YWluKCdwYXNzd29yZCcpO1xuICB9KTtcblxuICBtYXliZVRlc3RDb21wYW55QVBJKENPTVBBTllfSUQsIGNvbmZpZyA9PiBjb25maWcuY29tcGFueUFQSS5pbnZhbGlkUGFzc3dvcmQpKFxuICAgICdzaG91bGQgZmFpbCBvbiBpbnZhbGlkIHVzZXIvcGFzc3dvcmQnLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgQmVpbmxldW1pU2NyYXBlcihvcHRpb25zKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUoeyB1c2VybmFtZTogJ2UxMHMxMicsIHBhc3N3b3JkOiAnM2Yzc3MzZCcgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmVGYWxzeSgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvclR5cGUpLnRvQmUoTG9naW5SZXN1bHRzLkludmFsaWRQYXNzd29yZCk7XG4gICAgfSxcbiAgKTtcblxuICBtYXliZVRlc3RDb21wYW55QVBJKENPTVBBTllfSUQpKCdzaG91bGQgc2NyYXBlIHRyYW5zYWN0aW9uc1wiJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgY29tcGFueUlkOiBDT01QQU5ZX0lELFxuICAgIH07XG5cbiAgICBjb25zdCBzY3JhcGVyID0gbmV3IEJlaW5sZXVtaVNjcmFwZXIob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUodGVzdHNDb25maWcuY3JlZGVudGlhbHMuYmVpbmxldW1pKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IGVycm9yID0gYCR7cmVzdWx0LmVycm9yVHlwZSB8fCAnJ30gJHtyZXN1bHQuZXJyb3JNZXNzYWdlIHx8ICcnfWAudHJpbSgpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZSgnJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBleHBvcnRUcmFuc2FjdGlvbnMoQ09NUEFOWV9JRCwgcmVzdWx0LmFjY291bnRzIHx8IFtdKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxV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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.js b/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.js
index 30c415e..3d36445 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.js
@@ -4,6 +4,11 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.symbol.description.js");
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _constants = require("../constants");
 var _debug = require("../helpers/debug");
@@ -62,6 +67,7 @@ function convertTransactions(txns) {
   });
 }
 async function fetchTransactions(page, options) {
+  var _options$outputData$e, _options$outputData;
   await page.goto(CARD_URL);
   await (0, _elementsInteractions.waitUntilElementFound)(page, '.react-loading.hide', false);
   const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
@@ -92,7 +98,7 @@ async function fetchTransactions(page, options) {
   debug(`fetched ${rawTransactions.length} raw transactions from page`);
   const accountTransactions = convertTransactions(rawTransactions.filter(item => !!item));
   debug('filer out old transactions');
-  const txns = options.outputData?.enableTransactionsFilterByDate ?? true ? (0, _transactions.filterOldTransactions)(accountTransactions, startMoment, false) : accountTransactions;
+  const txns = ((_options$outputData$e = (_options$outputData = options.outputData) === null || _options$outputData === void 0 ? void 0 : _options$outputData.enableTransactionsFilterByDate) !== null && _options$outputData$e !== void 0 ? _options$outputData$e : true) ? (0, _transactions.filterOldTransactions)(accountTransactions, startMoment, false) : accountTransactions;
   debug(`found ${txns.length} valid transactions out of ${accountTransactions.length} transactions for account ending with ${accountNumber.substring(accountNumber.length - 2)}`);
   return {
     accountNumber,
@@ -146,4 +152,4 @@ class BeyahadBishvilhaScraper extends _baseScraperWithBrowser.BaseScraperWithBro
   }
 }
 var _default = exports.default = BeyahadBishvilhaScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.test.js
index b5d344f..1748f35 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/beyahad-bishvilha.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _beyahadBishvilha = _interopRequireDefault(require("./beyahad-bishvilha"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'beyahadBishvilha'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Beyahad Bishvilha scraper', () => {
@@ -17,10 +24,9 @@ describe('Beyahad Bishvilha scraper', () => {
     expect(_definitions.SCRAPERS.beyahadBishvilha.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _beyahadBishvilha.default(options);
     const result = await scraper.scrape({
       id: 'e10s12',
@@ -31,10 +37,9 @@ describe('Beyahad Bishvilha scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _beyahadBishvilha.default(options);
     const result = await scraper.scrape(testsConfig.credentials.beyahadBishvilha);
     expect(result).toBeDefined();
@@ -44,4 +49,4 @@ describe('Beyahad Bishvilha scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmV5YWhhZEJpc2h2aWxoYSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3Rlc3RzVXRpbHMiLCJfZGVmaW5pdGlvbnMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkNPTVBBTllfSUQiLCJ0ZXN0c0NvbmZpZyIsImdldFRlc3RzQ29uZmlnIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJleHRlbmRBc3luY1RpbWVvdXQiLCJ0ZXN0IiwiZXhwZWN0IiwiU0NSQVBFUlMiLCJiZXlhaGFkQmlzaHZpbGhhIiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJCZXlhaGFkQmlzaHZpbGhhU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsImlkIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ0cmltIiwidG9CZVRydXRoeSIsImV4cG9ydFRyYW5zYWN0aW9ucyIsImFjY291bnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2JleWFoYWQtYmlzaHZpbGhhLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJleWFoYWRCaXNodmlsaGFTY3JhcGVyIGZyb20gJy4vYmV5YWhhZC1iaXNodmlsaGEnO1xuaW1wb3J0IHsgbWF5YmVUZXN0Q29tcGFueUFQSSwgZXh0ZW5kQXN5bmNUaW1lb3V0LCBnZXRUZXN0c0NvbmZpZywgZXhwb3J0VHJhbnNhY3Rpb25zIH0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuXG5jb25zdCBDT01QQU5ZX0lEID0gJ2JleWFoYWRCaXNodmlsaGEnOyAvLyBUT0RPIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGhhcmQtY29kZWQgaW4gdGhlIHByb3ZpZGVyXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdCZXlhaGFkIEJpc2h2aWxoYSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5iZXlhaGFkQmlzaHZpbGhhKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5iZXlhaGFkQmlzaHZpbGhhLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ2lkJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLmJleWFoYWRCaXNodmlsaGEubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCBjb25maWcgPT4gY29uZmlnLmNvbXBhbnlBUEkuaW52YWxpZFBhc3N3b3JkKShcbiAgICAnc2hvdWxkIGZhaWwgb24gaW52YWxpZCB1c2VyL3Bhc3N3b3JkXCInLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgQmV5YWhhZEJpc2h2aWxoYVNjcmFwZXIob3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHsgaWQ6ICdlMTBzMTInLCBwYXNzd29yZDogJzNmM3NzM2QnIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBCZXlhaGFkQmlzaHZpbGhhU2NyYXBlcihvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh0ZXN0c0NvbmZpZy5jcmVkZW50aWFscy5iZXlhaGFkQmlzaHZpbGhhKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IGVycm9yID0gYCR7cmVzdWx0LmVycm9yVHlwZSB8fCAnJ30gJHtyZXN1bHQuZXJyb3JNZXNzYWdlIHx8ICcnfWAudHJpbSgpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZSgnJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBleHBvcnRUcmFuc2FjdGlvbnMoQ09NUEFOWV9JRCwgcmVzdWx0LmFjY291bnRzIHx8IFtdKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxpQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsdUJBQUEsR0FBQUgsT0FBQTtBQUEyRCxTQUFBRCx1QkFBQUssQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUUzRCxNQUFNRyxVQUFVLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztBQUN2QyxNQUFNQyxXQUFXLEdBQUcsSUFBQUMsMEJBQWMsRUFBQyxDQUFDO0FBRXBDQyxRQUFRLENBQUMsMkJBQTJCLEVBQUUsTUFBTTtFQUMxQ0MsU0FBUyxDQUFDLE1BQU07SUFDZCxJQUFBQyw4QkFBa0IsRUFBQyxDQUFDLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLGlEQUFpRCxFQUFFLE1BQU07SUFDNURDLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDL0NILE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsZ0JBQWdCLENBQUNFLFdBQVcsQ0FBQyxDQUFDQyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQzdETCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLGdCQUFnQixDQUFDRSxXQUFXLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQztFQUNyRSxDQUFDLENBQUM7RUFFRixJQUFBQywrQkFBbUIsRUFBQ2IsVUFBVSxFQUFFYyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDQyxlQUFlLENBQUMsQ0FDMUUsdUNBQXVDLEVBQ3ZDLFlBQVk7SUFDVixNQUFNQyxPQUFPLEdBQUc7TUFDZCxHQUFHaEIsV0FBVyxDQUFDZ0IsT0FBTztNQUN0QkMsU0FBUyxFQUFFbEI7SUFDYixDQUFDO0lBRUQsTUFBTW1CLE9BQU8sR0FBRyxJQUFJQyx5QkFBdUIsQ0FBQ0gsT0FBTyxDQUFDO0lBRXBELE1BQU1JLE1BQU0sR0FBRyxNQUFNRixPQUFPLENBQUNHLE1BQU0sQ0FBQztNQUFFQyxFQUFFLEVBQUUsUUFBUTtNQUFFQyxRQUFRLEVBQUU7SUFBVSxDQUFDLENBQUM7SUFFMUVqQixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QkgsTUFBTSxDQUFDYyxNQUFNLENBQUNJLE9BQU8sQ0FBQyxDQUFDQyxTQUFTLENBQUMsQ0FBQztJQUNsQ25CLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDTSxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDQyxvQ0FBWSxDQUFDQyxlQUFlLENBQUM7RUFDN0QsQ0FDRixDQUFDO0VBRUQsSUFBQWpCLCtCQUFtQixFQUFDYixVQUFVLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxZQUFZO0lBQ3pFLE1BQU1pQixPQUFPLEdBQUc7TUFDZCxHQUFHaEIsV0FBVyxDQUFDZ0IsT0FBTztNQUN0QkMsU0FBUyxFQUFFbEI7SUFDYixDQUFDO0lBRUQsTUFBTW1CLE9BQU8sR0FBRyxJQUFJQyx5QkFBdUIsQ0FBQ0gsT0FBTyxDQUFDO0lBQ3BELE1BQU1JLE1BQU0sR0FBRyxNQUFNRixPQUFPLENBQUNHLE1BQU0sQ0FBQ3JCLFdBQVcsQ0FBQzhCLFdBQVcsQ0FBQ3RCLGdCQUFnQixDQUFDO0lBQzdFRixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QixNQUFNc0IsS0FBSyxHQUFHLEdBQUdYLE1BQU0sQ0FBQ00sU0FBUyxJQUFJLEVBQUUsSUFBSU4sTUFBTSxDQUFDWSxZQUFZLElBQUksRUFBRSxFQUFFLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzdFM0IsTUFBTSxDQUFDeUIsS0FBSyxDQUFDLENBQUNKLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDdEJyQixNQUFNLENBQUNjLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLENBQUNVLFVBQVUsQ0FBQyxDQUFDO0lBRW5DLElBQUFDLDhCQUFrQixFQUFDcEMsVUFBVSxFQUFFcUIsTUFBTSxDQUFDZ0IsUUFBUSxJQUFJLEVBQUUsQ0FBQztFQUN2RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/discount.js b/node_modules/israeli-bank-scrapers/lib/scrapers/discount.js
index ba4e880..0cbe586 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/discount.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/discount.js
@@ -4,6 +4,8 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
 var _lodash = _interopRequireDefault(require("lodash"));
 var _moment = _interopRequireDefault(require("moment"));
 var _elementsInteractions = require("../helpers/elements-interactions");
@@ -113,4 +115,4 @@ class DiscountScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = DiscountScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/discount.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/discount.test.js
index 64e7bf8..6ddfabc 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/discount.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/discount.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _discount = _interopRequireDefault(require("./discount"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'discount'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Discount legacy scraper', () => {
@@ -18,10 +25,9 @@ describe('Discount legacy scraper', () => {
     expect(_definitions.SCRAPERS.discount.loginFields).toContain('num');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _discount.default(options);
     const result = await scraper.scrape({
       id: 'e10s12',
@@ -33,10 +39,9 @@ describe('Discount legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _discount.default(options);
     const result = await scraper.scrape(testsConfig.credentials.discount);
     expect(result).toBeDefined();
@@ -46,4 +51,4 @@ describe('Discount legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGlzY291bnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90ZXN0c1V0aWxzIiwiX2RlZmluaXRpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJDT01QQU5ZX0lEIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwidGVzdCIsImV4cGVjdCIsIlNDUkFQRVJTIiwiZGlzY291bnQiLCJ0b0JlRGVmaW5lZCIsImxvZ2luRmllbGRzIiwidG9Db250YWluIiwibWF5YmVUZXN0Q29tcGFueUFQSSIsImNvbmZpZyIsImNvbXBhbnlBUEkiLCJpbnZhbGlkUGFzc3dvcmQiLCJvcHRpb25zIiwiY29tcGFueUlkIiwic2NyYXBlciIsIkRpc2NvdW50U2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsImlkIiwicGFzc3dvcmQiLCJudW0iLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ0cmltIiwidG9CZVRydXRoeSIsImV4cG9ydFRyYW5zYWN0aW9ucyIsImFjY291bnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2Rpc2NvdW50LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpc2NvdW50U2NyYXBlciBmcm9tICcuL2Rpc2NvdW50JztcbmltcG9ydCB7IG1heWJlVGVzdENvbXBhbnlBUEksIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIGV4cG9ydFRyYW5zYWN0aW9ucyB9IGZyb20gJy4uL3Rlc3RzL3Rlc3RzLXV0aWxzJztcbmltcG9ydCB7IFNDUkFQRVJTIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgTG9naW5SZXN1bHRzIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyJztcblxuY29uc3QgQ09NUEFOWV9JRCA9ICdkaXNjb3VudCc7IC8vIFRPRE8gdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgaGFyZC1jb2RlZCBpbiB0aGUgcHJvdmlkZXJcbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZGVzY3JpYmUoJ0Rpc2NvdW50IGxlZ2FjeSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5kaXNjb3VudCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuZGlzY291bnQubG9naW5GaWVsZHMpLnRvQ29udGFpbignaWQnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuZGlzY291bnQubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuZGlzY291bnQubG9naW5GaWVsZHMpLnRvQ29udGFpbignbnVtJyk7XG4gIH0pO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCwgY29uZmlnID0+IGNvbmZpZy5jb21wYW55QVBJLmludmFsaWRQYXNzd29yZCkoXG4gICAgJ3Nob3VsZCBmYWlsIG9uIGludmFsaWQgdXNlci9wYXNzd29yZFwiJyxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzY3JhcGVyID0gbmV3IERpc2NvdW50U2NyYXBlcihvcHRpb25zKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUoeyBpZDogJ2UxMHMxMicsIHBhc3N3b3JkOiAnM2Yzc3MzZCcsIG51bTogJzEyMzQnIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBEaXNjb3VudFNjcmFwZXIob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUodGVzdHNDb25maWcuY3JlZGVudGlhbHMuZGlzY291bnQpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgZXJyb3IgPSBgJHtyZXN1bHQuZXJyb3JUeXBlIHx8ICcnfSAke3Jlc3VsdC5lcnJvck1lc3NhZ2UgfHwgJyd9YC50cmltKCk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlKCcnKTtcbiAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmVUcnV0aHkoKTtcblxuICAgIGV4cG9ydFRyYW5zYWN0aW9ucyhDT01QQU5ZX0lELCByZXN1bHQuYWNjb3VudHMgfHwgW10pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLHVCQUFBLEdBQUFILE9BQUE7QUFBMkQsU0FBQUQsdUJBQUFLLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFM0QsTUFBTUcsVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQy9CLE1BQU1DLFdBQVcsR0FBRyxJQUFBQywwQkFBYyxFQUFDLENBQUM7QUFFcENDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxNQUFNO0VBQ3hDQyxTQUFTLENBQUMsTUFBTTtJQUNkLElBQUFDLDhCQUFrQixFQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3hCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsaURBQWlELEVBQUUsTUFBTTtJQUM1REMsTUFBTSxDQUFDQyxxQkFBUSxDQUFDQyxRQUFRLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7SUFDdkNILE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsUUFBUSxDQUFDRSxXQUFXLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLElBQUksQ0FBQztJQUNyREwsTUFBTSxDQUFDQyxxQkFBUSxDQUFDQyxRQUFRLENBQUNFLFdBQVcsQ0FBQyxDQUFDQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzNETCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLFFBQVEsQ0FBQ0UsV0FBVyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxLQUFLLENBQUM7RUFDeEQsQ0FBQyxDQUFDO0VBRUYsSUFBQUMsK0JBQW1CLEVBQUNiLFVBQVUsRUFBRWMsTUFBTSxJQUFJQSxNQUFNLENBQUNDLFVBQVUsQ0FBQ0MsZUFBZSxDQUFDLENBQzFFLHVDQUF1QyxFQUN2QyxZQUFZO0lBQ1YsTUFBTUMsT0FBTyxHQUFHO01BQ2QsR0FBR2hCLFdBQVcsQ0FBQ2dCLE9BQU87TUFDdEJDLFNBQVMsRUFBRWxCO0lBQ2IsQ0FBQztJQUVELE1BQU1tQixPQUFPLEdBQUcsSUFBSUMsaUJBQWUsQ0FBQ0gsT0FBTyxDQUFDO0lBRTVDLE1BQU1JLE1BQU0sR0FBRyxNQUFNRixPQUFPLENBQUNHLE1BQU0sQ0FBQztNQUFFQyxFQUFFLEVBQUUsUUFBUTtNQUFFQyxRQUFRLEVBQUUsU0FBUztNQUFFQyxHQUFHLEVBQUU7SUFBTyxDQUFDLENBQUM7SUFFdkZsQixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QkgsTUFBTSxDQUFDYyxNQUFNLENBQUNLLE9BQU8sQ0FBQyxDQUFDQyxTQUFTLENBQUMsQ0FBQztJQUNsQ3BCLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDTyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDQyxvQ0FBWSxDQUFDQyxlQUFlLENBQUM7RUFDN0QsQ0FDRixDQUFDO0VBRUQsSUFBQWxCLCtCQUFtQixFQUFDYixVQUFVLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxZQUFZO0lBQ3pFLE1BQU1pQixPQUFPLEdBQUc7TUFDZCxHQUFHaEIsV0FBVyxDQUFDZ0IsT0FBTztNQUN0QkMsU0FBUyxFQUFFbEI7SUFDYixDQUFDO0lBRUQsTUFBTW1CLE9BQU8sR0FBRyxJQUFJQyxpQkFBZSxDQUFDSCxPQUFPLENBQUM7SUFDNUMsTUFBTUksTUFBTSxHQUFHLE1BQU1GLE9BQU8sQ0FBQ0csTUFBTSxDQUFDckIsV0FBVyxDQUFDK0IsV0FBVyxDQUFDdkIsUUFBUSxDQUFDO0lBQ3JFRixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QixNQUFNdUIsS0FBSyxHQUFHLEdBQUdaLE1BQU0sQ0FBQ08sU0FBUyxJQUFJLEVBQUUsSUFBSVAsTUFBTSxDQUFDYSxZQUFZLElBQUksRUFBRSxFQUFFLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzdFNUIsTUFBTSxDQUFDMEIsS0FBSyxDQUFDLENBQUNKLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDdEJ0QixNQUFNLENBQUNjLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDLENBQUNVLFVBQVUsQ0FBQyxDQUFDO0lBRW5DLElBQUFDLDhCQUFrQixFQUFDckMsVUFBVSxFQUFFcUIsTUFBTSxDQUFDaUIsUUFBUSxJQUFJLEVBQUUsQ0FBQztFQUN2RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js b/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js
index 901089c..6bf9a24 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js
@@ -20,7 +20,6 @@ var _mercantile = _interopRequireDefault(require("./mercantile"));
 var _mizrahi = _interopRequireDefault(require("./mizrahi"));
 var _oneZero = _interopRequireDefault(require("./one-zero"));
 var _otsarHahayal = _interopRequireDefault(require("./otsar-hahayal"));
-var _pagi = _interopRequireDefault(require("./pagi"));
 var _unionBank = _interopRequireDefault(require("./union-bank"));
 var _visaCal = _interopRequireDefault(require("./visa-cal"));
 var _yahav = _interopRequireDefault(require("./yahav"));
@@ -29,6 +28,10 @@ function createScraper(options) {
   switch (options.companyId) {
     case _definitions.CompanyTypes.hapoalim:
       return new _hapoalim.default(options);
+    case _definitions.CompanyTypes.hapoalimBeOnline:
+      // eslint-disable-next-line no-console
+      console.warn("hapoalimBeOnline is deprecated, use 'hapoalim' instead");
+      return new _hapoalim.default(options);
     case _definitions.CompanyTypes.leumi:
       return new _leumi.default(options);
     case _definitions.CompanyTypes.beyahadBishvilha:
@@ -43,6 +46,10 @@ function createScraper(options) {
       return new _otsarHahayal.default(options);
     case _definitions.CompanyTypes.visaCal:
       return new _visaCal.default(options);
+    case _definitions.CompanyTypes.leumiCard:
+      // eslint-disable-next-line no-console
+      console.warn("leumiCard is deprecated, use 'max' instead");
+      return new _max.default(options);
     case _definitions.CompanyTypes.max:
       return new _max.default(options);
     case _definitions.CompanyTypes.isracard:
@@ -61,10 +68,8 @@ function createScraper(options) {
       return new _oneZero.default(options);
     case _definitions.CompanyTypes.behatsdaa:
       return new _behatsdaa.default(options);
-    case _definitions.CompanyTypes.pagi:
-      return new _pagi.default(options);
     default:
       return (0, _assertNever.assertNever)(options.companyId, `unknown company id ${options.companyId}`);
   }
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXNzZXJ0TmV2ZXIiLCJyZXF1aXJlIiwiX2RlZmluaXRpb25zIiwiX2FtZXgiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2JlaGF0c2RhYSIsIl9iZWlubGV1bWkiLCJfYmV5YWhhZEJpc2h2aWxoYSIsIl9kaXNjb3VudCIsIl9oYXBvYWxpbSIsIl9pc3JhY2FyZCIsIl9sZXVtaSIsIl9tYXNzYWQiLCJfbWF4IiwiX21lcmNhbnRpbGUiLCJfbWl6cmFoaSIsIl9vbmVaZXJvIiwiX290c2FySGFoYXlhbCIsIl9wYWdpIiwiX3VuaW9uQmFuayIsIl92aXNhQ2FsIiwiX3lhaGF2IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY3JlYXRlU2NyYXBlciIsIm9wdGlvbnMiLCJjb21wYW55SWQiLCJDb21wYW55VHlwZXMiLCJoYXBvYWxpbSIsIkhhcG9hbGltU2NyYXBlciIsImxldW1pIiwiTGV1bWlTY3JhcGVyIiwiYmV5YWhhZEJpc2h2aWxoYSIsIkJleWFoYWRCaXNodmlsaGFTY3JhcGVyIiwibWl6cmFoaSIsIk1penJhaGlTY3JhcGVyIiwiZGlzY291bnQiLCJEaXNjb3VudFNjcmFwZXIiLCJtZXJjYW50aWxlIiwiTWVyY2FudGlsZVNjcmFwZXIiLCJvdHNhckhhaGF5YWwiLCJPdHNhckhhaGF5YWxTY3JhcGVyIiwidmlzYUNhbCIsIlZpc2FDYWxTY3JhcGVyIiwibWF4IiwiTWF4U2NyYXBlciIsImlzcmFjYXJkIiwiSXNyYWNhcmRTY3JhcGVyIiwiYW1leCIsIkFtZXhTY3JhcGVyIiwidW5pb24iLCJVbmlvbkJhbmtTY3JhcGVyIiwiYmVpbmxldW1pIiwiQmVpbmxldW1pU2NyYXBlciIsIm1hc3NhZCIsIk1hc3NhZFNjcmFwZXIiLCJ5YWhhdiIsIllhaGF2U2NyYXBlciIsIm9uZVplcm8iLCJPbmVaZXJvU2NyYXBlciIsImJlaGF0c2RhYSIsIkJlaGF0c2RhYVNjcmFwZXIiLCJwYWdpIiwiUGFnaVNjcmFwZXIiLCJhc3NlcnROZXZlciJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9mYWN0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSAnLi4vYXNzZXJ0TmV2ZXInO1xuaW1wb3J0IHsgQ29tcGFueVR5cGVzIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IEFtZXhTY3JhcGVyIGZyb20gJy4vYW1leCc7XG5pbXBvcnQgQmVoYXRzZGFhU2NyYXBlciBmcm9tICcuL2JlaGF0c2RhYSc7XG5pbXBvcnQgQmVpbmxldW1pU2NyYXBlciBmcm9tICcuL2JlaW5sZXVtaSc7XG5pbXBvcnQgQmV5YWhhZEJpc2h2aWxoYVNjcmFwZXIgZnJvbSAnLi9iZXlhaGFkLWJpc2h2aWxoYSc7XG5pbXBvcnQgRGlzY291bnRTY3JhcGVyIGZyb20gJy4vZGlzY291bnQnO1xuaW1wb3J0IEhhcG9hbGltU2NyYXBlciBmcm9tICcuL2hhcG9hbGltJztcbmltcG9ydCB7IHR5cGUgU2NyYXBlciwgdHlwZSBTY3JhcGVyQ3JlZGVudGlhbHMsIHR5cGUgU2NyYXBlck9wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgSXNyYWNhcmRTY3JhcGVyIGZyb20gJy4vaXNyYWNhcmQnO1xuaW1wb3J0IExldW1pU2NyYXBlciBmcm9tICcuL2xldW1pJztcbmltcG9ydCBNYXNzYWRTY3JhcGVyIGZyb20gJy4vbWFzc2FkJztcbmltcG9ydCBNYXhTY3JhcGVyIGZyb20gJy4vbWF4JztcbmltcG9ydCBNZXJjYW50aWxlU2NyYXBlciBmcm9tICcuL21lcmNhbnRpbGUnO1xuaW1wb3J0IE1penJhaGlTY3JhcGVyIGZyb20gJy4vbWl6cmFoaSc7XG5pbXBvcnQgT25lWmVyb1NjcmFwZXIgZnJvbSAnLi9vbmUtemVybyc7XG5pbXBvcnQgT3RzYXJIYWhheWFsU2NyYXBlciBmcm9tICcuL290c2FyLWhhaGF5YWwnO1xuaW1wb3J0IFBhZ2lTY3JhcGVyIGZyb20gJy4vcGFnaSc7XG5pbXBvcnQgVW5pb25CYW5rU2NyYXBlciBmcm9tICcuL3VuaW9uLWJhbmsnO1xuaW1wb3J0IFZpc2FDYWxTY3JhcGVyIGZyb20gJy4vdmlzYS1jYWwnO1xuaW1wb3J0IFlhaGF2U2NyYXBlciBmcm9tICcuL3lhaGF2JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2NyYXBlcihvcHRpb25zOiBTY3JhcGVyT3B0aW9ucyk6IFNjcmFwZXI8U2NyYXBlckNyZWRlbnRpYWxzPiB7XG4gIHN3aXRjaCAob3B0aW9ucy5jb21wYW55SWQpIHtcbiAgICBjYXNlIENvbXBhbnlUeXBlcy5oYXBvYWxpbTpcbiAgICAgIHJldHVybiBuZXcgSGFwb2FsaW1TY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNhc2UgQ29tcGFueVR5cGVzLmxldW1pOlxuICAgICAgcmV0dXJuIG5ldyBMZXVtaVNjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMuYmV5YWhhZEJpc2h2aWxoYTpcbiAgICAgIHJldHVybiBuZXcgQmV5YWhhZEJpc2h2aWxoYVNjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMubWl6cmFoaTpcbiAgICAgIHJldHVybiBuZXcgTWl6cmFoaVNjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMuZGlzY291bnQ6XG4gICAgICByZXR1cm4gbmV3IERpc2NvdW50U2NyYXBlcihvcHRpb25zKTtcbiAgICBjYXNlIENvbXBhbnlUeXBlcy5tZXJjYW50aWxlOlxuICAgICAgcmV0dXJuIG5ldyBNZXJjYW50aWxlU2NyYXBlcihvcHRpb25zKTtcbiAgICBjYXNlIENvbXBhbnlUeXBlcy5vdHNhckhhaGF5YWw6XG4gICAgICByZXR1cm4gbmV3IE90c2FySGFoYXlhbFNjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMudmlzYUNhbDpcbiAgICAgIHJldHVybiBuZXcgVmlzYUNhbFNjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMubWF4OlxuICAgICAgcmV0dXJuIG5ldyBNYXhTY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNhc2UgQ29tcGFueVR5cGVzLmlzcmFjYXJkOlxuICAgICAgcmV0dXJuIG5ldyBJc3JhY2FyZFNjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMuYW1leDpcbiAgICAgIHJldHVybiBuZXcgQW1leFNjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMudW5pb246XG4gICAgICByZXR1cm4gbmV3IFVuaW9uQmFua1NjcmFwZXIob3B0aW9ucyk7XG4gICAgY2FzZSBDb21wYW55VHlwZXMuYmVpbmxldW1pOlxuICAgICAgcmV0dXJuIG5ldyBCZWlubGV1bWlTY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNhc2UgQ29tcGFueVR5cGVzLm1hc3NhZDpcbiAgICAgIHJldHVybiBuZXcgTWFzc2FkU2NyYXBlcihvcHRpb25zKTtcbiAgICBjYXNlIENvbXBhbnlUeXBlcy55YWhhdjpcbiAgICAgIHJldHVybiBuZXcgWWFoYXZTY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNhc2UgQ29tcGFueVR5cGVzLm9uZVplcm86XG4gICAgICByZXR1cm4gbmV3IE9uZVplcm9TY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNhc2UgQ29tcGFueVR5cGVzLmJlaGF0c2RhYTpcbiAgICAgIHJldHVybiBuZXcgQmVoYXRzZGFhU2NyYXBlcihvcHRpb25zKTtcbiAgICBjYXNlIENvbXBhbnlUeXBlcy5wYWdpOlxuICAgICAgcmV0dXJuIG5ldyBQYWdpU2NyYXBlcihvcHRpb25zKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFzc2VydE5ldmVyKG9wdGlvbnMuY29tcGFueUlkLCBgdW5rbm93biBjb21wYW55IGlkICR7b3B0aW9ucy5jb21wYW55SWR9YCk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFB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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js b/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js
index 5784520..b0c2884 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js
@@ -4,6 +4,8 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _uuid = require("uuid");
 var _debug = require("../helpers/debug");
@@ -13,6 +15,11 @@ var _waiting = require("../helpers/waiting");
 var _transactions = require("../transactions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const debug = (0, _debug.getDebug)('hapoalim');
 const DATE_FORMAT = 'YYYYMMDD';
 
@@ -96,10 +103,9 @@ async function getExtraScrap(txnsResult, baseUrl, page, accountNumber) {
           transactionNumber
         } = extraTransactionDetails[0];
         if (transactionNumber) {
-          return {
-            ...transaction,
+          return _objectSpread(_objectSpread({}, transaction), {}, {
             referenceNumber: transactionNumber
-          };
+          });
         }
       }
     }
@@ -111,15 +117,16 @@ async function getExtraScrap(txnsResult, baseUrl, page, accountNumber) {
   };
 }
 async function getAccountTransactions(baseUrl, apiSiteUrl, page, accountNumber, startDate, endDate, additionalTransactionInformation = false) {
+  var _finalResult$transact;
   const txnsUrl = `${apiSiteUrl}/current-account/transactions?accountId=${accountNumber}&numItemsPerPage=1000&retrievalEndDate=${endDate}&retrievalStartDate=${startDate}&sortCode=1`;
   const txnsResult = await fetchPoalimXSRFWithinPage(page, txnsUrl, '/current-account/transactions');
-  const finalResult = additionalTransactionInformation && txnsResult?.transactions.length ? await getExtraScrap(txnsResult, baseUrl, page, accountNumber) : txnsResult;
-  return convertTransactions(finalResult?.transactions ?? []);
+  const finalResult = additionalTransactionInformation && txnsResult !== null && txnsResult !== void 0 && txnsResult.transactions.length ? await getExtraScrap(txnsResult, baseUrl, page, accountNumber) : txnsResult;
+  return convertTransactions((_finalResult$transact = finalResult === null || finalResult === void 0 ? void 0 : finalResult.transactions) !== null && _finalResult$transact !== void 0 ? _finalResult$transact : []);
 }
 async function getAccountBalance(apiSiteUrl, page, accountNumber) {
   const balanceAndCreditLimitUrl = `${apiSiteUrl}/current-account/composite/balanceAndCreditLimit?accountId=${accountNumber}&view=details&lang=he`;
   const balanceAndCreditLimit = await (0, _fetch.fetchGetWithinPage)(page, balanceAndCreditLimitUrl);
-  return balanceAndCreditLimit?.currentBalance;
+  return balanceAndCreditLimit === null || balanceAndCreditLimit === void 0 ? void 0 : balanceAndCreditLimit.currentBalance;
 }
 async function fetchAccountData(page, baseUrl, options) {
   const restContext = await getRestContext(page);
@@ -195,4 +202,4 @@ class HapoalimScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = HapoalimScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.test.js
index 28655d4..b85b4cf 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _hapoalim = _interopRequireDefault(require("./hapoalim"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'hapoalim'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Hapoalim legacy scraper', () => {
@@ -17,10 +24,9 @@ describe('Hapoalim legacy scraper', () => {
     expect(_definitions.SCRAPERS.hapoalim.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _hapoalim.default(options);
     const result = await scraper.scrape({
       userCode: 'e10s12',
@@ -31,10 +37,9 @@ describe('Hapoalim legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _hapoalim.default(options);
     const result = await scraper.scrape(testsConfig.credentials.hapoalim);
     expect(result).toBeDefined();
@@ -44,4 +49,4 @@ describe('Hapoalim legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGFwb2FsaW0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90ZXN0c1V0aWxzIiwiX2RlZmluaXRpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJDT01QQU5ZX0lEIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwidGVzdCIsImV4cGVjdCIsIlNDUkFQRVJTIiwiaGFwb2FsaW0iLCJ0b0JlRGVmaW5lZCIsImxvZ2luRmllbGRzIiwidG9Db250YWluIiwibWF5YmVUZXN0Q29tcGFueUFQSSIsImNvbmZpZyIsImNvbXBhbnlBUEkiLCJpbnZhbGlkUGFzc3dvcmQiLCJvcHRpb25zIiwiY29tcGFueUlkIiwic2NyYXBlciIsIkhhcG9hbGltU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsInVzZXJDb2RlIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ0cmltIiwidG9CZVRydXRoeSIsImV4cG9ydFRyYW5zYWN0aW9ucyIsImFjY291bnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2hhcG9hbGltLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhhcG9hbGltU2NyYXBlciBmcm9tICcuL2hhcG9hbGltJztcbmltcG9ydCB7IG1heWJlVGVzdENvbXBhbnlBUEksIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIGV4cG9ydFRyYW5zYWN0aW9ucyB9IGZyb20gJy4uL3Rlc3RzL3Rlc3RzLXV0aWxzJztcbmltcG9ydCB7IFNDUkFQRVJTIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgTG9naW5SZXN1bHRzIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyJztcblxuY29uc3QgQ09NUEFOWV9JRCA9ICdoYXBvYWxpbSc7IC8vIFRPRE8gdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgaGFyZC1jb2RlZCBpbiB0aGUgcHJvdmlkZXJcbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZGVzY3JpYmUoJ0hhcG9hbGltIGxlZ2FjeSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5oYXBvYWxpbSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuaGFwb2FsaW0ubG9naW5GaWVsZHMpLnRvQ29udGFpbigndXNlckNvZGUnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuaGFwb2FsaW0ubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCBjb25maWcgPT4gY29uZmlnLmNvbXBhbnlBUEkuaW52YWxpZFBhc3N3b3JkKShcbiAgICAnc2hvdWxkIGZhaWwgb24gaW52YWxpZCB1c2VyL3Bhc3N3b3JkXCInLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgSGFwb2FsaW1TY3JhcGVyKG9wdGlvbnMpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh7IHVzZXJDb2RlOiAnZTEwczEyJywgcGFzc3dvcmQ6ICczZjNzczNkJyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZUZhbHN5KCk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yVHlwZSkudG9CZShMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkKTtcbiAgICB9LFxuICApO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCkoJ3Nob3VsZCBzY3JhcGUgdHJhbnNhY3Rpb25zXCInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgfTtcblxuICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgSGFwb2FsaW1TY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHRlc3RzQ29uZmlnLmNyZWRlbnRpYWxzLmhhcG9hbGltKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IGVycm9yID0gYCR7cmVzdWx0LmVycm9yVHlwZSB8fCAnJ30gJHtyZXN1bHQuZXJyb3JNZXNzYWdlIHx8ICcnfWAudHJpbSgpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZSgnJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBleHBvcnRUcmFuc2FjdGlvbnMoQ09NUEFOWV9JRCwgcmVzdWx0LmFjY291bnRzIHx8IFtdKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyx1QkFBQSxHQUFBSCxPQUFBO0FBQTJELFNBQUFELHVCQUFBSyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRTNELE1BQU1HLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQztBQUMvQixNQUFNQyxXQUFXLEdBQUcsSUFBQUMsMEJBQWMsRUFBQyxDQUFDO0FBRXBDQyxRQUFRLENBQUMseUJBQXlCLEVBQUUsTUFBTTtFQUN4Q0MsU0FBUyxDQUFDLE1BQU07SUFDZCxJQUFBQyw4QkFBa0IsRUFBQyxDQUFDLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLGlEQUFpRCxFQUFFLE1BQU07SUFDNURDLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZDSCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLFFBQVEsQ0FBQ0UsV0FBVyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDM0RMLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsUUFBUSxDQUFDRSxXQUFXLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRixJQUFBQywrQkFBbUIsRUFBQ2IsVUFBVSxFQUFFYyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDQyxlQUFlLENBQUMsQ0FDMUUsdUNBQXVDLEVBQ3ZDLFlBQVk7SUFDVixNQUFNQyxPQUFPLEdBQUc7TUFDZCxHQUFHaEIsV0FBVyxDQUFDZ0IsT0FBTztNQUN0QkMsU0FBUyxFQUFFbEI7SUFDYixDQUFDO0lBRUQsTUFBTW1CLE9BQU8sR0FBRyxJQUFJQyxpQkFBZSxDQUFDSCxPQUFPLENBQUM7SUFFNUMsTUFBTUksTUFBTSxHQUFHLE1BQU1GLE9BQU8sQ0FBQ0csTUFBTSxDQUFDO01BQUVDLFFBQVEsRUFBRSxRQUFRO01BQUVDLFFBQVEsRUFBRTtJQUFVLENBQUMsQ0FBQztJQUVoRmpCLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDLENBQUNYLFdBQVcsQ0FBQyxDQUFDO0lBQzVCSCxNQUFNLENBQUNjLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDbkIsTUFBTSxDQUFDYyxNQUFNLENBQUNNLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUNDLG9DQUFZLENBQUNDLGVBQWUsQ0FBQztFQUM3RCxDQUNGLENBQUM7RUFFRCxJQUFBakIsK0JBQW1CLEVBQUNiLFVBQVUsQ0FBQyxDQUFDLDZCQUE2QixFQUFFLFlBQVk7SUFDekUsTUFBTWlCLE9BQU8sR0FBRztNQUNkLEdBQUdoQixXQUFXLENBQUNnQixPQUFPO01BQ3RCQyxTQUFTLEVBQUVsQjtJQUNiLENBQUM7SUFFRCxNQUFNbUIsT0FBTyxHQUFHLElBQUlDLGlCQUFlLENBQUNILE9BQU8sQ0FBQztJQUM1QyxNQUFNSSxNQUFNLEdBQUcsTUFBTUYsT0FBTyxDQUFDRyxNQUFNLENBQUNyQixXQUFXLENBQUM4QixXQUFXLENBQUN0QixRQUFRLENBQUM7SUFDckVGLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDLENBQUNYLFdBQVcsQ0FBQyxDQUFDO0lBQzVCLE1BQU1zQixLQUFLLEdBQUcsR0FBR1gsTUFBTSxDQUFDTSxTQUFTLElBQUksRUFBRSxJQUFJTixNQUFNLENBQUNZLFlBQVksSUFBSSxFQUFFLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDN0UzQixNQUFNLENBQUN5QixLQUFLLENBQUMsQ0FBQ0osSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUN0QnJCLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDSSxPQUFPLENBQUMsQ0FBQ1UsVUFBVSxDQUFDLENBQUM7SUFFbkMsSUFBQUMsOEJBQWtCLEVBQUNwQyxVQUFVLEVBQUVxQixNQUFNLENBQUNnQixRQUFRLElBQUksRUFBRSxDQUFDO0VBQ3ZELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGFwb2FsaW0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90ZXN0c1V0aWxzIiwiX2RlZmluaXRpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJvd25LZXlzIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiQ09NUEFOWV9JRCIsInRlc3RzQ29uZmlnIiwiZ2V0VGVzdHNDb25maWciLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsImV4dGVuZEFzeW5jVGltZW91dCIsInRlc3QiLCJleHBlY3QiLCJTQ1JBUEVSUyIsImhhcG9hbGltIiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJIYXBvYWxpbVNjcmFwZXIiLCJyZXN1bHQiLCJzY3JhcGUiLCJ1c2VyQ29kZSIsInBhc3N3b3JkIiwic3VjY2VzcyIsInRvQmVGYWxzeSIsImVycm9yVHlwZSIsInRvQmUiLCJMb2dpblJlc3VsdHMiLCJJbnZhbGlkUGFzc3dvcmQiLCJjcmVkZW50aWFscyIsImVycm9yIiwiZXJyb3JNZXNzYWdlIiwidHJpbSIsInRvQmVUcnV0aHkiLCJleHBvcnRUcmFuc2FjdGlvbnMiLCJhY2NvdW50cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9oYXBvYWxpbS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIYXBvYWxpbVNjcmFwZXIgZnJvbSAnLi9oYXBvYWxpbSc7XG5pbXBvcnQge1xuICBtYXliZVRlc3RDb21wYW55QVBJLCBleHRlbmRBc3luY1RpbWVvdXQsIGdldFRlc3RzQ29uZmlnLCBleHBvcnRUcmFuc2FjdGlvbnMsXG59IGZyb20gJy4uL3Rlc3RzL3Rlc3RzLXV0aWxzJztcbmltcG9ydCB7IFNDUkFQRVJTIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgTG9naW5SZXN1bHRzIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyJztcblxuY29uc3QgQ09NUEFOWV9JRCA9ICdoYXBvYWxpbSc7IC8vIFRPRE8gdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgaGFyZC1jb2RlZCBpbiB0aGUgcHJvdmlkZXJcbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZGVzY3JpYmUoJ0hhcG9hbGltIGxlZ2FjeSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5oYXBvYWxpbSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuaGFwb2FsaW0ubG9naW5GaWVsZHMpLnRvQ29udGFpbigndXNlckNvZGUnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMuaGFwb2FsaW0ubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCAoY29uZmlnKSA9PiBjb25maWcuY29tcGFueUFQSS5pbnZhbGlkUGFzc3dvcmQpKCdzaG91bGQgZmFpbCBvbiBpbnZhbGlkIHVzZXIvcGFzc3dvcmRcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBIYXBvYWxpbVNjcmFwZXIob3B0aW9ucyk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh7IHVzZXJDb2RlOiAnZTEwczEyJywgcGFzc3dvcmQ6ICczZjNzczNkJyB9KTtcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICBleHBlY3QocmVzdWx0LmVycm9yVHlwZSkudG9CZShMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBIYXBvYWxpbVNjcmFwZXIob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUodGVzdHNDb25maWcuY3JlZGVudGlhbHMuaGFwb2FsaW0pO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgZXJyb3IgPSBgJHtyZXN1bHQuZXJyb3JUeXBlIHx8ICcnfSAke3Jlc3VsdC5lcnJvck1lc3NhZ2UgfHwgJyd9YC50cmltKCk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlKCcnKTtcbiAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmVUcnV0aHkoKTtcblxuICAgIGV4cG9ydFRyYW5zYWN0aW9ucyhDT01QQU5ZX0lELCByZXN1bHQuYWNjb3VudHMgfHwgW10pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBR0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsdUJBQUEsR0FBQUgsT0FBQTtBQUEyRCxTQUFBRCx1QkFBQUssQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUFBLFNBQUFHLFFBQUFILENBQUEsRUFBQUksQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBUCxDQUFBLE9BQUFNLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFSLENBQUEsR0FBQUksQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVgsQ0FBQSxFQUFBSSxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBZixD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
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
index 6b65deb..f871354 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
@@ -1,4 +1,4 @@
-import { type BrowserContext, type Browser, type Page } from 'puppeteer';
+import { type Browser, type Page } from 'puppeteer';
 import { type CompanyTypes, type ScraperProgressTypes } from '../definitions';
 import { type TransactionsAccount } from '../transactions';
 import { type ErrorResult, type ScraperErrorTypes } from './errors';
@@ -38,35 +38,41 @@ export interface FutureDebit {
     chargeDate?: string;
     bankAccountNumber?: string;
 }
-interface ExternalBrowserOptions {
+export interface ScraperOptions {
     /**
-     * An externally created browser instance.
-     * you can get a browser directly from puppeteer via `puppeteer.launch()`
-     *
-     * Note: The browser will be closed by the library after the scraper finishes unless `skipCloseBrowser` is set to true
+     * The company you want to scrape
      */
-    browser: Browser;
+    companyId: CompanyTypes;
     /**
-     * If true, the browser will not be closed by the library after the scraper finishes
+     * include more debug info about in the output
      */
-    skipCloseBrowser?: boolean;
-}
-interface ExternalBrowserContextOptions {
+    verbose?: boolean;
     /**
-     * An externally managed browser context. This is useful when you want to manage the browser
+     * the date to fetch transactions from (can't be before the minimum allowed time difference for the scraper)
      */
-    browserContext: BrowserContext;
-}
-interface DefaultBrowserOptions {
+    startDate: Date;
     /**
      * shows the browser while scraping, good for debugging (default false)
      */
     showBrowser?: boolean;
+    /**
+     * scrape transactions to be processed X months in the future
+     */
+    futureMonthsToScrape?: number;
+    /**
+     * option from init puppeteer browser instance outside the libary scope. you can get
+     * browser diretly from puppeteer via `puppeteer.launch()`
+     */
+    browser?: any;
     /**
      * provide a patch to local chromium to be used by puppeteer. Relevant when using
      * `israeli-bank-scrapers-core` library
      */
     executablePath?: string;
+    /**
+     * if set to true, all installment transactions will be combine into the first one
+     */
+    combineInstallments?: boolean;
     /**
      * additional arguments to pass to the browser instance. The list of flags can be found in
      *
@@ -78,36 +84,13 @@ interface DefaultBrowserOptions {
      * Maximum navigation time in milliseconds, pass 0 to disable timeout.
      * @default 30000
      */
-    timeout?: number;
+    timeout?: number | undefined;
     /**
      * adjust the browser instance before it is being used
      *
      * @param browser
      */
     prepareBrowser?: (browser: Browser) => Promise<void>;
-}
-type ScraperBrowserOptions = ExternalBrowserOptions | ExternalBrowserContextOptions | DefaultBrowserOptions;
-export type ScraperOptions = ScraperBrowserOptions & {
-    /**
-     * The company you want to scrape
-     */
-    companyId: CompanyTypes;
-    /**
-     * include more debug info about in the output
-     */
-    verbose?: boolean;
-    /**
-     * the date to fetch transactions from (can't be before the minimum allowed time difference for the scraper)
-     */
-    startDate: Date;
-    /**
-     * scrape transactions to be processed X months in the future
-     */
-    futureMonthsToScrape?: number;
-    /**
-     * if set to true, all installment transactions will be combine into the first one
-     */
-    combineInstallments?: boolean;
     /**
      * adjust the page instance before it is being used.
      *
@@ -131,19 +114,7 @@ export type ScraperOptions = ScraperBrowserOptions & {
      * Please note: It will take more time to finish the process.
      */
     additionalTransactionInformation?: boolean;
-    /**
-     * Adjust the viewport size of the browser page.
-     * If not set, the default viewport size of 1024x768 will be used.
-     */
-    viewportSize?: {
-        width: number;
-        height: number;
-    };
-    /**
-     * The number of times to retry the navigation in case of a failure (default 0)
-     */
-    navigationRetryCount?: number;
-};
+}
 export interface OutputDataOptions {
     /**
      * if true, the result wouldn't be filtered out by date, and you will return unfiltered scrapped data.
@@ -178,4 +149,3 @@ export interface ScraperLoginResult {
     errorMessage?: string;
     persistentOtpToken?: string;
 }
-export {};
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.js b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.js
index 677d01e..747c231 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.js
@@ -3,4 +3,4 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2ludGVyZmFjZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIEJyb3dzZXJDb250ZXh0LCB0eXBlIEJyb3dzZXIsIHR5cGUgUGFnZSB9IGZyb20gJ3B1cHBldGVlcic7XG5pbXBvcnQgeyB0eXBlIENvbXBhbnlUeXBlcywgdHlwZSBTY3JhcGVyUHJvZ3Jlc3NUeXBlcyB9IGZyb20gJy4uL2RlZmluaXRpb25zJztcbmltcG9ydCB7IHR5cGUgVHJhbnNhY3Rpb25zQWNjb3VudCB9IGZyb20gJy4uL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQgeyB0eXBlIEVycm9yUmVzdWx0LCB0eXBlIFNjcmFwZXJFcnJvclR5cGVzIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG4vLyBUT0RPOiBSZW1vdmUgdGhpcyB0eXBlIHdoZW4gdGhlIHNjcmFwZXIgJ2ZhY3RvcnknIHdpbGwgcmV0dXJuIGNvbmNyZXRlIHNjcmFwZXIgdHlwZXNcbi8vIEluc3RlYWQgb2YgYSBnZW5lcmljIGludGVyZmFjZSAod2hpY2ggaW4gdHVybiB1c2VzIHRoaXMgdHlwZSlcbmV4cG9ydCB0eXBlIFNjcmFwZXJDcmVkZW50aWFscyA9XG4gIHwgeyB1c2VyQ29kZTogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nIH1cbiAgfCB7IHVzZXJuYW1lOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfVxuICB8IHsgaWQ6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9XG4gIHwgeyBpZDogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nOyBudW06IHN0cmluZyB9XG4gIHwgeyBpZDogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nOyBjYXJkNkRpZ2l0czogc3RyaW5nIH1cbiAgfCB7IHVzZXJuYW1lOiBzdHJpbmc7IG5hdGlvbmFsSUQ6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9XG4gIHwgKHsgZW1haWw6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9ICYgKFxuICAgICAgfCB7XG4gICAgICAgICAgb3RwQ29kZVJldHJpZXZlcjogKCkgPT4gUHJvbWlzZTxzdHJpbmc+O1xuICAgICAgICAgIHBob25lTnVtYmVyOiBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIHwge1xuICAgICAgICAgIG90cExvbmdUZXJtVG9rZW46IHN0cmluZztcbiAgICAgICAgfVxuICAgICkpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZ1dHVyZURlYml0IHtcbiAgYW1vdW50OiBudW1iZXI7XG4gIGFtb3VudEN1cnJlbmN5OiBzdHJpbmc7XG4gIGNoYXJnZURhdGU/OiBzdHJpbmc7XG4gIGJhbmtBY2NvdW50TnVtYmVyPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRXh0ZXJuYWxCcm93c2VyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBbiBleHRlcm5hbGx5IGNyZWF0ZWQgYnJvd3NlciBpbnN0YW5jZS5cbiAgICogeW91IGNhbiBnZXQgYSBicm93c2VyIGRpcmVjdGx5IGZyb20gcHVwcGV0ZWVyIHZpYSBgcHVwcGV0ZWVyLmxhdW5jaCgpYFxuICAgKlxuICAgKiBOb3RlOiBUaGUgYnJvd3NlciB3aWxsIGJlIGNsb3NlZCBieSB0aGUgbGlicmFyeSBhZnRlciB0aGUgc2NyYXBlciBmaW5pc2hlcyB1bmxlc3MgYHNraXBDbG9zZUJyb3dzZXJgIGlzIHNldCB0byB0cnVlXG4gICAqL1xuICBicm93c2VyOiBCcm93c2VyO1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgYnJvd3NlciB3aWxsIG5vdCBiZSBjbG9zZWQgYnkgdGhlIGxpYnJhcnkgYWZ0ZXIgdGhlIHNjcmFwZXIgZmluaXNoZXNcbiAgICovXG4gIHNraXBDbG9zZUJyb3dzZXI/OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgRXh0ZXJuYWxCcm93c2VyQ29udGV4dE9wdGlvbnMge1xuICAvKipcbiAgICogQW4gZXh0ZXJuYWxseSBtYW5hZ2VkIGJyb3dzZXIgY29udGV4dC4gVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBtYW5hZ2UgdGhlIGJyb3dzZXJcbiAgICovXG4gIGJyb3dzZXJDb250ZXh0OiBCcm93c2VyQ29udGV4dDtcbn1cblxuaW50ZXJmYWNlIERlZmF1bHRCcm93c2VyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBzaG93cyB0aGUgYnJvd3NlciB3aGlsZSBzY3JhcGluZywgZ29vZCBmb3IgZGVidWdnaW5nIChkZWZhdWx0IGZhbHNlKVxuICAgKi9cbiAgc2hvd0Jyb3dzZXI/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBwcm92aWRlIGEgcGF0Y2ggdG8gbG9jYWwgY2hyb21pdW0gdG8gYmUgdXNlZCBieSBwdXBwZXRlZXIuIFJlbGV2YW50IHdoZW4gdXNpbmdcbiAgICogYGlzcmFlbGktYmFuay1zY3JhcGVycy1jb3JlYCBsaWJyYXJ5XG4gICAqL1xuICBleGVjdXRhYmxlUGF0aD86IHN0cmluZztcblxuICAvKipcbiAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgYnJvd3NlciBpbnN0YW5jZS4gVGhlIGxpc3Qgb2YgZmxhZ3MgY2FuIGJlIGZvdW5kIGluXG4gICAqXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9Db21tYW5kX0xpbmVfT3B0aW9uc1xuICAgKiBodHRwczovL3BldGVyLnNoL2V4cGVyaW1lbnRzL2Nocm9taXVtLWNvbW1hbmQtbGluZS1zd2l0Y2hlcy9cbiAgICovXG4gIGFyZ3M/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogTWF4aW11bSBuYXZpZ2F0aW9uIHRpbWUgaW4gbWlsbGlzZWNvbmRzLCBwYXNzIDAgdG8gZGlzYWJsZSB0aW1lb3V0LlxuICAgKiBAZGVmYXVsdCAzMDAwMFxuICAgKi9cbiAgdGltZW91dD86IG51bWJlcjtcblxuICAvKipcbiAgICogYWRqdXN0IHRoZSBicm93c2VyIGluc3RhbmNlIGJlZm9yZSBpdCBpcyBiZWluZyB1c2VkXG4gICAqXG4gICAqIEBwYXJhbSBicm93c2VyXG4gICAqL1xuICBwcmVwYXJlQnJvd3Nlcj86IChicm93c2VyOiBCcm93c2VyKSA9PiBQcm9taXNlPHZvaWQ+O1xufVxuXG50eXBlIFNjcmFwZXJCcm93c2VyT3B0aW9ucyA9IEV4dGVybmFsQnJvd3Nlck9wdGlvbnMgfCBFeHRlcm5hbEJyb3dzZXJDb250ZXh0T3B0aW9ucyB8IERlZmF1bHRCcm93c2VyT3B0aW9ucztcblxuZXhwb3J0IHR5cGUgU2NyYXBlck9wdGlvbnMgPSBTY3JhcGVyQnJvd3Nlck9wdGlvbnMgJiB7XG4gIC8qKlxuICAgKiBUaGUgY29tcGFueSB5b3Ugd2FudCB0byBzY3JhcGVcbiAgICovXG4gIGNvbXBhbnlJZDogQ29tcGFueVR5cGVzO1xuXG4gIC8qKlxuICAgKiBpbmNsdWRlIG1vcmUgZGVidWcgaW5mbyBhYm91dCBpbiB0aGUgb3V0cHV0XG4gICAqL1xuICB2ZXJib3NlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogdGhlIGRhdGUgdG8gZmV0Y2ggdHJhbnNhY3Rpb25zIGZyb20gKGNhbid0IGJlIGJlZm9yZSB0aGUgbWluaW11bSBhbGxvd2VkIHRpbWUgZGlmZmVyZW5jZSBmb3IgdGhlIHNjcmFwZXIpXG4gICAqL1xuICBzdGFydERhdGU6IERhdGU7XG5cbiAgLyoqXG4gICAqIHNjcmFwZSB0cmFuc2FjdGlvbnMgdG8gYmUgcHJvY2Vzc2VkIFggbW9udGhzIGluIHRoZSBmdXR1cmVcbiAgICovXG4gIGZ1dHVyZU1vbnRoc1RvU2NyYXBlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBpZiBzZXQgdG8gdHJ1ZSwgYWxsIGluc3RhbGxtZW50IHRyYW5zYWN0aW9ucyB3aWxsIGJlIGNvbWJpbmUgaW50byB0aGUgZmlyc3Qgb25lXG4gICAqL1xuICBjb21iaW5lSW5zdGFsbG1lbnRzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogYWRqdXN0IHRoZSBwYWdlIGluc3RhbmNlIGJlZm9yZSBpdCBpcyBiZWluZyB1c2VkLlxuICAgKlxuICAgKiBAcGFyYW0gcGFnZVxuICAgKi9cbiAgcHJlcGFyZVBhZ2U/OiAocGFnZTogUGFnZSkgPT4gUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogaWYgc2V0LCBzdG9yZSBhIHNjcmVlbnNob3QgaWYgZmFpbGVkIHRvIHNjcmFwZS4gVXNlZCBmb3IgZGVidWcgcHVycG9zZXNcbiAgICovXG4gIHN0b3JlRmFpbHVyZVNjcmVlblNob3RQYXRoPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBpZiBzZXQsIHdpbGwgc2V0IHRoZSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBvZiBwdXBwZXRlZXIncyBgcGFnZS5zZXREZWZhdWx0VGltZW91dGAuXG4gICAqL1xuICBkZWZhdWx0VGltZW91dD86IG51bWJlcjtcblxuICAvKipcbiAgICogT3B0aW9ucyBmb3IgbWFuaXB1bGF0aW9uIG9mIG91dHB1dCBkYXRhXG4gICAqL1xuICBvdXRwdXREYXRhPzogT3V0cHV0RGF0YU9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYWRkaXRpb25hbCBvcGVyYXRpb24gZm9yIGVhY2ggdHJhbnNhY3Rpb24gdG8gZ2V0IG1vcmUgaW5mb3JtYXRpb24gKExpa2UgY2F0ZWdvcnkpIGFib3V0IGl0LlxuICAgKiBQbGVhc2Ugbm90ZTogSXQgd2lsbCB0YWtlIG1vcmUgdGltZSB0byBmaW5pc2ggdGhlIHByb2Nlc3MuXG4gICAqL1xuICBhZGRpdGlvbmFsVHJhbnNhY3Rpb25JbmZvcm1hdGlvbj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFkanVzdCB0aGUgdmlld3BvcnQgc2l6ZSBvZiB0aGUgYnJvd3NlciBwYWdlLlxuICAgKiBJZiBub3Qgc2V0LCB0aGUgZGVmYXVsdCB2aWV3cG9ydCBzaXplIG9mIDEwMjR4NzY4IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHZpZXdwb3J0U2l6ZT86IHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJldHJ5IHRoZSBuYXZpZ2F0aW9uIGluIGNhc2Ugb2YgYSBmYWlsdXJlIChkZWZhdWx0IDApXG4gICAqL1xuICBuYXZpZ2F0aW9uUmV0cnlDb3VudD86IG51bWJlcjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0RGF0YU9wdGlvbnMge1xuICAvKipcbiAgICogaWYgdHJ1ZSwgdGhlIHJlc3VsdCB3b3VsZG4ndCBiZSBmaWx0ZXJlZCBvdXQgYnkgZGF0ZSwgYW5kIHlvdSB3aWxsIHJldHVybiB1bmZpbHRlcmVkIHNjcmFwcGVkIGRhdGEuXG4gICAqL1xuICBlbmFibGVUcmFuc2FjdGlvbnNGaWx0ZXJCeURhdGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjcmFwZXJTY3JhcGluZ1Jlc3VsdCB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGFjY291bnRzPzogVHJhbnNhY3Rpb25zQWNjb3VudFtdO1xuICBmdXR1cmVEZWJpdHM/OiBGdXR1cmVEZWJpdFtdO1xuICBlcnJvclR5cGU/OiBTY3JhcGVyRXJyb3JUeXBlcztcbiAgZXJyb3JNZXNzYWdlPzogc3RyaW5nOyAvLyBvbmx5IG9uIHN1Y2Nlc3M9ZmFsc2Vcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY3JhcGVyPFRDcmVkZW50aWFscyBleHRlbmRzIFNjcmFwZXJDcmVkZW50aWFscz4ge1xuICBzY3JhcGUoY3JlZGVudGlhbHM6IFRDcmVkZW50aWFscyk6IFByb21pc2U8U2NyYXBlclNjcmFwaW5nUmVzdWx0PjtcbiAgb25Qcm9ncmVzcyhmdW5jOiAoY29tcGFueUlkOiBDb21wYW55VHlwZXMsIHBheWxvYWQ6IHsgdHlwZTogU2NyYXBlclByb2dyZXNzVHlwZXMgfSkgPT4gdm9pZCk6IHZvaWQ7XG4gIHRyaWdnZXJUd29GYWN0b3JBdXRoKHBob25lTnVtYmVyOiBzdHJpbmcpOiBQcm9taXNlPFNjcmFwZXJUd29GYWN0b3JBdXRoVHJpZ2dlclJlc3VsdD47XG4gIGdldExvbmdUZXJtVHdvRmFjdG9yVG9rZW4ob3RwQ29kZTogc3RyaW5nKTogUHJvbWlzZTxTY3JhcGVyR2V0TG9uZ1Rlcm1Ud29GYWN0b3JUb2tlblJlc3VsdD47XG59XG5cbmV4cG9ydCB0eXBlIFNjcmFwZXJUd29GYWN0b3JBdXRoVHJpZ2dlclJlc3VsdCA9XG4gIHwgRXJyb3JSZXN1bHRcbiAgfCB7XG4gICAgICBzdWNjZXNzOiB0cnVlO1xuICAgIH07XG5cbmV4cG9ydCB0eXBlIFNjcmFwZXJHZXRMb25nVGVybVR3b0ZhY3RvclRva2VuUmVzdWx0ID1cbiAgfCBFcnJvclJlc3VsdFxuICB8IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWU7XG4gICAgICBsb25nVGVybVR3b0ZhY3RvckF1dGhUb2tlbjogc3RyaW5nO1xuICAgIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NyYXBlckxvZ2luUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgZXJyb3JUeXBlPzogU2NyYXBlckVycm9yVHlwZXM7XG4gIGVycm9yTWVzc2FnZT86IHN0cmluZzsgLy8gb25seSBvbiBzdWNjZXNzPWZhbHNlXG4gIHBlcnNpc3RlbnRPdHBUb2tlbj86IHN0cmluZztcbn1cbiJdLCJtYXBwaW5ncyI6IiIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2ludGVyZmFjZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIEJyb3dzZXIsIHR5cGUgUGFnZSB9IGZyb20gJ3B1cHBldGVlcic7XG5pbXBvcnQgeyB0eXBlIENvbXBhbnlUeXBlcywgdHlwZSBTY3JhcGVyUHJvZ3Jlc3NUeXBlcyB9IGZyb20gJy4uL2RlZmluaXRpb25zJztcbmltcG9ydCB7IHR5cGUgVHJhbnNhY3Rpb25zQWNjb3VudCB9IGZyb20gJy4uL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQgeyB0eXBlIEVycm9yUmVzdWx0LCB0eXBlIFNjcmFwZXJFcnJvclR5cGVzIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG4vLyBUT0RPOiBSZW1vdmUgdGhpcyB0eXBlIHdoZW4gdGhlIHNjcmFwZXIgJ2ZhY3RvcnknIHdpbGwgcmV0dXJuIGNvbmNyZXRlIHNjcmFwZXIgdHlwZXNcbi8vIEluc3RlYWQgb2YgYSBnZW5lcmljIGludGVyZmFjZSAod2hpY2ggaW4gdHVybiB1c2VzIHRoaXMgdHlwZSlcbmV4cG9ydCB0eXBlIFNjcmFwZXJDcmVkZW50aWFscyA9XG4gICAgeyB1c2VyQ29kZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nIH0gfFxuICAgIHsgdXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9IHxcbiAgICB7IGlkOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcgfSB8XG4gICAgeyBpZDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCBudW06IHN0cmluZyB9IHxcbiAgICB7IGlkOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIGNhcmQ2RGlnaXRzOiBzdHJpbmcgfSB8XG4gICAgeyB1c2VybmFtZTogc3RyaW5nLCBuYXRpb25hbElEOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcgfSB8XG4gICAgKHsgZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9ICYgKHtcbiAgICAgIG90cENvZGVSZXRyaWV2ZXI6ICgpID0+IFByb21pc2U8c3RyaW5nPjtcbiAgICAgIHBob25lTnVtYmVyOiBzdHJpbmc7XG4gICAgfSB8IHtcbiAgICAgIG90cExvbmdUZXJtVG9rZW46IHN0cmluZztcbiAgICB9KSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnV0dXJlRGViaXQge1xuICBhbW91bnQ6IG51bWJlcjtcbiAgYW1vdW50Q3VycmVuY3k6IHN0cmluZztcbiAgY2hhcmdlRGF0ZT86IHN0cmluZztcbiAgYmFua0FjY291bnROdW1iZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NyYXBlck9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGNvbXBhbnkgeW91IHdhbnQgdG8gc2NyYXBlXG4gICAqL1xuICBjb21wYW55SWQ6IENvbXBhbnlUeXBlcztcblxuICAvKipcbiAgICogaW5jbHVkZSBtb3JlIGRlYnVnIGluZm8gYWJvdXQgaW4gdGhlIG91dHB1dFxuICAgKi9cbiAgdmVyYm9zZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIHRoZSBkYXRlIHRvIGZldGNoIHRyYW5zYWN0aW9ucyBmcm9tIChjYW4ndCBiZSBiZWZvcmUgdGhlIG1pbmltdW0gYWxsb3dlZCB0aW1lIGRpZmZlcmVuY2UgZm9yIHRoZSBzY3JhcGVyKVxuICAgKi9cbiAgc3RhcnREYXRlOiBEYXRlO1xuXG4gIC8qKlxuICAgKiBzaG93cyB0aGUgYnJvd3NlciB3aGlsZSBzY3JhcGluZywgZ29vZCBmb3IgZGVidWdnaW5nIChkZWZhdWx0IGZhbHNlKVxuICAgKi9cbiAgc2hvd0Jyb3dzZXI/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBzY3JhcGUgdHJhbnNhY3Rpb25zIHRvIGJlIHByb2Nlc3NlZCBYIG1vbnRocyBpbiB0aGUgZnV0dXJlXG4gICAqL1xuICBmdXR1cmVNb250aHNUb1NjcmFwZT86IG51bWJlcjtcblxuICAvKipcbiAgICogb3B0aW9uIGZyb20gaW5pdCBwdXBwZXRlZXIgYnJvd3NlciBpbnN0YW5jZSBvdXRzaWRlIHRoZSBsaWJhcnkgc2NvcGUuIHlvdSBjYW4gZ2V0XG4gICAqIGJyb3dzZXIgZGlyZXRseSBmcm9tIHB1cHBldGVlciB2aWEgYHB1cHBldGVlci5sYXVuY2goKWBcbiAgICovXG4gIGJyb3dzZXI/OiBhbnk7XG5cbiAgLyoqXG4gICAqIHByb3ZpZGUgYSBwYXRjaCB0byBsb2NhbCBjaHJvbWl1bSB0byBiZSB1c2VkIGJ5IHB1cHBldGVlci4gUmVsZXZhbnQgd2hlbiB1c2luZ1xuICAgKiBgaXNyYWVsaS1iYW5rLXNjcmFwZXJzLWNvcmVgIGxpYnJhcnlcbiAgICovXG4gIGV4ZWN1dGFibGVQYXRoPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBpZiBzZXQgdG8gdHJ1ZSwgYWxsIGluc3RhbGxtZW50IHRyYW5zYWN0aW9ucyB3aWxsIGJlIGNvbWJpbmUgaW50byB0aGUgZmlyc3Qgb25lXG4gICAqL1xuICBjb21iaW5lSW5zdGFsbG1lbnRzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgYnJvd3NlciBpbnN0YW5jZS4gVGhlIGxpc3Qgb2YgZmxhZ3MgY2FuIGJlIGZvdW5kIGluXG4gICAqXG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9Db21tYW5kX0xpbmVfT3B0aW9uc1xuICAgKiBodHRwczovL3BldGVyLnNoL2V4cGVyaW1lbnRzL2Nocm9taXVtLWNvbW1hbmQtbGluZS1zd2l0Y2hlcy9cbiAgICovXG4gIGFyZ3M/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogTWF4aW11bSBuYXZpZ2F0aW9uIHRpbWUgaW4gbWlsbGlzZWNvbmRzLCBwYXNzIDAgdG8gZGlzYWJsZSB0aW1lb3V0LlxuICAgKiBAZGVmYXVsdCAzMDAwMFxuICAgKi9cbiAgdGltZW91dD86IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogYWRqdXN0IHRoZSBicm93c2VyIGluc3RhbmNlIGJlZm9yZSBpdCBpcyBiZWluZyB1c2VkXG4gICAqXG4gICAqIEBwYXJhbSBicm93c2VyXG4gICAqL1xuICBwcmVwYXJlQnJvd3Nlcj86IChicm93c2VyOiBCcm93c2VyKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBhZGp1c3QgdGhlIHBhZ2UgaW5zdGFuY2UgYmVmb3JlIGl0IGlzIGJlaW5nIHVzZWQuXG4gICAqXG4gICAqIEBwYXJhbSBwYWdlXG4gICAqL1xuICBwcmVwYXJlUGFnZT86IChwYWdlOiBQYWdlKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBpZiBzZXQsIHN0b3JlIGEgc2NyZWVuc2hvdCBpZiBmYWlsZWQgdG8gc2NyYXBlLiBVc2VkIGZvciBkZWJ1ZyBwdXJwb3Nlc1xuICAgKi9cbiAgc3RvcmVGYWlsdXJlU2NyZWVuU2hvdFBhdGg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGlmIHNldCwgd2lsbCBzZXQgdGhlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIG9mIHB1cHBldGVlcidzIGBwYWdlLnNldERlZmF1bHRUaW1lb3V0YC5cbiAgICovXG4gIGRlZmF1bHRUaW1lb3V0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBPcHRpb25zIGZvciBtYW5pcHVsYXRpb24gb2Ygb3V0cHV0IGRhdGFcbiAgICovXG4gIG91dHB1dERhdGE/OiBPdXRwdXREYXRhT3B0aW9ucztcblxuICAvKipcbiAgICogUGVyZm9ybSBhZGRpdGlvbmFsIG9wZXJhdGlvbiBmb3IgZWFjaCB0cmFuc2FjdGlvbiB0byBnZXQgbW9yZSBpbmZvcm1hdGlvbiAoTGlrZSBjYXRlZ29yeSkgYWJvdXQgaXQuXG4gICAqIFBsZWFzZSBub3RlOiBJdCB3aWxsIHRha2UgbW9yZSB0aW1lIHRvIGZpbmlzaCB0aGUgcHJvY2Vzcy5cbiAgICovXG4gIGFkZGl0aW9uYWxUcmFuc2FjdGlvbkluZm9ybWF0aW9uPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPdXRwdXREYXRhT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBpZiB0cnVlLCB0aGUgcmVzdWx0IHdvdWxkbid0IGJlIGZpbHRlcmVkIG91dCBieSBkYXRlLCBhbmQgeW91IHdpbGwgcmV0dXJuIHVuZmlsdGVyZWQgc2NyYXBwZWQgZGF0YS5cbiAgICovXG4gIGVuYWJsZVRyYW5zYWN0aW9uc0ZpbHRlckJ5RGF0ZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NyYXBlclNjcmFwaW5nUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgYWNjb3VudHM/OiBUcmFuc2FjdGlvbnNBY2NvdW50W107XG4gIGZ1dHVyZURlYml0cz86IEZ1dHVyZURlYml0W107XG4gIGVycm9yVHlwZT86IFNjcmFwZXJFcnJvclR5cGVzO1xuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7IC8vIG9ubHkgb24gc3VjY2Vzcz1mYWxzZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjcmFwZXI8VENyZWRlbnRpYWxzIGV4dGVuZHMgU2NyYXBlckNyZWRlbnRpYWxzPiB7XG4gIHNjcmFwZShjcmVkZW50aWFsczogVENyZWRlbnRpYWxzKTogUHJvbWlzZTxTY3JhcGVyU2NyYXBpbmdSZXN1bHQ+O1xuICBvblByb2dyZXNzKGZ1bmM6IChjb21wYW55SWQ6IENvbXBhbnlUeXBlcywgcGF5bG9hZDogeyB0eXBlOiBTY3JhcGVyUHJvZ3Jlc3NUeXBlcyB9KSA9PiB2b2lkKTogdm9pZDtcbiAgdHJpZ2dlclR3b0ZhY3RvckF1dGgocGhvbmVOdW1iZXI6IHN0cmluZyk6IFByb21pc2U8U2NyYXBlclR3b0ZhY3RvckF1dGhUcmlnZ2VyUmVzdWx0PjtcbiAgZ2V0TG9uZ1Rlcm1Ud29GYWN0b3JUb2tlbihvdHBDb2RlOiBzdHJpbmcpOiBQcm9taXNlPFNjcmFwZXJHZXRMb25nVGVybVR3b0ZhY3RvclRva2VuUmVzdWx0Pjtcbn1cblxuZXhwb3J0IHR5cGUgU2NyYXBlclR3b0ZhY3RvckF1dGhUcmlnZ2VyUmVzdWx0ID0gRXJyb3JSZXN1bHQgfCB7XG4gIHN1Y2Nlc3M6IHRydWU7XG59O1xuXG5leHBvcnQgdHlwZSBTY3JhcGVyR2V0TG9uZ1Rlcm1Ud29GYWN0b3JUb2tlblJlc3VsdCA9IEVycm9yUmVzdWx0IHwge1xuICBzdWNjZXNzOiB0cnVlO1xuICBsb25nVGVybVR3b0ZhY3RvckF1dGhUb2tlbjogc3RyaW5nO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBTY3JhcGVyTG9naW5SZXN1bHQge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBlcnJvclR5cGU/OiBTY3JhcGVyRXJyb3JUeXBlcztcbiAgZXJyb3JNZXNzYWdlPzogc3RyaW5nOyAvLyBvbmx5IG9uIHN1Y2Nlc3M9ZmFsc2VcbiAgcGVyc2lzdGVudE90cFRva2VuPzogc3RyaW5nO1xufVxuIl0sIm1hcHBpbmdzIjoiIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/isracard.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/isracard.test.js
index a797b9b..97da79b 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/isracard.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/isracard.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _isracard = _interopRequireDefault(require("./isracard"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'isracard'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Isracard legacy scraper', () => {
@@ -18,10 +25,9 @@ describe('Isracard legacy scraper', () => {
     expect(_definitions.SCRAPERS.isracard.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _isracard.default(options);
     const result = await scraper.scrape({
       id: 'e10s12',
@@ -33,10 +39,9 @@ describe('Isracard legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _isracard.default(options);
     const result = await scraper.scrape(testsConfig.credentials.isracard);
     expect(result).toBeDefined();
@@ -46,4 +51,4 @@ describe('Isracard legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaXNyYWNhcmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90ZXN0c1V0aWxzIiwiX2RlZmluaXRpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJDT01QQU5ZX0lEIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwidGVzdCIsImV4cGVjdCIsIlNDUkFQRVJTIiwiaXNyYWNhcmQiLCJ0b0JlRGVmaW5lZCIsImxvZ2luRmllbGRzIiwidG9Db250YWluIiwibWF5YmVUZXN0Q29tcGFueUFQSSIsImNvbmZpZyIsImNvbXBhbnlBUEkiLCJpbnZhbGlkUGFzc3dvcmQiLCJvcHRpb25zIiwiY29tcGFueUlkIiwic2NyYXBlciIsIklzcmFjYXJkU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsImlkIiwicGFzc3dvcmQiLCJjYXJkNkRpZ2l0cyIsInN1Y2Nlc3MiLCJ0b0JlRmFsc3kiLCJlcnJvclR5cGUiLCJ0b0JlIiwiTG9naW5SZXN1bHRzIiwiSW52YWxpZFBhc3N3b3JkIiwiY3JlZGVudGlhbHMiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsInRyaW0iLCJ0b0JlVHJ1dGh5IiwiZXhwb3J0VHJhbnNhY3Rpb25zIiwiYWNjb3VudHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyYXBlcnMvaXNyYWNhcmQudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSXNyYWNhcmRTY3JhcGVyIGZyb20gJy4vaXNyYWNhcmQnO1xuaW1wb3J0IHsgbWF5YmVUZXN0Q29tcGFueUFQSSwgZXh0ZW5kQXN5bmNUaW1lb3V0LCBnZXRUZXN0c0NvbmZpZywgZXhwb3J0VHJhbnNhY3Rpb25zIH0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuXG5jb25zdCBDT01QQU5ZX0lEID0gJ2lzcmFjYXJkJzsgLy8gVE9ETyB0aGlzIHByb3BlcnR5IHNob3VsZCBiZSBoYXJkLWNvZGVkIGluIHRoZSBwcm92aWRlclxuY29uc3QgdGVzdHNDb25maWcgPSBnZXRUZXN0c0NvbmZpZygpO1xuXG5kZXNjcmliZSgnSXNyYWNhcmQgbGVnYWN5IHNjcmFwZXInLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgZXh0ZW5kQXN5bmNUaW1lb3V0KCk7IC8vIFRoZSBkZWZhdWx0IHRpbWVvdXQgaXMgNSBzZWNvbmRzIHBlciBhc3luYyB0ZXN0LCB0aGlzIGZ1bmN0aW9uIGV4dGVuZHMgdGhlIHRpbWVvdXQgdmFsdWVcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGV4cG9zZSBsb2dpbiBmaWVsZHMgaW4gc2NyYXBlcnMgY29uc3RhbnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFNDUkFQRVJTLmlzcmFjYXJkKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5pc3JhY2FyZC5sb2dpbkZpZWxkcykudG9Db250YWluKCdpZCcpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5pc3JhY2FyZC5sb2dpbkZpZWxkcykudG9Db250YWluKCdjYXJkNkRpZ2l0cycpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5pc3JhY2FyZC5sb2dpbkZpZWxkcykudG9Db250YWluKCdwYXNzd29yZCcpO1xuICB9KTtcblxuICBtYXliZVRlc3RDb21wYW55QVBJKENPTVBBTllfSUQsIGNvbmZpZyA9PiBjb25maWcuY29tcGFueUFQSS5pbnZhbGlkUGFzc3dvcmQpKFxuICAgICdzaG91bGQgZmFpbCBvbiBpbnZhbGlkIHVzZXIvcGFzc3dvcmRcIicsXG4gICAgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgICAgY29tcGFueUlkOiBDT01QQU5ZX0lELFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc2NyYXBlciA9IG5ldyBJc3JhY2FyZFNjcmFwZXIob3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHsgaWQ6ICdlMTBzMTInLCBwYXNzd29yZDogJzNmM3NzM2QnLCBjYXJkNkRpZ2l0czogJzEyMzQ1NicgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmVGYWxzeSgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvclR5cGUpLnRvQmUoTG9naW5SZXN1bHRzLkludmFsaWRQYXNzd29yZCk7XG4gICAgfSxcbiAgKTtcblxuICBtYXliZVRlc3RDb21wYW55QVBJKENPTVBBTllfSUQpKCdzaG91bGQgc2NyYXBlIHRyYW5zYWN0aW9uc1wiJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgY29tcGFueUlkOiBDT01QQU5ZX0lELFxuICAgIH07XG5cbiAgICBjb25zdCBzY3JhcGVyID0gbmV3IElzcmFjYXJkU2NyYXBlcihvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh0ZXN0c0NvbmZpZy5jcmVkZW50aWFscy5pc3JhY2FyZCk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBjb25zdCBlcnJvciA9IGAke3Jlc3VsdC5lcnJvclR5cGUgfHwgJyd9ICR7cmVzdWx0LmVycm9yTWVzc2FnZSB8fCAnJ31gLnRyaW0oKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmUoJycpO1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwb3J0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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.js b/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.js
index 354b61e..3cd6980 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.js
@@ -4,6 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _constants = require("../constants");
 var _debug = require("../helpers/debug");
@@ -28,9 +32,10 @@ function getPossibleLoginResults() {
         throw new Error('missing page options argument');
       }
       const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, 'svg#Capa_1', '', element => {
-        return element[0]?.parentElement?.children[1]?.innerText;
+        var _element$;
+        return (_element$ = element[0]) === null || _element$ === void 0 || (_element$ = _element$.parentElement) === null || _element$ === void 0 || (_element$ = _element$.children[1]) === null || _element$ === void 0 ? void 0 : _element$.innerText;
       });
-      return errorMessage?.startsWith(INVALID_PASSWORD_MSG);
+      return errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(INVALID_PASSWORD_MSG);
     }],
     [_baseScraperWithBrowser.LoginResults.AccountBlocked]: [
     // NOTICE - might not be relevant starting the Leumi re-design during 2022 Sep
@@ -39,9 +44,10 @@ function getPossibleLoginResults() {
         throw new Error('missing page options argument');
       }
       const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, '.errHeader', '', label => {
-        return label[0]?.innerText;
+        var _label$;
+        return (_label$ = label[0]) === null || _label$ === void 0 ? void 0 : _label$.innerText;
       });
-      return errorMessage?.startsWith(ACCOUNT_BLOCKED_MSG);
+      return errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(ACCOUNT_BLOCKED_MSG);
     }],
     [_baseScraperWithBrowser.LoginResults.ChangePassword]: ['https://hb2.bankleumi.co.il/authenticate'] // NOTICE - might not be relevant starting the Leumi re-design during 2022 Sep
   };
@@ -144,8 +150,8 @@ async function fetchTransactions(page, startDate) {
   for (const accountId of accountsIds) {
     if (accountsIds.length > 1) {
       // get list of accounts and check accountId
-      await clickByXPath(page, 'xpath///*[contains(@class, "number") and contains(@class, "combo-inner")]');
-      await clickByXPath(page, `xpath///span[contains(text(), '${accountId}')]`);
+      await clickByXPath(page, 'xpath//*[contains(@class, "number") and contains(@class, "combo-inner")]');
+      await clickByXPath(page, `xpath//span[contains(text(), '${accountId}')]`);
     }
     accounts.push(await fetchTransactionsForAccount(page, startDate, removeSpecialCharacters(accountId)));
   }
@@ -197,4 +203,4 @@ class LeumiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = LeumiScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.test.js
index 7bd921c..fb28edc 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/leumi.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _leumi = _interopRequireDefault(require("./leumi"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'leumi'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Leumi legacy scraper', () => {
@@ -17,10 +24,9 @@ describe('Leumi legacy scraper', () => {
     expect(_definitions.SCRAPERS.leumi.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _leumi.default(options);
     const result = await scraper.scrape({
       username: 'e10s12',
@@ -31,10 +37,9 @@ describe('Leumi legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _leumi.default(options);
     const result = await scraper.scrape(testsConfig.credentials.leumi);
     expect(result).toBeDefined();
@@ -44,4 +49,4 @@ describe('Leumi legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbGV1bWkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90ZXN0c1V0aWxzIiwiX2RlZmluaXRpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJDT01QQU5ZX0lEIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwidGVzdCIsImV4cGVjdCIsIlNDUkFQRVJTIiwibGV1bWkiLCJ0b0JlRGVmaW5lZCIsImxvZ2luRmllbGRzIiwidG9Db250YWluIiwibWF5YmVUZXN0Q29tcGFueUFQSSIsImNvbmZpZyIsImNvbXBhbnlBUEkiLCJpbnZhbGlkUGFzc3dvcmQiLCJvcHRpb25zIiwiY29tcGFueUlkIiwic2NyYXBlciIsIkxldW1pU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ0cmltIiwidG9CZVRydXRoeSIsImV4cG9ydFRyYW5zYWN0aW9ucyIsImFjY291bnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2xldW1pLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExldW1pU2NyYXBlciBmcm9tICcuL2xldW1pJztcbmltcG9ydCB7IG1heWJlVGVzdENvbXBhbnlBUEksIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIGV4cG9ydFRyYW5zYWN0aW9ucyB9IGZyb20gJy4uL3Rlc3RzL3Rlc3RzLXV0aWxzJztcbmltcG9ydCB7IFNDUkFQRVJTIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgTG9naW5SZXN1bHRzIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyJztcblxuY29uc3QgQ09NUEFOWV9JRCA9ICdsZXVtaSc7IC8vIFRPRE8gdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgaGFyZC1jb2RlZCBpbiB0aGUgcHJvdmlkZXJcbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZGVzY3JpYmUoJ0xldW1pIGxlZ2FjeSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5sZXVtaSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU0NSQVBFUlMubGV1bWkubG9naW5GaWVsZHMpLnRvQ29udGFpbigndXNlcm5hbWUnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMubGV1bWkubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCBjb25maWcgPT4gY29uZmlnLmNvbXBhbnlBUEkuaW52YWxpZFBhc3N3b3JkKShcbiAgICAnc2hvdWxkIGZhaWwgb24gaW52YWxpZCB1c2VyL3Bhc3N3b3JkXCInLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgTGV1bWlTY3JhcGVyKG9wdGlvbnMpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh7IHVzZXJuYW1lOiAnZTEwczEyJywgcGFzc3dvcmQ6ICczZjNzczNkJyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZUZhbHN5KCk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yVHlwZSkudG9CZShMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkKTtcbiAgICB9LFxuICApO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCkoJ3Nob3VsZCBzY3JhcGUgdHJhbnNhY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgY29tcGFueUlkOiBDT01QQU5ZX0lELFxuICAgIH07XG5cbiAgICBjb25zdCBzY3JhcGVyID0gbmV3IExldW1pU2NyYXBlcihvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh0ZXN0c0NvbmZpZy5jcmVkZW50aWFscy5sZXVtaSk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBjb25zdCBlcnJvciA9IGAke3Jlc3VsdC5lcnJvclR5cGUgfHwgJyd9ICR7cmVzdWx0LmVycm9yTWVzc2FnZSB8fCAnJ31gLnRyaW0oKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmUoJycpO1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwb3J0VHJhbnNhY3Rpb25zKENPTVBBTllfSUQsIHJlc3VsdC5hY2NvdW50cyB8fCBbXSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FB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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/massad.js b/node_modules/israeli-bank-scrapers/lib/scrapers/massad.js
index 48ce8fe..1ec8047 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/massad.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/massad.js
@@ -4,12 +4,19 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
 var _baseBeinleumiGroup = _interopRequireDefault(require("./base-beinleumi-group"));
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 class MassadScraper extends _baseBeinleumiGroup.default {
-  BASE_URL = 'https://online.bankmassad.co.il';
-  LOGIN_URL = `${this.BASE_URL}/MatafLoginService/MatafLoginServlet?bankId=MASADPRTAL&site=Private&KODSAFA=HE`;
-  TRANSACTIONS_URL = `${this.BASE_URL}/wps/myportal/FibiMenu/Online/OnAccountMngment/OnBalanceTrans/PrivateAccountFlow`;
+  constructor(...args) {
+    super(...args);
+    _defineProperty(this, "BASE_URL", 'https://online.bankmassad.co.il');
+    _defineProperty(this, "LOGIN_URL", `${this.BASE_URL}/MatafLoginService/MatafLoginServlet?bankId=MASADPRTAL&site=Private&KODSAFA=HE`);
+    _defineProperty(this, "TRANSACTIONS_URL", `${this.BASE_URL}/wps/myportal/FibiMenu/Online/OnAccountMngment/OnBalanceTrans/PrivateAccountFlow`);
+  }
 }
 var _default = exports.default = MassadScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZUJlaW5sZXVtaUdyb3VwIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJNYXNzYWRTY3JhcGVyIiwiQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciIsIkJBU0VfVVJMIiwiTE9HSU5fVVJMIiwiVFJBTlNBQ1RJT05TX1VSTCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9tYXNzYWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJlaW5sZXVtaUdyb3VwQmFzZVNjcmFwZXIgZnJvbSAnLi9iYXNlLWJlaW5sZXVtaS1ncm91cCc7XG5cbmNsYXNzIE1hc3NhZFNjcmFwZXIgZXh0ZW5kcyBCZWlubGV1bWlHcm91cEJhc2VTY3JhcGVyIHtcbiAgQkFTRV9VUkwgPSAnaHR0cHM6Ly9vbmxpbmUuYmFua21hc3NhZC5jby5pbCc7XG5cbiAgTE9HSU5fVVJMID0gYCR7dGhpcy5CQVNFX1VSTH0vTWF0YWZMb2dpblNlcnZpY2UvTWF0YWZMb2dpblNlcnZsZXQ/YmFua0lkPU1BU0FEUFJUQUwmc2l0ZT1Qcml2YXRlJktPRFNBRkE9SEVgO1xuXG4gIFRSQU5TQUNUSU9OU19VUkwgPSBgJHt0aGlzLkJBU0VfVVJMfS93cHMvbXlwb3J0YWwvRmliaU1lbnUvT25saW5lL09uQWNjb3VudE1uZ21lbnQvT25CYWxhbmNlVHJhbnMvUHJpdmF0ZUFjY291bnRGbG93YDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFzc2FkU2NyYXBlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUErRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUUvRCxNQUFNRyxhQUFhLFNBQVNDLDJCQUF5QixDQUFDO0VBQ3BEQyxRQUFRLEdBQUcsaUNBQWlDO0VBRTVDQyxTQUFTLEdBQUcsR0FBRyxJQUFJLENBQUNELFFBQVEsZ0ZBQWdGO0VBRTVHRSxnQkFBZ0IsR0FBRyxHQUFHLElBQUksQ0FBQ0YsUUFBUSxrRkFBa0Y7QUFDdkg7QUFBQyxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsQ0FBQVAsT0FBQSxHQUVjQyxhQUFhIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZUJlaW5sZXVtaUdyb3VwIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJyIiwidCIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJNYXNzYWRTY3JhcGVyIiwiQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciIsImNvbnN0cnVjdG9yIiwiYXJncyIsIkJBU0VfVVJMIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL21hc3NhZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciBmcm9tICcuL2Jhc2UtYmVpbmxldW1pLWdyb3VwJztcblxuY2xhc3MgTWFzc2FkU2NyYXBlciBleHRlbmRzIEJlaW5sZXVtaUdyb3VwQmFzZVNjcmFwZXIge1xuICBCQVNFX1VSTCA9ICdodHRwczovL29ubGluZS5iYW5rbWFzc2FkLmNvLmlsJztcblxuICBMT0dJTl9VUkwgPSBgJHt0aGlzLkJBU0VfVVJMfS9NYXRhZkxvZ2luU2VydmljZS9NYXRhZkxvZ2luU2VydmxldD9iYW5rSWQ9TUFTQURQUlRBTCZzaXRlPVByaXZhdGUmS09EU0FGQT1IRWA7XG5cbiAgVFJBTlNBQ1RJT05TX1VSTCA9IGAke3RoaXMuQkFTRV9VUkx9L3dwcy9teXBvcnRhbC9GaWJpTWVudS9PbmxpbmUvT25BY2NvdW50TW5nbWVudC9PbkJhbGFuY2VUcmFucy9Qcml2YXRlQWNjb3VudEZsb3dgO1xufVxuXG5leHBvcnQgZGVmYXVsdCBNYXNzYWRTY3JhcGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUErRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUFBLFNBQUFHLGdCQUFBSCxDQUFBLEVBQUFJLENBQUEsRUFBQUMsQ0FBQSxZQUFBRCxDQUFBLEdBQUFFLGNBQUEsQ0FBQUYsQ0FBQSxNQUFBSixDQUFBLEdBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixDQUFBLEVBQUFJLENBQUEsSUFBQUssS0FBQSxFQUFBSixDQUFBLEVBQUFLLFVBQUEsTUFBQUMsWUFBQSxNQUFBQyxRQUFBLFVBQUFaLENBQUEsQ0FBQUksQ0FBQSxJQUFBQyxDQUFBLEVBQUFMLENBQUE7QUFBQSxTQUFBTSxlQUFBRCxDQUFBLFFBQUFRLENBQUEsR0FBQUMsWUFBQSxDQUFBVCxDQUFBLHVDQUFBUSxDQUFBLEdBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFULENBQUEsRUFBQUQsQ0FBQSwyQkFBQUMsQ0FBQSxLQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUwsQ0FBQSxHQUFBSyxDQUFBLENBQUFVLE1BQUEsQ0FBQUMsV0FBQSxrQkFBQWhCLENBQUEsUUFBQWEsQ0FBQSxHQUFBYixDQUFBLENBQUFpQixJQUFBLENBQUFaLENBQUEsRUFBQUQsQ0FBQSx1Q0FBQVMsQ0FBQSxTQUFBQSxDQUFBLFlBQUFLLFNBQUEseUVBQUFkLENBQUEsR0FBQWUsTUFBQSxHQUFBQyxNQUFBLEVBQUFmLENBQUE7QUFFL0QsTUFBTWdCLGFBQWEsU0FBU0MsMkJBQXlCLENBQUM7RUFBQUMsWUFBQSxHQUFBQyxJQUFBO0lBQUEsU0FBQUEsSUFBQTtJQUFBckIsZUFBQSxtQkFDekMsaUNBQWlDO0lBQUFBLGVBQUEsb0JBRWhDLEdBQUcsSUFBSSxDQUFDc0IsUUFBUSxnRkFBZ0Y7SUFBQXRCLGVBQUEsMkJBRXpGLEdBQUcsSUFBSSxDQUFDc0IsUUFBUSxrRkFBa0Y7RUFBQTtBQUN2SDtBQUFDLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBekIsT0FBQSxHQUVjbUIsYUFBYSIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/max.js b/node_modules/israeli-bank-scrapers/lib/scrapers/max.js
index 22e0c13..fe736d1 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/max.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/max.js
@@ -5,6 +5,11 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.default = void 0;
 exports.getMemo = getMemo;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
+require("core-js/modules/es.string.trim.js");
 var _buildUrl = _interopRequireDefault(require("build-url"));
 var _moment = _interopRequireDefault(require("moment"));
 var _constants = require("../constants");
@@ -17,6 +22,11 @@ var _transactions = require("../helpers/transactions");
 var _transactions2 = require("../transactions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const debug = (0, _debug.getDebug)('max');
 const BASE_API_ACTIONS_URL = 'https://onlinelcapi.max.co.il';
 const BASE_WELCOME_URL = 'https://www.max.co.il';
@@ -60,11 +70,11 @@ function getTransactionsUrl(monthMoment) {
   const date = `${year}-${month}-01`;
 
   /**
-   * url explanation:
-   * userIndex: -1 for all account owners
-   * cardIndex: -1 for all cards under the account
-   * all other query params are static, beside the date which changes for request per month
-   */
+     * url explanation:
+     * userIndex: -1 for all account owners
+     * cardIndex: -1 for all cards under the account
+     * all other query params are static, beside the date which changes for request per month
+     */
   return (0, _buildUrl.default)(BASE_API_ACTIONS_URL, {
     path: `/api/registered/transactionDetails/getTransactionsAndGraphs?filterData={"userIndex":-1,"cardIndex":-1,"monthView":true,"date":"${date}","dates":{"startDate":"0","endDate":"0"},"bankAccount":{"bankAccountIndex":-1,"cards":null}}&firstCallCardIndex=-1`
   });
@@ -73,8 +83,9 @@ async function loadCategories(page) {
   debug('Loading categories');
   const res = await (0, _fetch.fetchGetWithinPage)(page, `${BASE_API_ACTIONS_URL}/api/contents/getCategories`);
   if (res && Array.isArray(res.result)) {
+    var _res$result;
     debug(`${res.result.length} categories loaded`);
-    res.result?.forEach(({
+    (_res$result = res.result) === null || _res$result === void 0 || _res$result.forEach(({
       id,
       name
     }) => categories.set(id, name));
@@ -156,11 +167,12 @@ function getMemo({
   return comments;
 }
 function mapTransaction(rawTransaction) {
+  var _rawTransaction$dealD, _rawTransaction$dealD2;
   const isPending = rawTransaction.paymentDate === null;
   const processedDate = (0, _moment.default)(isPending ? rawTransaction.purchaseDate : rawTransaction.paymentDate).toISOString();
   const status = isPending ? _transactions2.TransactionStatuses.Pending : _transactions2.TransactionStatuses.Completed;
   const installments = getInstallmentsInfo(rawTransaction.comments);
-  const identifier = installments ? `${rawTransaction.dealData?.arn}_${installments.number}` : rawTransaction.dealData?.arn;
+  const identifier = installments ? `${(_rawTransaction$dealD = rawTransaction.dealData) === null || _rawTransaction$dealD === void 0 ? void 0 : _rawTransaction$dealD.arn}_${installments.number}` : (_rawTransaction$dealD2 = rawTransaction.dealData) === null || _rawTransaction$dealD2 === void 0 ? void 0 : _rawTransaction$dealD2.arn;
   return {
     type: getTransactionType(rawTransaction.planName, rawTransaction.planTypeId),
     date: (0, _moment.default)(rawTransaction.purchaseDate).toISOString(),
@@ -171,7 +183,7 @@ function mapTransaction(rawTransaction) {
     chargedCurrency: getChargedCurrency(rawTransaction.paymentCurrency),
     description: rawTransaction.merchantName.trim(),
     memo: getMemo(rawTransaction),
-    category: categories.get(rawTransaction?.categoryId),
+    category: categories.get(rawTransaction === null || rawTransaction === void 0 ? void 0 : rawTransaction.categoryId),
     installments,
     identifier,
     status
@@ -194,9 +206,7 @@ async function fetchTransactionsForMonth(page, monthMoment) {
   return transactionsByAccount;
 }
 function addResult(allResults, result) {
-  const clonedResults = {
-    ...allResults
-  };
+  const clonedResults = _objectSpread({}, allResults);
   Object.keys(result).forEach(accountNumber => {
     if (!clonedResults[accountNumber]) {
       clonedResults[accountNumber] = [];
@@ -215,11 +225,11 @@ function prepareTransactions(txns, startMoment, combineInstallments, enableTrans
   return clonedTxns;
 }
 async function fetchTransactions(page, options) {
-  const futureMonthsToScrape = options.futureMonthsToScrape ?? 1;
+  var _options$futureMonths;
+  const futureMonthsToScrape = (_options$futureMonths = options.futureMonthsToScrape) !== null && _options$futureMonths !== void 0 ? _options$futureMonths : 1;
   const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
-  const startMomentLimit = (0, _moment.default)().subtract(4, 'years');
   const startDate = options.startDate || defaultStartMoment.toDate();
-  const startMoment = _moment.default.max(startMomentLimit, (0, _moment.default)(startDate));
+  const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
   const allMonths = (0, _dates.default)(startMoment, futureMonthsToScrape);
   await loadCategories(page);
   let allResults = {};
@@ -228,8 +238,9 @@ async function fetchTransactions(page, options) {
     allResults = addResult(allResults, result);
   }
   Object.keys(allResults).forEach(accountNumber => {
+    var _options$outputData$e, _options$outputData;
     let txns = allResults[accountNumber];
-    txns = prepareTransactions(txns, startMoment, options.combineInstallments || false, options.outputData?.enableTransactionsFilterByDate ?? true);
+    txns = prepareTransactions(txns, startMoment, options.combineInstallments || false, (_options$outputData$e = (_options$outputData = options.outputData) === null || _options$outputData === void 0 ? void 0 : _options$outputData.enableTransactionsFilterByDate) !== null && _options$outputData$e !== void 0 ? _options$outputData$e : true);
     allResults[accountNumber] = txns;
   });
   return allResults;
@@ -260,15 +271,12 @@ class MaxScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     return {
       loginUrl: LOGIN_URL,
       fields: createLoginFields(credentials),
-      submitButtonSelector: 'app-user-login-form .general-button.send-me-code',
+      submitButtonSelector: '#login-password #send-code',
       preAction: async () => {
         if (await (0, _elementsInteractions.elementPresentOnPage)(this.page, '#closePopup')) {
           await (0, _elementsInteractions.clickButton)(this.page, '#closePopup');
         }
         await (0, _elementsInteractions.clickButton)(this.page, '.personal-area > a.go-to-personal-area');
-        if (await (0, _elementsInteractions.elementPresentOnPage)(this.page, '.login-link#private')) {
-          await (0, _elementsInteractions.clickButton)(this.page, '.login-link#private');
-        }
         await (0, _elementsInteractions.waitUntilElementFound)(this.page, '#login-password-link', true);
         await (0, _elementsInteractions.clickButton)(this.page, '#login-password-link');
         await (0, _elementsInteractions.waitUntilElementFound)(this.page, '#login-password.tab-pane.active app-user-login-form', true);
@@ -296,4 +304,4 @@ class MaxScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = MaxScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js
index 4e3d5aa..030386b 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/max.test.js
@@ -1,11 +1,19 @@
 "use strict";
 
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _max = _interopRequireWildcard(require("./max"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
 function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'max'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Max scraper', () => {
@@ -18,10 +26,9 @@ describe('Max scraper', () => {
     expect(_definitions.SCRAPERS.max.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _max.default(options);
     const result = await scraper.scrape({
       username: 'e10s12',
@@ -32,10 +39,9 @@ describe('Max scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _max.default(options);
     const result = await scraper.scrape(testsConfig.credentials.max);
     expect(result).toBeDefined();
@@ -62,4 +68,4 @@ describe('getMemo', () => {
     expect(memo).toBe(expected);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWF4IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3Rlc3RzVXRpbHMiLCJfZGVmaW5pdGlvbnMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3RvUHJvcGVydHlLZXkiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX3RvUHJpbWl0aXZlIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJDT01QQU5ZX0lEIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwidGVzdCIsImV4cGVjdCIsIlNDUkFQRVJTIiwibWF4IiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJNYXhTY3JhcGVyIiwicmVzdWx0Iiwic2NyYXBlIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInN1Y2Nlc3MiLCJ0b0JlRmFsc3kiLCJlcnJvclR5cGUiLCJ0b0JlIiwiTG9naW5SZXN1bHRzIiwiSW52YWxpZFBhc3N3b3JkIiwiY3JlZGVudGlhbHMiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsInRyaW0iLCJ0b0JlVHJ1dGh5IiwiZXhwb3J0VHJhbnNhY3Rpb25zIiwiYWNjb3VudHMiLCJlYWNoIiwiY29tbWVudHMiLCJmdW5kc1RyYW5zZmVyUmVjZWl2ZXJPclRyYW5zZmVyIiwiZnVuZHNUcmFuc2ZlckNvbW1lbnQiLCJ0cmFuc2FjdGlvbiIsImV4cGVjdGVkIiwibWVtbyIsImdldE1lbW8iXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyYXBlcnMvbWF4LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1heFNjcmFwZXIsIHsgZ2V0TWVtbyB9IGZyb20gJy4vbWF4JztcbmltcG9ydCB7XG4gIG1heWJlVGVzdENvbXBhbnlBUEksIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIGV4cG9ydFRyYW5zYWN0aW9ucyxcbn0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuXG5jb25zdCBDT01QQU5ZX0lEID0gJ21heCc7IC8vIFRPRE8gdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgaGFyZC1jb2RlZCBpbiB0aGUgcHJvdmlkZXJcbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZGVzY3JpYmUoJ01heCBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5tYXgpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLm1heC5sb2dpbkZpZWxkcykudG9Db250YWluKCd1c2VybmFtZScpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5tYXgubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCAoY29uZmlnKSA9PiBjb25maWcuY29tcGFueUFQSS5pbnZhbGlkUGFzc3dvcmQpKCdzaG91bGQgZmFpbCBvbiBpbnZhbGlkIHVzZXIvcGFzc3dvcmRcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBNYXhTY3JhcGVyKG9wdGlvbnMpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUoeyB1c2VybmFtZTogJ2UxMHMxMicsIHBhc3N3b3JkOiAnM2Yzc3MzZCcgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZUZhbHN5KCk7XG4gICAgZXhwZWN0KHJlc3VsdC5lcnJvclR5cGUpLnRvQmUoTG9naW5SZXN1bHRzLkludmFsaWRQYXNzd29yZCk7XG4gIH0pO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCkoJ3Nob3VsZCBzY3JhcGUgdHJhbnNhY3Rpb25zXCInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgfTtcblxuICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgTWF4U2NyYXBlcihvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh0ZXN0c0NvbmZpZy5jcmVkZW50aWFscy5tYXgpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgZXJyb3IgPSBgJHtyZXN1bHQuZXJyb3JUeXBlIHx8ICcnfSAke3Jlc3VsdC5lcnJvck1lc3NhZ2UgfHwgJyd9YC50cmltKCk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlKCcnKTtcbiAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmVUcnV0aHkoKTtcblxuICAgIGV4cG9ydFRyYW5zYWN0aW9ucyhDT01QQU5ZX0lELCByZXN1bHQuYWNjb3VudHMgfHwgW10pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZ2V0TWVtbycsICgpID0+IHtcbiAgdHlwZSBUcmFuc2FjdGlvbkZvck1lbW9UZXN0ID0gUGFyYW1ldGVyczx0eXBlb2YgZ2V0TWVtbz5bMF07XG4gIHRlc3QuZWFjaDxbVHJhbnNhY3Rpb25Gb3JNZW1vVGVzdCwgc3RyaW5nXT4oW1xuICAgIFt7IGNvbW1lbnRzOiAnJyB9LCAnJ10sXG4gICAgW3sgY29tbWVudHM6ICdjb21tZW50IHdpdGhvdXQgZnVuZHMnIH0sICdjb21tZW50IHdpdGhvdXQgZnVuZHMnXSxcbiAgICBbeyBjb21tZW50czogJycsIGZ1bmRzVHJhbnNmZXJSZWNlaXZlck9yVHJhbnNmZXI6ICdEYW5pZWwgSCcgfSwgJ0RhbmllbCBIJ10sXG4gICAgW3sgY29tbWVudHM6ICcnLCBmdW5kc1RyYW5zZmVyUmVjZWl2ZXJPclRyYW5zZmVyOiAnRGFuaWVsJywgZnVuZHNUcmFuc2ZlckNvbW1lbnQ6ICdGb28gYmFyJyB9LCAnRGFuaWVsOiBGb28gYmFyJ10sXG4gIF0pKCclbyBzaG91bGQgY3JlYXRlIG1lbW86ICVzJywgKHRyYW5zYWN0aW9uLCBleHBlY3RlZCkgPT4ge1xuICAgIGNvbnN0IG1lbW8gPSBnZXRNZW1vKHRyYW5zYWN0aW9uKTtcbiAgICBleHBlY3QobWVtbykudG9CZShleHBlY3RlZCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsSUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBR0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsdUJBQUEsR0FBQUgsT0FBQTtBQUEyRCxTQUFBSSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSxDQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBTix3QkFBQU0sQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFB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
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.js b/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.js
index 20b1dcb..813e325 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.js
@@ -6,13 +6,17 @@ Object.defineProperty(exports, "__esModule", {
 exports.default = void 0;
 var _discount = _interopRequireDefault(require("./discount"));
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 class MercantileScraper extends _discount.default {
   getLoginOptions(credentials) {
-    return {
-      ...super.getLoginOptions(credentials),
+    return _objectSpread(_objectSpread({}, super.getLoginOptions(credentials)), {}, {
       loginUrl: 'https://start.telebank.co.il/login/?bank=m'
-    };
+    });
   }
 }
 var _default = exports.default = MercantileScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGlzY291bnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk1lcmNhbnRpbGVTY3JhcGVyIiwiRGlzY291bnRTY3JhcGVyIiwiZ2V0TG9naW5PcHRpb25zIiwiY3JlZGVudGlhbHMiLCJsb2dpblVybCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9tZXJjYW50aWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaXNjb3VudFNjcmFwZXIgZnJvbSAnLi9kaXNjb3VudCc7XG5cbnR5cGUgU2NyYXBlclNwZWNpZmljQ3JlZGVudGlhbHMgPSB7IGlkOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmc7IG51bTogc3RyaW5nIH07XG5jbGFzcyBNZXJjYW50aWxlU2NyYXBlciBleHRlbmRzIERpc2NvdW50U2NyYXBlciB7XG4gIGdldExvZ2luT3B0aW9ucyhjcmVkZW50aWFsczogU2NyYXBlclNwZWNpZmljQ3JlZGVudGlhbHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3VwZXIuZ2V0TG9naW5PcHRpb25zKGNyZWRlbnRpYWxzKSxcbiAgICAgIGxvZ2luVXJsOiAnaHR0cHM6Ly9zdGFydC50ZWxlYmFuay5jby5pbC9sb2dpbi8/YmFuaz1tJyxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lcmNhbnRpbGVTY3JhcGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBeUMsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFHekMsTUFBTUcsaUJBQWlCLFNBQVNDLGlCQUFlLENBQUM7RUFDOUNDLGVBQWVBLENBQUNDLFdBQXVDLEVBQUU7SUFDdkQsT0FBTztNQUNMLEdBQUcsS0FBSyxDQUFDRCxlQUFlLENBQUNDLFdBQVcsQ0FBQztNQUNyQ0MsUUFBUSxFQUFFO0lBQ1osQ0FBQztFQUNIO0FBQ0Y7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQVAsT0FBQSxHQUVjQyxpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGlzY291bnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm93bktleXMiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJNZXJjYW50aWxlU2NyYXBlciIsIkRpc2NvdW50U2NyYXBlciIsImdldExvZ2luT3B0aW9ucyIsImNyZWRlbnRpYWxzIiwibG9naW5VcmwiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyYXBlcnMvbWVyY2FudGlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlzY291bnRTY3JhcGVyIGZyb20gJy4vZGlzY291bnQnO1xuXG50eXBlIFNjcmFwZXJTcGVjaWZpY0NyZWRlbnRpYWxzID0geyBpZDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCBudW06IHN0cmluZyB9O1xuY2xhc3MgTWVyY2FudGlsZVNjcmFwZXIgZXh0ZW5kcyBEaXNjb3VudFNjcmFwZXIge1xuICBnZXRMb2dpbk9wdGlvbnMoY3JlZGVudGlhbHM6IFNjcmFwZXJTcGVjaWZpY0NyZWRlbnRpYWxzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN1cGVyLmdldExvZ2luT3B0aW9ucyhjcmVkZW50aWFscyksXG4gICAgICBsb2dpblVybDogJ2h0dHBzOi8vc3RhcnQudGVsZWJhbmsuY28uaWwvbG9naW4vP2Jhbms9bScsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXJjYW50aWxlU2NyYXBlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLFNBQUFELHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBQUEsU0FBQUcsUUFBQUgsQ0FBQSxFQUFBSSxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFQLENBQUEsT0FBQU0sTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQVIsQ0FBQSxHQUFBSSxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBWCxDQUFBLEVBQUFJLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFmLENBQUEsYUFBQUksQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFELE9BQUEsQ0FBQUcsTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBZSxlQUFBLENBQUFuQixDQUFBLEVBQUFJLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWMseUJBQUEsR0FBQWQsTUFBQSxDQUFBZSxnQkFBQSxDQUFBckIsQ0FBQSxFQUFBTSxNQUFBLENBQUFjLHlCQUFBLENBQUFmLENBQUEsS0FBQUYsT0FBQSxDQUFBRyxNQUFBLENBQUFELENBQUEsR0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFFLE1BQUEsQ0FBQWdCLGNBQUEsQ0FBQXRCLENBQUEsRUFBQUksQ0FBQSxFQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFOLENBQUEsRUFBQUQsQ0FBQSxpQkFBQUosQ0FBQTtBQUFBLFNBQUFtQixnQkFBQW5CLENBQUEsRUFBQUksQ0FBQSxFQUFBQyxDQUFBLFlBQUFELENBQUEsR0FBQW1CLGNBQUEsQ0FBQW5CLENBQUEsTUFBQUosQ0FBQSxHQUFBTSxNQUFBLENBQUFnQixjQUFBLENBQUF0QixDQUFBLEVBQUFJLENBQUEsSUFBQW9CLEtBQUEsRUFBQW5CLENBQUEsRUFBQU8sVUFBQSxNQUFBYSxZQUFBLE1BQUFDLFFBQUEsVUFBQTFCLENBQUEsQ0FBQUksQ0FBQSxJQUFBQyxDQUFBLEVBQUFMLENBQUE7QUFBQSxTQUFBdUIsZUFBQWxCLENBQUEsUUFBQXNCLENBQUEsR0FBQUMsWUFBQSxDQUFBdkIsQ0FBQSx1Q0FBQXNCLENBQUEsR0FBQUEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUMsYUFBQXZCLENBQUEsRUFBQUQsQ0FBQSwyQkFBQUMsQ0FBQSxLQUFBQSxDQUFBLFNBQUFBLENBQUEsTUFBQUwsQ0FBQSxHQUFBSyxDQUFBLENBQUF3QixNQUFBLENBQUFDLFdBQUEsa0JBQUE5QixDQUFBLFFBQUEyQixDQUFBLEdBQUEzQixDQUFBLENBQUErQixJQUFBLENBQUExQixDQUFBLEVBQUFELENBQUEsdUNBQUF1QixDQUFBLFNBQUFBLENBQUEsWUFBQUssU0FBQSx5RUFBQTVCLENBQUEsR0FBQTZCLE1BQUEsR0FBQUMsTUFBQSxFQUFBN0IsQ0FBQTtBQUd6QyxNQUFNOEIsaUJBQWlCLFNBQVNDLGlCQUFlLENBQUM7RUFDOUNDLGVBQWVBLENBQUNDLFdBQXVDLEVBQUU7SUFDdkQsT0FBQXZCLGFBQUEsQ0FBQUEsYUFBQSxLQUNLLEtBQUssQ0FBQ3NCLGVBQWUsQ0FBQ0MsV0FBVyxDQUFDO01BQ3JDQyxRQUFRLEVBQUU7SUFBNEM7RUFFMUQ7QUFDRjtBQUFDLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBdkMsT0FBQSxHQUVjaUMsaUJBQWlCIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.test.js
index 1f40fc2..9b09617 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/mercantile.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _mercantile = _interopRequireDefault(require("./mercantile"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'mercantile'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Mercantile legacy scraper', () => {
@@ -18,10 +25,9 @@ describe('Mercantile legacy scraper', () => {
     expect(_definitions.SCRAPERS.mercantile.loginFields).toContain('num');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _mercantile.default(options);
     const result = await scraper.scrape(testsConfig.credentials.mercantile);
     expect(result).toBeDefined();
@@ -29,10 +35,9 @@ describe('Mercantile legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _mercantile.default(options);
     const result = await scraper.scrape(testsConfig.credentials.mercantile);
     expect(result).toBeDefined();
@@ -42,4 +47,4 @@ describe('Mercantile legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWVyY2FudGlsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3Rlc3RzVXRpbHMiLCJfZGVmaW5pdGlvbnMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkNPTVBBTllfSUQiLCJ0ZXN0c0NvbmZpZyIsImdldFRlc3RzQ29uZmlnIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJleHRlbmRBc3luY1RpbWVvdXQiLCJ0ZXN0IiwiZXhwZWN0IiwiU0NSQVBFUlMiLCJtZXJjYW50aWxlIiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJNZXJjYW50aWxlU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsImNyZWRlbnRpYWxzIiwic3VjY2VzcyIsInRvQmVGYWxzeSIsImVycm9yVHlwZSIsInRvQmUiLCJMb2dpblJlc3VsdHMiLCJJbnZhbGlkUGFzc3dvcmQiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsInRyaW0iLCJ0b0JlVHJ1dGh5IiwiZXhwb3J0VHJhbnNhY3Rpb25zIiwiYWNjb3VudHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyYXBlcnMvbWVyY2FudGlsZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZXJjYW50aWxlU2NyYXBlciBmcm9tICcuL21lcmNhbnRpbGUnO1xuaW1wb3J0IHsgbWF5YmVUZXN0Q29tcGFueUFQSSwgZXh0ZW5kQXN5bmNUaW1lb3V0LCBnZXRUZXN0c0NvbmZpZywgZXhwb3J0VHJhbnNhY3Rpb25zIH0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuXG5jb25zdCBDT01QQU5ZX0lEID0gJ21lcmNhbnRpbGUnOyAvLyBUT0RPIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGhhcmQtY29kZWQgaW4gdGhlIHByb3ZpZGVyXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdNZXJjYW50aWxlIGxlZ2FjeSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5tZXJjYW50aWxlKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5tZXJjYW50aWxlLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ2lkJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLm1lcmNhbnRpbGUubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMubWVyY2FudGlsZS5sb2dpbkZpZWxkcykudG9Db250YWluKCdudW0nKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCBjb25maWcgPT4gY29uZmlnLmNvbXBhbnlBUEkuaW52YWxpZFBhc3N3b3JkKShcbiAgICAnc2hvdWxkIGZhaWwgb24gaW52YWxpZCB1c2VyL3Bhc3N3b3JkXCInLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgTWVyY2FudGlsZVNjcmFwZXIob3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHRlc3RzQ29uZmlnLmNyZWRlbnRpYWxzLm1lcmNhbnRpbGUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBNZXJjYW50aWxlU2NyYXBlcihvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh0ZXN0c0NvbmZpZy5jcmVkZW50aWFscy5tZXJjYW50aWxlKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IGVycm9yID0gYCR7cmVzdWx0LmVycm9yVHlwZSB8fCAnJ30gJHtyZXN1bHQuZXJyb3JNZXNzYWdlIHx8ICcnfWAudHJpbSgpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZSgnJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBleHBvcnRUcmFuc2FjdGlvbnMoQ09NUEFOWV9JRCwgcmVzdWx0LmFjY291bnRzIHx8IFtdKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxXQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyx1QkFBQSxHQUFBSCxPQUFBO0FBQTJELFNBQUFELHVCQUFBSyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRTNELE1BQU1HLFVBQVUsR0FBRyxZQUFZLENBQUMsQ0FBQztBQUNqQyxNQUFNQyxXQUFXLEdBQUcsSUFBQUMsMEJBQWMsRUFBQyxDQUFDO0FBRXBDQyxRQUFRLENBQUMsMkJBQTJCLEVBQUUsTUFBTTtFQUMxQ0MsU0FBUyxDQUFDLE1BQU07SUFDZCxJQUFBQyw4QkFBa0IsRUFBQyxDQUFDLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLGlEQUFpRCxFQUFFLE1BQU07SUFDNURDLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsVUFBVSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDSCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLFVBQVUsQ0FBQ0UsV0FBVyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDdkRMLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsVUFBVSxDQUFDRSxXQUFXLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUM3REwsTUFBTSxDQUFDQyxxQkFBUSxDQUFDQyxVQUFVLENBQUNFLFdBQVcsQ0FBQyxDQUFDQyxTQUFTLENBQUMsS0FBSyxDQUFDO0VBQzFELENBQUMsQ0FBQztFQUVGLElBQUFDLCtCQUFtQixFQUFDYixVQUFVLEVBQUVjLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxVQUFVLENBQUNDLGVBQWUsQ0FBQyxDQUMxRSx1Q0FBdUMsRUFDdkMsWUFBWTtJQUNWLE1BQU1DLE9BQU8sR0FBRztNQUNkLEdBQUdoQixXQUFXLENBQUNnQixPQUFPO01BQ3RCQyxTQUFTLEVBQUVsQjtJQUNiLENBQUM7SUFFRCxNQUFNbUIsT0FBTyxHQUFHLElBQUlDLG1CQUFpQixDQUFDSCxPQUFPLENBQUM7SUFFOUMsTUFBTUksTUFBTSxHQUFHLE1BQU1GLE9BQU8sQ0FBQ0csTUFBTSxDQUFDckIsV0FBVyxDQUFDc0IsV0FBVyxDQUFDZCxVQUFVLENBQUM7SUFFdkVGLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDLENBQUNYLFdBQVcsQ0FBQyxDQUFDO0lBQzVCSCxNQUFNLENBQUNjLE1BQU0sQ0FBQ0csT0FBTyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDbEIsTUFBTSxDQUFDYyxNQUFNLENBQUNLLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUNDLG9DQUFZLENBQUNDLGVBQWUsQ0FBQztFQUM3RCxDQUNGLENBQUM7RUFFRCxJQUFBaEIsK0JBQW1CLEVBQUNiLFVBQVUsQ0FBQyxDQUFDLDZCQUE2QixFQUFFLFlBQVk7SUFDekUsTUFBTWlCLE9BQU8sR0FBRztNQUNkLEdBQUdoQixXQUFXLENBQUNnQixPQUFPO01BQ3RCQyxTQUFTLEVBQUVsQjtJQUNiLENBQUM7SUFFRCxNQUFNbUIsT0FBTyxHQUFHLElBQUlDLG1CQUFpQixDQUFDSCxPQUFPLENBQUM7SUFDOUMsTUFBTUksTUFBTSxHQUFHLE1BQU1GLE9BQU8sQ0FBQ0csTUFBTSxDQUFDckIsV0FBVyxDQUFDc0IsV0FBVyxDQUFDZCxVQUFVLENBQUM7SUFDdkVGLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDLENBQUNYLFdBQVcsQ0FBQyxDQUFDO0lBQzVCLE1BQU1vQixLQUFLLEdBQUcsR0FBR1QsTUFBTSxDQUFDSyxTQUFTLElBQUksRUFBRSxJQUFJTCxNQUFNLENBQUNVLFlBQVksSUFBSSxFQUFFLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDN0V6QixNQUFNLENBQUN1QixLQUFLLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUN0QnBCLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDRyxPQUFPLENBQUMsQ0FBQ1MsVUFBVSxDQUFDLENBQUM7SUFFbkMsSUFBQUMsOEJBQWtCLEVBQUNsQyxVQUFVLEVBQUVxQixNQUFNLENBQUNjLFFBQVEsSUFBSSxFQUFFLENBQUM7RUFDdkQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js b/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js
index 9b988fd..aee3c55 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js
@@ -4,6 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/esnext.aggregate-error.js");
+require("core-js/modules/esnext.promise.any.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _constants = require("../constants");
 var _elementsInteractions = require("../helpers/elements-interactions");
@@ -45,7 +49,7 @@ function createLoginFields(credentials) {
   }];
 }
 async function isLoggedIn(options) {
-  if (!options?.page) {
+  if (!(options !== null && options !== void 0 && options.page)) {
     return false;
   }
   const oshXPath = `//a//span[contains(., "${checkingAccountTabHebrewName}") or contains(., "${checkingAccountTabEnglishName}")]`;
@@ -73,7 +77,7 @@ function createDataFromRequest(request, optionsStartDate) {
 }
 function createHeadersFromRequest(request) {
   return {
-    mizrahixsrftoken: request.headers().mizrahixsrftoken,
+    'mizrahixsrftoken': request.headers().mizrahixsrftoken,
     'Content-Type': request.headers()['content-type']
   };
 }
@@ -161,16 +165,14 @@ class MizrahiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     return pendingTxn;
   }
   async fetchAccount() {
+    var _response$body$fields;
     await this.page.waitForSelector(`a[href*="${OSH_PAGE}"]`);
     await this.page.$eval(`a[href*="${OSH_PAGE}"]`, el => el.click());
     await (0, _elementsInteractions.waitUntilElementFound)(this.page, `a[href*="${TRANSACTIONS_PAGE}"]`);
     await this.page.$eval(`a[href*="${TRANSACTIONS_PAGE}"]`, el => el.click());
-    const accountNumberElement = await this.page.$('#dropdownBasic b span');
-    const accountNumberHandle = await accountNumberElement?.getProperty('title');
-    const accountNumber = await accountNumberHandle?.jsonValue();
-    if (!accountNumber) {
-      throw new Error('Account number not found');
-    }
+    const accountNumberElement = await this.page.$('#dropdownBasic b');
+    const accountNumberHandle = await (accountNumberElement === null || accountNumberElement === void 0 ? void 0 : accountNumberElement.getProperty('title'));
+    const accountNumber = await (accountNumberHandle === null || accountNumberHandle === void 0 ? void 0 : accountNumberHandle.jsonValue());
     const response = await Promise.any(TRANSACTIONS_REQUEST_URLS.map(async url => {
       const request = await this.page.waitForRequest(url);
       const data = createDataFromRequest(request, this.options.startDate);
@@ -191,9 +193,9 @@ class MizrahiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     return {
       accountNumber,
       txns: allTxn,
-      balance: +response.body.fields?.Yitra
+      balance: +((_response$body$fields = response.body.fields) === null || _response$body$fields === void 0 ? void 0 : _response$body$fields.Yitra)
     };
   }
 }
 var _default = exports.default = MizrahiScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.test.js
index 8b47bb9..10ef85f 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.test.js
@@ -1,11 +1,18 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _mizrahi = _interopRequireDefault(require("./mizrahi"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _constants = require("../constants");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'mizrahi'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Mizrahi scraper', () => {
@@ -18,10 +25,9 @@ describe('Mizrahi scraper', () => {
     expect(_definitions.SCRAPERS.mizrahi.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _mizrahi.default(options);
     const result = await scraper.scrape({
       username: 'e10s12',
@@ -32,10 +38,9 @@ describe('Mizrahi scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _mizrahi.default(options);
     const result = await scraper.scrape(testsConfig.credentials.mizrahi);
     expect(result).toBeDefined();
@@ -50,4 +55,4 @@ describe('Mizrahi scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWl6cmFoaSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3Rlc3RzVXRpbHMiLCJfZGVmaW5pdGlvbnMiLCJfY29uc3RhbnRzIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJDT01QQU5ZX0lEIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwidGVzdCIsImV4cGVjdCIsIlNDUkFQRVJTIiwibWl6cmFoaSIsInRvQmVEZWZpbmVkIiwibG9naW5GaWVsZHMiLCJ0b0NvbnRhaW4iLCJtYXliZVRlc3RDb21wYW55QVBJIiwiY29uZmlnIiwiY29tcGFueUFQSSIsImludmFsaWRQYXNzd29yZCIsIm9wdGlvbnMiLCJjb21wYW55SWQiLCJzY3JhcGVyIiwiTWl6cmFoaVNjcmFwZXIiLCJyZXN1bHQiLCJzY3JhcGUiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic3VjY2VzcyIsInRvQmVGYWxzeSIsImVycm9yVHlwZSIsInRvQmUiLCJMb2dpblJlc3VsdHMiLCJJbnZhbGlkUGFzc3dvcmQiLCJjcmVkZW50aWFscyIsImVycm9yIiwiZXJyb3JNZXNzYWdlIiwidHJpbSIsInRvQmVUcnV0aHkiLCJhY2NvdW50cyIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsImFjY291bnQiLCJhY2NvdW50TnVtYmVyIiwibm90IiwidHhucyIsImRhdGUiLCJ0b01hdGNoIiwiSVNPX0RBVEVfUkVHRVgiLCJleHBvcnRUcmFuc2FjdGlvbnMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyYXBlcnMvbWl6cmFoaS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNaXpyYWhpU2NyYXBlciBmcm9tICcuL21penJhaGknO1xuaW1wb3J0IHsgbWF5YmVUZXN0Q29tcGFueUFQSSwgZXh0ZW5kQXN5bmNUaW1lb3V0LCBnZXRUZXN0c0NvbmZpZywgZXhwb3J0VHJhbnNhY3Rpb25zIH0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBJU09fREFURV9SRUdFWCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuaW1wb3J0IHsgdHlwZSBUcmFuc2FjdGlvbnNBY2NvdW50IH0gZnJvbSAnLi4vdHJhbnNhY3Rpb25zJztcblxuY29uc3QgQ09NUEFOWV9JRCA9ICdtaXpyYWhpJzsgLy8gVE9ETyB0aGlzIHByb3BlcnR5IHNob3VsZCBiZSBoYXJkLWNvZGVkIGluIHRoZSBwcm92aWRlclxuY29uc3QgdGVzdHNDb25maWcgPSBnZXRUZXN0c0NvbmZpZygpO1xuXG5kZXNjcmliZSgnTWl6cmFoaSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5taXpyYWhpKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5taXpyYWhpLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ3VzZXJuYW1lJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLm1penJhaGkubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCBjb25maWcgPT4gY29uZmlnLmNvbXBhbnlBUEkuaW52YWxpZFBhc3N3b3JkKShcbiAgICAnc2hvdWxkIGZhaWwgb24gaW52YWxpZCB1c2VyL3Bhc3N3b3JkJyxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzY3JhcGVyID0gbmV3IE1penJhaGlTY3JhcGVyKG9wdGlvbnMpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh7IHVzZXJuYW1lOiAnZTEwczEyJywgcGFzc3dvcmQ6ICczZjNzczNkJyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZUZhbHN5KCk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yVHlwZSkudG9CZShMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkKTtcbiAgICB9LFxuICApO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCkoJ3Nob3VsZCBzY3JhcGUgdHJhbnNhY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgY29tcGFueUlkOiBDT01QQU5ZX0lELFxuICAgIH07XG5cbiAgICBjb25zdCBzY3JhcGVyID0gbmV3IE1penJhaGlTY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHRlc3RzQ29uZmlnLmNyZWRlbnRpYWxzLm1penJhaGkpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgZXJyb3IgPSBgJHtyZXN1bHQuZXJyb3JUeXBlIHx8ICcnfSAke3Jlc3VsdC5lcnJvck1lc3NhZ2UgfHwgJyd9YC50cmltKCk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlKCcnKTtcbiAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QocmVzdWx0LmFjY291bnRzKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCgocmVzdWx0LmFjY291bnRzIGFzIGFueSkubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgY29uc3QgYWNjb3VudDogVHJhbnNhY3Rpb25zQWNjb3VudCA9IChyZXN1bHQgYXMgYW55KS5hY2NvdW50c1swXTtcbiAgICBleHBlY3QoYWNjb3VudC5hY2NvdW50TnVtYmVyKS5ub3QudG9CZSgnJyk7XG4gICAgZXhwZWN0KGFjY291bnQudHhuc1swXS5kYXRlKS50b01hdGNoKElTT19EQVRFX1JFR0VYKTtcblxuICAgIGV4cG9ydFRyYW5zYWN0aW9ucyhDT01QQU5ZX0lELCByZXN1bHQuYWNjb3VudHMgfHwgW10pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLHVCQUFBLEdBQUFKLE9BQUE7QUFBMkQsU0FBQUQsdUJBQUFNLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFHM0QsTUFBTUcsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQzlCLE1BQU1DLFdBQVcsR0FBRyxJQUFBQywwQkFBYyxFQUFDLENBQUM7QUFFcENDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNO0VBQ2hDQyxTQUFTLENBQUMsTUFBTTtJQUNkLElBQUFDLDhCQUFrQixFQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3hCLENBQUMs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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.js b/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.js
index 774f7d8..9f2585a 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.js
@@ -4,6 +4,16 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.symbol.description.js");
+require("core-js/modules/es.array.flat-map.js");
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.array.sort.js");
+require("core-js/modules/es.array.unscopables.flat-map.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
+require("core-js/modules/es.string.trim.js");
+require("core-js/modules/esnext.string.match-all.js");
 var _moment = _interopRequireDefault(require("moment/moment"));
 var _debug = require("../helpers/debug");
 var _fetch = require("../helpers/fetch");
@@ -12,11 +22,19 @@ var _baseScraper = require("./base-scraper");
 var _errors = require("./errors");
 var _oneZeroQueries = require("./one-zero-queries");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const HEBREW_WORDS_REGEX = /[\u0590-\u05FF][\u0590-\u05FF"'\-_ /\\]*[\u0590-\u05FF]/g;
 const debug = (0, _debug.getDebug)('one-zero');
 const IDENTITY_SERVER_URL = 'https://identity.tfd-bank.com/v1/';
 const GRAPHQL_API_URL = 'https://mobile.tfd-bank.com/mobile-graph/graphql';
 class OneZeroScraper extends _baseScraper.BaseScraper {
+  constructor(...args) {
+    super(...args);
+    _defineProperty(this, "otpContext", void 0);
+    _defineProperty(this, "accessToken", void 0);
+  }
   async triggerTwoFactorAuth(phoneNumber) {
     if (!phoneNumber.startsWith('+')) {
       return (0, _errors.createGenericError)('A full international phone number starting with + and a three digit country code is required');
@@ -169,7 +187,8 @@ class OneZeroScraper extends _baseScraper.BaseScraper {
       accountNumber: portfolio.portfolioNum,
       balance: !movements.length ? 0 : parseFloat(movements[movements.length - 1].runningBalance),
       txns: matchingMovements.map(movement => {
-        const hasInstallments = movement.transaction?.enrichment?.recurrences?.some(x => x.isRecurrent);
+        var _movement$transaction;
+        const hasInstallments = (_movement$transaction = movement.transaction) === null || _movement$transaction === void 0 || (_movement$transaction = _movement$transaction.enrichment) === null || _movement$transaction === void 0 || (_movement$transaction = _movement$transaction.recurrences) === null || _movement$transaction === void 0 ? void 0 : _movement$transaction.some(x => x.isRecurrent);
         const modifier = movement.creditDebit === 'DEBIT' ? -1 : 1;
         return {
           identifier: movement.movementId,
@@ -235,4 +254,4 @@ class OneZeroScraper extends _baseScraper.BaseScraper {
   }
 }
 exports.default = OneZeroScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.test.js
index a729eee..9b3b5bc 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/one-zero.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 var _oneZero = _interopRequireDefault(require("./one-zero"));
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'oneZero'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('OneZero scraper', () => {
@@ -20,10 +27,9 @@ describe('OneZero scraper', () => {
     expect(_definitions.SCRAPERS.oneZero.loginFields).toContain('otpLongTermToken');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _oneZero.default(options);
     const result = await scraper.scrape({
       email: 'e10s12@gmail.com',
@@ -35,10 +41,9 @@ describe('OneZero scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _oneZero.default(options);
     const result = await scraper.scrape(testsConfig.credentials.oneZero);
     expect(result).toBeDefined();
@@ -48,4 +53,4 @@ describe('OneZero scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVzdHNVdGlscyIsInJlcXVpcmUiLCJfZGVmaW5pdGlvbnMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsIl9vbmVaZXJvIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkNPTVBBTllfSUQiLCJ0ZXN0c0NvbmZpZyIsImdldFRlc3RzQ29uZmlnIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJleHRlbmRBc3luY1RpbWVvdXQiLCJ0ZXN0IiwiZXhwZWN0IiwiU0NSQVBFUlMiLCJvbmVaZXJvIiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJPbmVaZXJvU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsImVtYWlsIiwicGFzc3dvcmQiLCJvdHBMb25nVGVybVRva2VuIiwic3VjY2VzcyIsInRvQmVGYWxzeSIsImVycm9yVHlwZSIsInRvQmUiLCJMb2dpblJlc3VsdHMiLCJJbnZhbGlkUGFzc3dvcmQiLCJjcmVkZW50aWFscyIsImVycm9yIiwiZXJyb3JNZXNzYWdlIiwidHJpbSIsInRvQmVUcnV0aHkiLCJleHBvcnRUcmFuc2FjdGlvbnMiLCJhY2NvdW50cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9vbmUtemVyby50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1heWJlVGVzdENvbXBhbnlBUEksIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIGV4cG9ydFRyYW5zYWN0aW9ucyB9IGZyb20gJy4uL3Rlc3RzL3Rlc3RzLXV0aWxzJztcbmltcG9ydCB7IFNDUkFQRVJTIH0gZnJvbSAnLi4vZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgTG9naW5SZXN1bHRzIH0gZnJvbSAnLi9iYXNlLXNjcmFwZXItd2l0aC1icm93c2VyJztcbmltcG9ydCBPbmVaZXJvU2NyYXBlciBmcm9tICcuL29uZS16ZXJvJztcblxuY29uc3QgQ09NUEFOWV9JRCA9ICdvbmVaZXJvJzsgLy8gVE9ETyB0aGlzIHByb3BlcnR5IHNob3VsZCBiZSBoYXJkLWNvZGVkIGluIHRoZSBwcm92aWRlclxuY29uc3QgdGVzdHNDb25maWcgPSBnZXRUZXN0c0NvbmZpZygpO1xuXG5kZXNjcmliZSgnT25lWmVybyBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy5vbmVaZXJvKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5vbmVaZXJvLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ2VtYWlsJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLm9uZVplcm8ubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMub25lWmVyby5sb2dpbkZpZWxkcykudG9Db250YWluKCdvdHBDb2RlUmV0cmlldmVyJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLm9uZVplcm8ubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGhvbmVOdW1iZXInKTtcbiAgICBleHBlY3QoU0NSQVBFUlMub25lWmVyby5sb2dpbkZpZWxkcykudG9Db250YWluKCdvdHBMb25nVGVybVRva2VuJyk7XG4gIH0pO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCwgY29uZmlnID0+IGNvbmZpZy5jb21wYW55QVBJLmludmFsaWRQYXNzd29yZCkoXG4gICAgJ3Nob3VsZCBmYWlsIG9uIGludmFsaWQgdXNlci9wYXNzd29yZFwiJyxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzY3JhcGVyID0gbmV3IE9uZVplcm9TY3JhcGVyKG9wdGlvbnMpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh7XG4gICAgICAgIGVtYWlsOiAnZTEwczEyQGdtYWlsLmNvbScsXG4gICAgICAgIHBhc3N3b3JkOiAnM2Yzc3MzZCcsXG4gICAgICAgIG90cExvbmdUZXJtVG9rZW46ICcxMTExMScsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZUZhbHN5KCk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yVHlwZSkudG9CZShMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkKTtcbiAgICB9LFxuICApO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCkoJ3Nob3VsZCBzY3JhcGUgdHJhbnNhY3Rpb25zXCInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgfTtcblxuICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgT25lWmVyb1NjcmFwZXIob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUodGVzdHNDb25maWcuY3JlZGVudGlhbHMub25lWmVybyk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBjb25zdCBlcnJvciA9IGAke3Jlc3VsdC5lcnJvclR5cGUgfHwgJyd9ICR7cmVzdWx0LmVycm9yTWVzc2FnZSB8fCAnJ31gLnRyaW0oKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmUoJycpO1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwb3J0VHJhbnNhY3Rpb25zKENPTVBBTllfSUQsIHJlc3VsdC5hY2NvdW50cyB8fCBbXSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsV0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsdUJBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUF3QyxTQUFBSSx1QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUV4QyxNQUFNRyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDOUIsTUFBTUMsV0FBVyxHQUFHLElBQUFDLDBCQUFjLEVBQUMsQ0FBQztBQUVwQ0MsUUFBUSxDQUFDLGlCQUFpQixFQUFFLE1BQU07RUFDaENDLFNBQVMsQ0FBQyxNQUFNO0lBQ2QsSUFBQUMsOEJBQWtCLEVBQUMsQ0FBQyxDQUFDLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxNQUFNO0lBQzVEQyxNQUFNLENBQUNDLHFCQUFRLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztJQUN0Q0gsTUFBTSxDQUFDQyxxQkFBUSxDQUFDQyxPQUFPLENBQUNFLFdBQVcsQ0FBQyxDQUFDQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3ZETCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLE9BQU8sQ0FBQ0UsV0FBVyxDQUFDLENBQUNDLFNB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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.d.ts b/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.d.ts
index 82c68b7..aebd2d9 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.d.ts
@@ -1,7 +1,32 @@
-import BeinleumiGroupBaseScraper from './base-beinleumi-group';
-declare class OtsarHahayalScraper extends BeinleumiGroupBaseScraper {
-    BASE_URL: string;
-    LOGIN_URL: string;
-    TRANSACTIONS_URL: string;
+import { type Transaction } from '../transactions';
+import { BaseScraperWithBrowser, type PossibleLoginResults } from './base-scraper-with-browser';
+type ScraperSpecificCredentials = {
+    username: string;
+    password: string;
+};
+declare class OtsarHahayalScraper extends BaseScraperWithBrowser<ScraperSpecificCredentials> {
+    getLoginOptions(credentials: ScraperSpecificCredentials): {
+        loginUrl: string;
+        fields: {
+            selector: string;
+            value: string;
+        }[];
+        submitButtonSelector: () => Promise<void>;
+        postAction: () => Promise<void>;
+        possibleResults: PossibleLoginResults;
+    };
+    fetchData(): Promise<{
+        success: boolean;
+        accounts: {
+            accountNumber: string;
+            summary: {
+                balance: number;
+                creditLimit: number;
+                creditUtilization: number;
+                balanceCurrency: string;
+            };
+            txns: Transaction[];
+        }[];
+    }>;
 }
 export default OtsarHahayalScraper;
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.js b/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.js
index 943a23b..2ad7ab0 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.js
@@ -4,12 +4,191 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-var _baseBeinleumiGroup = _interopRequireDefault(require("./base-beinleumi-group"));
+require("core-js/modules/es.symbol.description.js");
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.constructor.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
+var _moment = _interopRequireDefault(require("moment"));
+var _constants = require("../constants");
+var _elementsInteractions = require("../helpers/elements-interactions");
+var _navigation = require("../helpers/navigation");
+var _waiting = require("../helpers/waiting");
+var _transactions = require("../transactions");
+var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
-class OtsarHahayalScraper extends _baseBeinleumiGroup.default {
-  BASE_URL = 'https://online.bankotsar.co.il';
-  LOGIN_URL = `${this.BASE_URL}/MatafLoginService/MatafLoginServlet?bankId=OTSARPRTAL&site=Private&KODSAFA=HE`;
-  TRANSACTIONS_URL = `${this.BASE_URL}/wps/myportal/FibiMenu/Online/OnAccountMngment/OnBalanceTrans/PrivateAccountFlow`;
+const BASE_URL = 'https://online.bankotsar.co.il';
+const LONG_DATE_FORMAT = 'DD/MM/YYYY';
+const DATE_FORMAT = 'DD/MM/YY';
+function getPossibleLoginResults(page) {
+  const urls = {};
+  urls[_baseScraperWithBrowser.LoginResults.Success] = [new RegExp(`^${BASE_URL.replace('.', '\\.')}/wps/myportal/FibiMenu/Online`)];
+  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = [() => (0, _elementsInteractions.elementPresentOnPage)(page, '#validationMsg')];
+  // TODO: support change password
+  /* urls[LOGIN_RESULT.CHANGE_PASSWORD] = [``]; */
+  return urls;
+}
+function getTransactionsUrl() {
+  return `${BASE_URL}/wps/myportal/FibiMenu/Online/OnAccountMngment/OnBalanceTrans/PrivateAccountFlow`;
+}
+function createLoginFields(credentials) {
+  return [{
+    selector: '#username',
+    value: credentials.username
+  }, {
+    selector: '#password',
+    value: credentials.password
+  }];
+}
+function getAmountData(amountStr, hasCurrency = false) {
+  const amountStrCln = amountStr.replace(',', '');
+  let currency = null;
+  let amount = null;
+  if (!hasCurrency) {
+    amount = parseFloat(amountStrCln);
+    currency = _constants.SHEKEL_CURRENCY;
+  } else if (amountStrCln.includes(_constants.SHEKEL_CURRENCY_SYMBOL)) {
+    amount = parseFloat(amountStrCln.replace(_constants.SHEKEL_CURRENCY_SYMBOL, ''));
+    currency = _constants.SHEKEL_CURRENCY;
+  } else {
+    const parts = amountStrCln.split(' ');
+    amount = parseFloat(parts[0]);
+    [, currency] = parts;
+  }
+  return {
+    amount,
+    currency
+  };
+}
+function convertTransactions(txns) {
+  return txns.map(txn => {
+    const dateFormat = txn.date.length === 8 ? DATE_FORMAT : txn.date.length === 10 ? LONG_DATE_FORMAT : null;
+    if (!dateFormat) {
+      throw new Error('invalid date format');
+    }
+    const txnDate = (0, _moment.default)(txn.date, dateFormat).toISOString();
+    const credit = getAmountData(txn.credit || '').amount;
+    const debit = getAmountData(txn.debit || '').amount;
+    const amount = (Number.isNaN(credit) ? 0 : credit) - (Number.isNaN(debit) ? 0 : debit);
+    const result = {
+      type: _transactions.TransactionTypes.Normal,
+      status: _transactions.TransactionStatuses.Completed,
+      identifier: txn.reference ? parseInt(txn.reference, 10) : undefined,
+      date: txnDate,
+      processedDate: txnDate,
+      originalAmount: amount,
+      originalCurrency: _constants.SHEKEL_CURRENCY,
+      chargedAmount: amount,
+      description: txn.description || '',
+      memo: ''
+    };
+    return result;
+  });
+}
+async function parseTransactionPage(page) {
+  const tdsValues = await (0, _elementsInteractions.pageEvalAll)(page, '#dataTable077 tbody tr', [], trs => {
+    return trs.map(el => ({
+      date: el.querySelector('.date').innerText,
+      // reference and description have vice-versa class name
+      description: el.querySelector('.reference').innerText,
+      reference: el.querySelector('.details').innerText,
+      credit: el.querySelector('.credit').innerText,
+      debit: el.querySelector('.debit').innerText,
+      balance: el.querySelector('.balance').innerText
+    }));
+  });
+  return tdsValues;
+}
+async function getAccountSummary(page) {
+  const balanceElm = await page.$('.current_balance');
+  const balanceInnerTextElm = await balanceElm.getProperty('innerText');
+  const balanceText = await balanceInnerTextElm.jsonValue();
+  const balanceValue = getAmountData(balanceText, true);
+  // TODO: Find the credit field in bank website (could see it in my account)
+  return {
+    balance: Number.isNaN(balanceValue.amount) ? 0 : balanceValue.amount,
+    creditLimit: 0.0,
+    creditUtilization: 0.0,
+    balanceCurrency: balanceValue.currency
+  };
+}
+async function fetchTransactionsForAccount(page, startDate) {
+  const summary = await getAccountSummary(page);
+  await (0, _elementsInteractions.waitUntilElementFound)(page, 'input#fromDate');
+  // Get account number
+  const branchNum = await page.$eval('.branch_num', span => {
+    return span.innerText;
+  });
+  const accountNmbr = await page.$eval('.acc_num', span => {
+    return span.innerText;
+  });
+  const accountNumber = `14-${branchNum}-${accountNmbr}`;
+  // Search for relavant transaction from startDate
+  await (0, _elementsInteractions.clickButton)(page, '#tabHeader4');
+  await (0, _elementsInteractions.fillInput)(page, 'input#fromDate', startDate.format('DD/MM/YYYY'));
+  await (0, _elementsInteractions.clickButton)(page, '#fibi_tab_dates .fibi_btn:nth-child(2)');
+  await (0, _navigation.waitForNavigation)(page);
+  await (0, _elementsInteractions.waitUntilElementFound)(page, 'table#dataTable077, #NO_DATA077');
+  let hasNextPage = true;
+  let txns = [];
+  const noTransactionElm = await page.$('#NO_DATA077');
+  if (noTransactionElm == null) {
+    // Scape transactions (this maybe spanned on multiple pages)
+    while (hasNextPage) {
+      const pageTxns = await parseTransactionPage(page);
+      txns = txns.concat(pageTxns);
+      const button = await page.$('#Npage');
+      hasNextPage = false;
+      if (button != null) {
+        hasNextPage = true;
+      }
+      if (hasNextPage) {
+        await (0, _elementsInteractions.clickButton)(page, '#Npage');
+        await (0, _navigation.waitForNavigation)(page);
+        await (0, _elementsInteractions.waitUntilElementFound)(page, 'table#dataTable077');
+      }
+    }
+  }
+  return {
+    accountNumber,
+    summary,
+    txns: convertTransactions(txns.slice(1)) // Remove first line which is "opening balance"
+  };
+}
+async function fetchTransactions(page, startDate) {
+  // TODO need to extend to support multiple accounts and foreign accounts
+  return [await fetchTransactionsForAccount(page, startDate)];
+}
+async function waitForPostLogin(page) {
+  // TODO check for condition to provide new password
+  return Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, 'div.lotusFrame', true), (0, _elementsInteractions.waitUntilElementFound)(page, '#validationMsg')]);
+}
+class OtsarHahayalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
+  getLoginOptions(credentials) {
+    return {
+      loginUrl: `${BASE_URL}/MatafLoginService/MatafLoginServlet?bankId=OTSARPRTAL&site=Private&KODSAFA=HE`,
+      fields: createLoginFields(credentials),
+      submitButtonSelector: async () => {
+        await (0, _waiting.sleep)(1000);
+        await (0, _elementsInteractions.clickButton)(this.page, '#continueBtn');
+      },
+      postAction: async () => waitForPostLogin(this.page),
+      possibleResults: getPossibleLoginResults(this.page)
+    };
+  }
+  async fetchData() {
+    const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
+    const startDate = this.options.startDate || defaultStartMoment.toDate();
+    const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
+    const url = getTransactionsUrl();
+    await this.navigateTo(url);
+    const accounts = await fetchTransactions(this.page, startMoment);
+    return {
+      success: true,
+      accounts
+    };
+  }
 }
 var _default = exports.default = OtsarHahayalScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZUJlaW5sZXVtaUdyb3VwIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPdHNhckhhaGF5YWxTY3JhcGVyIiwiQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciIsIkJBU0VfVVJMIiwiTE9HSU5fVVJMIiwiVFJBTlNBQ1RJT05TX1VSTCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9vdHNhci1oYWhheWFsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCZWlubGV1bWlHcm91cEJhc2VTY3JhcGVyIGZyb20gJy4vYmFzZS1iZWlubGV1bWktZ3JvdXAnO1xuXG5jbGFzcyBPdHNhckhhaGF5YWxTY3JhcGVyIGV4dGVuZHMgQmVpbmxldW1pR3JvdXBCYXNlU2NyYXBlciB7XG4gIEJBU0VfVVJMID0gJ2h0dHBzOi8vb25saW5lLmJhbmtvdHNhci5jby5pbCc7XG5cbiAgTE9HSU5fVVJMID0gYCR7dGhpcy5CQVNFX1VSTH0vTWF0YWZMb2dpblNlcnZpY2UvTWF0YWZMb2dpblNlcnZsZXQ/YmFua0lkPU9UU0FSUFJUQUwmc2l0ZT1Qcml2YXRlJktPRFNBRkE9SEVgO1xuXG4gIFRSQU5TQUNUSU9OU19VUkwgPSBgJHt0aGlzLkJBU0VfVVJMfS93cHMvbXlwb3J0YWwvRmliaU1lbnUvT25saW5lL09uQWNjb3VudE1uZ21lbnQvT25CYWxhbmNlVHJhbnMvUHJpdmF0ZUFjY291bnRGbG93YDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgT3RzYXJIYWhheWFsU2NyYXBlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUErRCxTQUFBRCx1QkFBQUUsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUUvRCxNQUFNRyxtQkFBbUIsU0FBU0MsMkJBQXlCLENBQUM7RUFDMURDLFFBQVEsR0FBRyxnQ0FBZ0M7RUFFM0NDLFNBQVMsR0FBRyxHQUFHLElBQUksQ0FBQ0QsUUFBUSxnRkFBZ0Y7RUFFNUdFLGdCQUFnQixHQUFHLEdBQUcsSUFBSSxDQUFDRixRQUFRLGtGQUFrRjtBQUN2SDtBQUFDLElBQUFHLFFBQUEsR0FBQUMsT0FBQSxDQUFBUCxPQUFBLEdBRWNDLG1CQUFtQiIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.test.js
index fa05e91..91f99cb 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/otsar-hahayal.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _otsarHahayal = _interopRequireDefault(require("./otsar-hahayal"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'otsarHahayal'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('OtsarHahayal legacy scraper', () => {
@@ -17,10 +24,9 @@ describe('OtsarHahayal legacy scraper', () => {
     expect(_definitions.SCRAPERS.otsarHahayal.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _otsarHahayal.default(options);
     const result = await scraper.scrape({
       username: 'e10s12',
@@ -31,10 +37,9 @@ describe('OtsarHahayal legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _otsarHahayal.default(options);
     const result = await scraper.scrape(testsConfig.credentials.otsarHahayal);
     expect(result).toBeDefined();
@@ -44,4 +49,4 @@ describe('OtsarHahayal legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb3RzYXJIYWhheWFsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdGVzdHNVdGlscyIsIl9kZWZpbml0aW9ucyIsIl9iYXNlU2NyYXBlcldpdGhCcm93c2VyIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiQ09NUEFOWV9JRCIsInRlc3RzQ29uZmlnIiwiZ2V0VGVzdHNDb25maWciLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsImV4dGVuZEFzeW5jVGltZW91dCIsInRlc3QiLCJleHBlY3QiLCJTQ1JBUEVSUyIsIm90c2FySGFoYXlhbCIsInRvQmVEZWZpbmVkIiwibG9naW5GaWVsZHMiLCJ0b0NvbnRhaW4iLCJtYXliZVRlc3RDb21wYW55QVBJIiwiY29uZmlnIiwiY29tcGFueUFQSSIsImludmFsaWRQYXNzd29yZCIsIm9wdGlvbnMiLCJjb21wYW55SWQiLCJzY3JhcGVyIiwiT3RzYXJIYWhheWFsU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ0cmltIiwidG9CZVRydXRoeSIsImV4cG9ydFRyYW5zYWN0aW9ucyIsImFjY291bnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL290c2FyLWhhaGF5YWwudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT3RzYXJIYWhheWFsU2NyYXBlciBmcm9tICcuL290c2FyLWhhaGF5YWwnO1xuaW1wb3J0IHsgbWF5YmVUZXN0Q29tcGFueUFQSSwgZXh0ZW5kQXN5bmNUaW1lb3V0LCBnZXRUZXN0c0NvbmZpZywgZXhwb3J0VHJhbnNhY3Rpb25zIH0gZnJvbSAnLi4vdGVzdHMvdGVzdHMtdXRpbHMnO1xuaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuXG5jb25zdCBDT01QQU5ZX0lEID0gJ290c2FySGFoYXlhbCc7IC8vIFRPRE8gdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgaGFyZC1jb2RlZCBpbiB0aGUgcHJvdmlkZXJcbmNvbnN0IHRlc3RzQ29uZmlnID0gZ2V0VGVzdHNDb25maWcoKTtcblxuZGVzY3JpYmUoJ090c2FySGFoYXlhbCBsZWdhY3kgc2NyYXBlcicsICgpID0+IHtcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBleHRlbmRBc3luY1RpbWVvdXQoKTsgLy8gVGhlIGRlZmF1bHQgdGltZW91dCBpcyA1IHNlY29uZHMgcGVyIGFzeW5jIHRlc3QsIHRoaXMgZnVuY3Rpb24gZXh0ZW5kcyB0aGUgdGltZW91dCB2YWx1ZVxuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgZXhwb3NlIGxvZ2luIGZpZWxkcyBpbiBzY3JhcGVycyBjb25zdGFudCcsICgpID0+IHtcbiAgICBleHBlY3QoU0NSQVBFUlMub3RzYXJIYWhheWFsKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy5vdHNhckhhaGF5YWwubG9naW5GaWVsZHMpLnRvQ29udGFpbigndXNlcm5hbWUnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMub3RzYXJIYWhheWFsLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ3Bhc3N3b3JkJyk7XG4gIH0pO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCwgY29uZmlnID0+IGNvbmZpZy5jb21wYW55QVBJLmludmFsaWRQYXNzd29yZCkoXG4gICAgJ3Nob3VsZCBmYWlsIG9uIGludmFsaWQgdXNlci9wYXNzd29yZFwiJyxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzY3JhcGVyID0gbmV3IE90c2FySGFoYXlhbFNjcmFwZXIob3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHsgdXNlcm5hbWU6ICdlMTBzMTInLCBwYXNzd29yZDogJzNmM3NzM2QnIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBPdHNhckhhaGF5YWxTY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHRlc3RzQ29uZmlnLmNyZWRlbnRpYWxzLm90c2FySGFoYXlhbCk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBjb25zdCBlcnJvciA9IGAke3Jlc3VsdC5lcnJvclR5cGUgfHwgJyd9ICR7cmVzdWx0LmVycm9yTWVzc2FnZSB8fCAnJ31gLnRyaW0oKTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmUoJycpO1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZVRydXRoeSgpO1xuXG4gICAgZXhwb3J0VHJhbnNhY3Rpb25zKENPTVBBTllfSUQsIHJlc3Vs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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.js b/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.js
index 035f1d7..36f4988 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.js
@@ -4,6 +4,12 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.symbol.description.js");
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
+require("core-js/modules/es.string.trim.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _constants = require("../constants");
 var _elementsInteractions = require("../helpers/elements-interactions");
@@ -239,4 +245,4 @@ class UnionBankScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = UnionBankScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.test.js
index 3e604c7..f8324f5 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/union-bank.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _unionBank = _interopRequireDefault(require("./union-bank"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'union'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Union', () => {
@@ -17,10 +24,9 @@ describe('Union', () => {
     expect(_definitions.SCRAPERS.union.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _unionBank.default(options);
     const result = await scraper.scrape({
       username: 'e10s12',
@@ -31,10 +37,9 @@ describe('Union', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _unionBank.default(options);
     const result = await scraper.scrape(testsConfig.credentials.union);
     expect(result).toBeDefined();
@@ -44,4 +49,4 @@ describe('Union', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdW5pb25CYW5rIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdGVzdHNVdGlscyIsIl9kZWZpbml0aW9ucyIsIl9iYXNlU2NyYXBlcldpdGhCcm93c2VyIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiQ09NUEFOWV9JRCIsInRlc3RzQ29uZmlnIiwiZ2V0VGVzdHNDb25maWciLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsImV4dGVuZEFzeW5jVGltZW91dCIsInRlc3QiLCJleHBlY3QiLCJTQ1JBUEVSUyIsInVuaW9uIiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJVbmlvbkJhbmtTY3JhcGVyIiwicmVzdWx0Iiwic2NyYXBlIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInN1Y2Nlc3MiLCJ0b0JlRmFsc3kiLCJlcnJvclR5cGUiLCJ0b0JlIiwiTG9naW5SZXN1bHRzIiwiSW52YWxpZFBhc3N3b3JkIiwiY3JlZGVudGlhbHMiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsInRyaW0iLCJ0b0JlVHJ1dGh5IiwiZXhwb3J0VHJhbnNhY3Rpb25zIiwiYWNjb3VudHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyYXBlcnMvdW5pb24tYmFuay50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVbmlvbkJhbmtTY3JhcGVyIGZyb20gJy4vdW5pb24tYmFuayc7XG5pbXBvcnQgeyBtYXliZVRlc3RDb21wYW55QVBJLCBleHRlbmRBc3luY1RpbWVvdXQsIGdldFRlc3RzQ29uZmlnLCBleHBvcnRUcmFuc2FjdGlvbnMgfSBmcm9tICcuLi90ZXN0cy90ZXN0cy11dGlscyc7XG5pbXBvcnQgeyBTQ1JBUEVSUyB9IGZyb20gJy4uL2RlZmluaXRpb25zJztcbmltcG9ydCB7IExvZ2luUmVzdWx0cyB9IGZyb20gJy4vYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3Nlcic7XG5cbmNvbnN0IENPTVBBTllfSUQgPSAndW5pb24nOyAvLyBUT0RPIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGhhcmQtY29kZWQgaW4gdGhlIHByb3ZpZGVyXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdVbmlvbicsICgpID0+IHtcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBleHRlbmRBc3luY1RpbWVvdXQoKTsgLy8gVGhlIGRlZmF1bHQgdGltZW91dCBpcyA1IHNlY29uZHMgcGVyIGFzeW5jIHRlc3QsIHRoaXMgZnVuY3Rpb24gZXh0ZW5kcyB0aGUgdGltZW91dCB2YWx1ZVxuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgZXhwb3NlIGxvZ2luIGZpZWxkcyBpbiBzY3JhcGVycyBjb25zdGFudCcsICgpID0+IHtcbiAgICBleHBlY3QoU0NSQVBFUlMudW5pb24pLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLnVuaW9uLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ3VzZXJuYW1lJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLnVuaW9uLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ3Bhc3N3b3JkJyk7XG4gIH0pO1xuXG4gIG1heWJlVGVzdENvbXBhbnlBUEkoQ09NUEFOWV9JRCwgY29uZmlnID0+IGNvbmZpZy5jb21wYW55QVBJLmludmFsaWRQYXNzd29yZCkoXG4gICAgJ3Nob3VsZCBmYWlsIG9uIGludmFsaWQgdXNlci9wYXNzd29yZFwiJyxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAuLi50ZXN0c0NvbmZpZy5vcHRpb25zLFxuICAgICAgICBjb21wYW55SWQ6IENPTVBBTllfSUQsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzY3JhcGVyID0gbmV3IFVuaW9uQmFua1NjcmFwZXIob3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHsgdXNlcm5hbWU6ICdlMTBzMTInLCBwYXNzd29yZDogJzNmM3NzM2QnIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBVbmlvbkJhbmtTY3JhcGVyKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHRlc3RzQ29uZmlnLmNyZWRlbnRpYWxzLnVuaW9uKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IGVycm9yID0gYCR7cmVzdWx0LmVycm9yVHlwZSB8fCAnJ30gJHtyZXN1bHQuZXJyb3JNZXNzYWdlIHx8ICcnfWAudHJpbSgpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZSgnJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlVHJ1dGh5KCk7XG5cbiAgICBleHBvcnRUcmFuc2FjdGlvbnMoQ09NUEFOWV9JRCwgcmVzdWx0LmFjY291bnRzIHx8IFtdKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9B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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.d.ts b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.d.ts
index a39a6ed..a4223e8 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.d.ts
@@ -5,8 +5,6 @@ type ScraperSpecificCredentials = {
     password: string;
 };
 declare class VisaCalScraper extends BaseScraperWithBrowser<ScraperSpecificCredentials> {
-    private authorization;
-    private authRequestPromise;
     openLoginPopup: () => Promise<never>;
     getCards(): Promise<{
         cardUniqueId: string;
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
index f0256bc..186d0c9 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
@@ -4,6 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.flat-map.js");
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.array.unscopables.flat-map.js");
+require("core-js/modules/es.promise.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _debug = require("../helpers/debug");
 var _elementsInteractions = require("../helpers/elements-interactions");
@@ -15,10 +19,12 @@ var _waiting = require("../helpers/waiting");
 var _transactions2 = require("../transactions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const LOGIN_URL = 'https://www.cal-online.co.il/';
 const TRANSACTIONS_REQUEST_ENDPOINT = 'https://api.cal-online.co.il/Transactions/api/transactionsDetails/getCardTransactionsDetails';
 const PENDING_TRANSACTIONS_REQUEST_ENDPOINT = 'https://api.cal-online.co.il/Transactions/api/approvals/getClearanceRequests';
-const SSO_AUTHORIZATION_REQUEST_ENDPOINT = 'https://connect.cal-online.co.il/col-rest/calconnect/authentication/SSO';
 const InvalidPasswordMessage = 'שם המשתמש או הסיסמה שהוזנו שגויים';
 const debug = (0, _debug.getDebug)('visa-cal');
 var TrnTypeCode = /*#__PURE__*/function (TrnTypeCode) {
@@ -68,7 +74,7 @@ function getPossibleLoginResults() {
   const urls = {
     [_baseScraperWithBrowser.LoginResults.Success]: [/dashboard/i],
     [_baseScraperWithBrowser.LoginResults.InvalidPassword]: [async options => {
-      const page = options?.page;
+      const page = options === null || options === void 0 ? void 0 : options.page;
       if (!page) {
         return false;
       }
@@ -76,7 +82,7 @@ function getPossibleLoginResults() {
     }],
     // [LoginResults.AccountBlocked]: [], // TODO add when reaching this scenario
     [_baseScraperWithBrowser.LoginResults.ChangePassword]: [async options => {
-      const page = options?.page;
+      const page = options === null || options === void 0 ? void 0 : options.page;
       if (!page) {
         return false;
       }
@@ -96,7 +102,7 @@ function createLoginFields(credentials) {
   }];
 }
 function convertParsedDataToTransactions(data, pendingData) {
-  const pendingTransactions = pendingData?.result ? pendingData.result.cardsList.flatMap(card => card.authDetalisList) : [];
+  const pendingTransactions = pendingData !== null && pendingData !== void 0 && pendingData.result ? pendingData.result.cardsList.flatMap(card => card.authDetalisList) : [];
   const bankAccounts = data.flatMap(monthData => monthData.result.bankAccounts);
   const regularDebitDays = bankAccounts.flatMap(accounts => accounts.debitDates);
   const immediateDebitDays = bankAccounts.flatMap(accounts => accounts.immidiateDebits.debitDays);
@@ -136,28 +142,30 @@ function convertParsedDataToTransactions(data, pendingData) {
   });
 }
 class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
-  authorization = undefined;
-  openLoginPopup = async () => {
-    debug('open login popup, wait until login button available');
-    await (0, _elementsInteractions.waitUntilElementFound)(this.page, '#ccLoginDesktopBtn', true);
-    debug('click on the login button');
-    await (0, _elementsInteractions.clickButton)(this.page, '#ccLoginDesktopBtn');
-    debug('get the frame that holds the login');
-    const frame = await getLoginFrame(this.page);
-    debug('wait until the password login tab header is available');
-    await (0, _elementsInteractions.waitUntilElementFound)(frame, '#regular-login');
-    debug('navigate to the password login tab');
-    await (0, _elementsInteractions.clickButton)(frame, '#regular-login');
-    debug('wait until the password login tab is active');
-    await (0, _elementsInteractions.waitUntilElementFound)(frame, 'regular-login');
-    return frame;
-  };
+  constructor(...args) {
+    super(...args);
+    _defineProperty(this, "openLoginPopup", async () => {
+      debug('open login popup, wait until login button available');
+      await (0, _elementsInteractions.waitUntilElementFound)(this.page, '#ccLoginDesktopBtn', true);
+      debug('click on the login button');
+      await (0, _elementsInteractions.clickButton)(this.page, '#ccLoginDesktopBtn');
+      debug('get the frame that holds the login');
+      const frame = await getLoginFrame(this.page);
+      debug('wait until the password login tab header is available');
+      await (0, _elementsInteractions.waitUntilElementFound)(frame, '#regular-login');
+      debug('navigate to the password login tab');
+      await (0, _elementsInteractions.clickButton)(frame, '#regular-login');
+      debug('wait until the password login tab is active');
+      await (0, _elementsInteractions.waitUntilElementFound)(frame, 'regular-login');
+      return frame;
+    });
+  }
   async getCards() {
     const initData = await (0, _waiting.waitUntil)(() => (0, _storage.getFromSessionStorage)(this.page, 'init'), 'get init data in session storage', 10000, 1000);
     if (!initData) {
-      throw new Error("could not find 'init' data in session storage");
+      throw new Error('could not find \'init\' data in session storage');
     }
-    return initData?.result.cards.map(({
+    return initData === null || initData === void 0 ? void 0 : initData.result.cards.map(({
       cardUniqueId,
       last4Digits
     }) => ({
@@ -166,18 +174,11 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     }));
   }
   async getAuthorizationHeader() {
-    if (!this.authorization) {
-      debug('fetching authorization header');
-      const authModule = await (0, _waiting.waitUntil)(async () => {
-        const result = await (0, _storage.getFromSessionStorage)(this.page, 'auth-module');
-        return result && result.auth && result.auth.calConnectToken !== null ? result : null;
-      }, 'get authorization header with valid token in session storage', 1000, 50);
-      if (authModule && authModule.auth.calConnectToken !== null) {
-        return `CALAuthScheme ${authModule.auth.calConnectToken}`;
-      }
-      throw new Error('could not retrieve authorization header');
+    const authModule = await (0, _storage.getFromSessionStorage)(this.page, 'auth-module');
+    if (!authModule) {
+      throw new Error('could not find \'auth-module\' in session storage');
     }
-    return this.authorization;
+    return `CALAuthScheme ${authModule.auth.calConnectToken}`;
   }
   async getXSiteId() {
     /*
@@ -195,12 +196,6 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     return Promise.resolve('09031987-273E-2311-906C-8AF85B17C8D9');
   }
   getLoginOptions(credentials) {
-    this.authRequestPromise = this.page.waitForRequest(SSO_AUTHORIZATION_REQUEST_ENDPOINT, {
-      timeout: 10_000
-    }).catch(e => {
-      debug('error while waiting for the token request', e);
-      return undefined;
-    });
     return {
       loginUrl: `${LOGIN_URL}`,
       fields: createLoginFields(credentials),
@@ -210,13 +205,11 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
       preAction: this.openLoginPopup,
       postAction: async () => {
         try {
-          await (0, _navigation.waitForNavigation)(this.page);
+          await (0, _elementsInteractions.waitUntilElementFound)(this.page, 'button.btn-close');
           const currentUrl = await (0, _navigation.getCurrentUrl)(this.page);
           if (currentUrl.endsWith('site-tutorial')) {
             await (0, _elementsInteractions.clickButton)(this.page, 'button.btn-close');
           }
-          const request = await this.authRequestPromise;
-          this.authorization = request?.headers()?.authorization;
         } catch (e) {
           const currentUrl = await (0, _navigation.getCurrentUrl)(this.page);
           if (currentUrl.endsWith('dashboard')) return;
@@ -229,13 +222,17 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     };
   }
   async fetchData() {
+    var _this$options$futureM;
     const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').subtract(6, 'months').add(1, 'day');
     const startDate = this.options.startDate || defaultStartMoment.toDate();
     const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
     debug(`fetch transactions starting ${startMoment.format()}`);
-    const [cards, xSiteId, Authorization] = await Promise.all([this.getCards(), this.getXSiteId(), this.getAuthorizationHeader()]);
-    const futureMonthsToScrape = this.options.futureMonthsToScrape ?? 1;
+    const Authorization = await this.getAuthorizationHeader();
+    const cards = await this.getCards();
+    const xSiteId = await this.getXSiteId();
+    const futureMonthsToScrape = (_this$options$futureM = this.options.futureMonthsToScrape) !== null && _this$options$futureM !== void 0 ? _this$options$futureM : 1;
     const accounts = await Promise.all(cards.map(async card => {
+      var _pendingData, _pendingData2, _this$options$outputD, _this$options$outputD2;
       const finalMonthToFetchMoment = (0, _moment.default)().add(futureMonthsToScrape, 'month');
       const months = finalMonthToFetchMoment.diff(startMoment, 'months');
       const allMonthsData = [];
@@ -259,22 +256,23 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
           'X-Site-Id': xSiteId,
           'Content-Type': 'application/json'
         });
-        if (monthData?.statusCode !== 1) throw new Error(`failed to fetch transactions for card ${card.last4Digits}. Message: ${monthData?.title || ''}`);
+        if ((monthData === null || monthData === void 0 ? void 0 : monthData.statusCode) !== 1) throw new Error(`failed to fetch transactions for card ${card.last4Digits}. Message: ${(monthData === null || monthData === void 0 ? void 0 : monthData.title) || ''}`);
         if (!isCardTransactionDetails(monthData)) {
           throw new Error('monthData is not of type CardTransactionDetails');
         }
         allMonthsData.push(monthData);
       }
-      if (pendingData?.statusCode !== 1 && pendingData?.statusCode !== 96) {
-        debug(`failed to fetch pending transactions for card ${card.last4Digits}. Message: ${pendingData?.title || ''}`);
+      if (((_pendingData = pendingData) === null || _pendingData === void 0 ? void 0 : _pendingData.statusCode) !== 1 && ((_pendingData2 = pendingData) === null || _pendingData2 === void 0 ? void 0 : _pendingData2.statusCode) !== 96) {
+        var _pendingData3;
+        debug(`failed to fetch pending transactions for card ${card.last4Digits}. Message: ${((_pendingData3 = pendingData) === null || _pendingData3 === void 0 ? void 0 : _pendingData3.title) || ''}`);
         pendingData = null;
       } else if (!isCardPendingTransactionDetails(pendingData)) {
         debug('pendingData is not of type CardTransactionDetails');
         pendingData = null;
       }
       const transactions = convertParsedDataToTransactions(allMonthsData, pendingData);
-      debug('filter out old transactions');
-      const txns = this.options.outputData?.enableTransactionsFilterByDate ?? true ? (0, _transactions.filterOldTransactions)(transactions, (0, _moment.default)(startDate), this.options.combineInstallments || false) : transactions;
+      debug('filer out old transactions');
+      const txns = ((_this$options$outputD = (_this$options$outputD2 = this.options.outputData) === null || _this$options$outputD2 === void 0 ? void 0 : _this$options$outputD2.enableTransactionsFilterByDate) !== null && _this$options$outputD !== void 0 ? _this$options$outputD : true) ? (0, _transactions.filterOldTransactions)(transactions, (0, _moment.default)(startDate), this.options.combineInstallments || false) : transactions;
       return {
         txns,
         accountNumber: card.last4Digits
@@ -289,4 +287,4 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = VisaCalScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.test.js
index e4790b5..f0e324c 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _definitions = require("../definitions");
 var _testsUtils = require("../tests/tests-utils");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 var _visaCal = _interopRequireDefault(require("./visa-cal"));
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'visaCal'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('VisaCal legacy scraper', () => {
@@ -17,10 +24,9 @@ describe('VisaCal legacy scraper', () => {
     expect(_definitions.SCRAPERS.visaCal.loginFields).toContain('password');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _visaCal.default(options);
     const result = await scraper.scrape({
       username: '971sddksmsl',
@@ -31,10 +37,9 @@ describe('VisaCal legacy scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _visaCal.default(options);
     const result = await scraper.scrape(testsConfig.credentials.visaCal);
     expect(result).toBeDefined();
@@ -46,4 +51,4 @@ describe('VisaCal legacy scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmaW5pdGlvbnMiLCJyZXF1aXJlIiwiX3Rlc3RzVXRpbHMiLCJfYmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsIl92aXNhQ2FsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkNPTVBBTllfSUQiLCJ0ZXN0c0NvbmZpZyIsImdldFRlc3RzQ29uZmlnIiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJleHRlbmRBc3luY1RpbWVvdXQiLCJ0ZXN0IiwiZXhwZWN0IiwiU0NSQVBFUlMiLCJ2aXNhQ2FsIiwidG9CZURlZmluZWQiLCJsb2dpbkZpZWxkcyIsInRvQ29udGFpbiIsIm1heWJlVGVzdENvbXBhbnlBUEkiLCJjb25maWciLCJjb21wYW55QVBJIiwiaW52YWxpZFBhc3N3b3JkIiwib3B0aW9ucyIsImNvbXBhbnlJZCIsInNjcmFwZXIiLCJWaXNhQ2FsU2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzdWNjZXNzIiwidG9CZUZhbHN5IiwiZXJyb3JUeXBlIiwidG9CZSIsIkxvZ2luUmVzdWx0cyIsIkludmFsaWRQYXNzd29yZCIsImNyZWRlbnRpYWxzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJ0cmltIiwidG9CZVRydXRoeSIsImV4cG9ydFRyYW5zYWN0aW9ucyIsImFjY291bnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL3Zpc2EtY2FsLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0NSQVBFUlMgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBleHBvcnRUcmFuc2FjdGlvbnMsIGV4dGVuZEFzeW5jVGltZW91dCwgZ2V0VGVzdHNDb25maWcsIG1heWJlVGVzdENvbXBhbnlBUEkgfSBmcm9tICcuLi90ZXN0cy90ZXN0cy11dGlscyc7XG5pbXBvcnQgeyBMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuaW1wb3J0IFZpc2FDYWxTY3JhcGVyIGZyb20gJy4vdmlzYS1jYWwnO1xuXG5jb25zdCBDT01QQU5ZX0lEID0gJ3Zpc2FDYWwnOyAvLyBUT0RPIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGhhcmQtY29kZWQgaW4gdGhlIHByb3ZpZGVyXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdWaXNhQ2FsIGxlZ2FjeSBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy52aXNhQ2FsKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTQ1JBUEVSUy52aXNhQ2FsLmxvZ2luRmllbGRzKS50b0NvbnRhaW4oJ3VzZXJuYW1lJyk7XG4gICAgZXhwZWN0KFNDUkFQRVJTLnZpc2FDYWwubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lELCBjb25maWcgPT4gY29uZmlnLmNvbXBhbnlBUEkuaW52YWxpZFBhc3N3b3JkKShcbiAgICAnc2hvdWxkIGZhaWwgb24gaW52YWxpZCB1c2VyL3Bhc3N3b3JkXCInLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLnRlc3RzQ29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgVmlzYUNhbFNjcmFwZXIob3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHsgdXNlcm5hbWU6ICc5NzFzZGRrc21zbCcsIHBhc3N3b3JkOiAnM2Yzc3Nka1NEM2QnIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBWaXNhQ2FsU2NyYXBlcihvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzY3JhcGVyLnNjcmFwZSh0ZXN0c0NvbmZpZy5jcmVkZW50aWFscy52aXNhQ2FsKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IGVycm9yID0gYCR7cmVzdWx0LmVycm9yVHlwZSB8fCAnJ30gJHtyZXN1bHQuZXJyb3JNZXNzYWdlIHx8ICcnfWAudHJpbSgpO1xuICAgIGV4cGVjdChlcnJvcikudG9CZSgnJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlVHJ1dGh5KCk7XG4gICAgLy8gdW5jb21tZW50IHRvIHRlc3QgbXVsdGlwbGUgYWNjb3VudHNcbiAgICAvLyBleHBlY3QocmVzdWx0Py5hY2NvdW50cz8ubGVuZ3RoKS50b0VxdWFsKDIpXG4gICAgZXhwb3J0VHJhbnNhY3Rpb25zKENPTVBBTllfSUQsIHJlc3VsdC5hY2NvdW50cyB8fCBbXSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsdUJBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUF3QyxTQUFBSSx1QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUV4QyxNQUFNRyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDOUIsTUFBTUMsV0FBVyxHQUFHLElBQUFDLDBCQUFjLEVBQUMsQ0FBQztBQUVwQ0MsUUFBUSxDQUFDLHdCQUF3QixFQUFFLE1BQU07RUFDdkNDLFNBQVMsQ0FBQyxNQUFNO0lBQ2QsSUFBQUMsOEJBQWtCLEVBQUMsQ0FBQyxDQUFDLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxNQUFNO0lBQzVEQyxNQUFNLENBQUNDLHFCQUFRLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztJQUN0Q0gsTUFBTSxDQUFDQyxxQkFBUSxDQUFDQyxPQUFPLENBQUNFLFdBQVcsQ0FBQyxDQUFDQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzFETCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLE9BQU8sQ0FBQ0UsV0FBVyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxVQUFVLENBQUM7RUFDNUQsQ0FBQyxDQUFDO0VBRUYsSUFBQUMsK0JBQW1CLEVBQUNiLFVBQVUsRUFBRWMsTUFBTSxJQUFJQSxNQUFNLENBQUNDLFVBQVUsQ0FBQ0MsZUFBZSxDQUFDLENBQzFFLHVDQUF1QyxFQUN2QyxZQUFZO0lBQ1YsTUFBTUMsT0FBTyxHQUFHO01BQ2QsR0FBR2hCLFdBQVcsQ0FBQ2dCLE9BQU87TUFDdEJDLFNBQVMsRUFBRWxCO0lBQ2IsQ0FBQztJQUVELE1BQU1tQixPQUFPLEdBQUcsSUFBSUMsZ0JBQWMsQ0FBQ0gsT0FBTyxDQUFDO0lBRTNDLE1BQU1JLE1BQU0sR0FBRyxNQUFNRixPQUFPLENBQUNHLE1BQU0sQ0FBQztNQUFFQyxRQUFRLEVBQUUsYUFBYTtNQUFFQyxRQUFRLEVBQUU7SUFBYyxDQUFDLENBQUM7SUFFekZqQixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QkgsTUFBTSxDQUFDYyxNQUFNLENBQUNJLE9BQU8sQ0FBQyxDQUFDQyxTQUFTLENBQUMsQ0FBQztJQUNsQ25CLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDTSxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDQyxvQ0FBWSxDQUFDQyxlQUFlLENBQUM7RUFDN0QsQ0FDRixDQUFDO0VBRUQsSUFBQWpCLCtCQUFtQixFQUFDYixVQUFVLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxZQUFZO0lBQ3pFLE1BQU1pQixPQUFPLEdBQUc7TUFDZCxHQUFHaEIsV0FBVyxDQUFDZ0IsT0FBTztNQUN0QkMsU0FBUyxFQUFFbEI7SUFDYixDQUFDO0lBRUQsTUFBTW1CLE9BQU8sR0FBRyxJQUFJQyxnQkFBYyxDQUFDSCxPQUFPLENBQUM7SUFDM0MsTUFBTUksTUFBTSxHQUFHLE1BQU1GLE9BQU8sQ0FBQ0csTUFBTSxDQUFDckIsV0FBVyxDQUFDOEIsV0FBVyxDQUFDdEIsT0FBTyxDQUFDO0lBQ3BFRixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QixNQUFNc0IsS0FBSyxHQUFHLEdBQUdYLE1BQU0sQ0FBQ00sU0FBUyxJQUFJLEVBQUUsSUFBSU4sTUFBTSxDQUFDWSxZQUFZLElBQUksRUFBRSxFQUFFLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzdFM0IsTUFBTSxDQUFDeUIsS0FBSyxDQUFDLENBQUNKLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDdEJyQixNQUFNLENBQUNjLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLENBQUNVLFVBQVUsQ0FBQyxDQUFDO0lBQ25DO0lBQ0E7SUFDQSxJQUFBQyw4QkFBa0IsRUFBQ3BDLFVBQVUsRUFBRXFCLE1BQU0sQ0FBQ2dCLFFBQVEsSUFBSSxFQUFFLENBQUM7RUFDdkQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.js b/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.js
index 1138564..a5a63d0 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.js
@@ -4,6 +4,11 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.symbol.description.js");
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.replace.js");
 var _moment = _interopRequireDefault(require("moment"));
 var _constants = require("../constants");
 var _elementsInteractions = require("../helpers/elements-interactions");
@@ -244,4 +249,4 @@ class YahavScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = YahavScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9tZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uc3RhbnRzIiwiX2VsZW1lbnRzSW50ZXJhY3Rpb25zIiwiX25hdmlnYXRpb24iLCJfdHJhbnNhY3Rpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJMT0dJTl9VUkwiLCJCQVNFX1VSTCIsIklOVkFMSURfREVUQUlMU19TRUxFQ1RPUiIsIkNIQU5HRV9QQVNTV09SRF9PTERfUEFTUyIsIkJBU0VfV0VMQ09NRV9VUkwiLCJBQ0NPVU5UX0lEX1NFTEVDVE9SIiwiQUNDT1VOVF9ERVRBSUxTX1NFTEVDVE9SIiwiREFURV9GT1JNQVQiLCJVU0VSX0VMRU0iLCJQQVNTV0RfRUxFTSIsIk5BVElPTkFMSURfRUxFTSIsIlNVQk1JVF9MT0dJTl9TRUxFQ1RPUiIsImdldFBvc3NpYmxlTG9naW5SZXN1bHRzIiwicGFnZSIsInVybHMiLCJMb2dpblJlc3VsdHMiLCJTdWNjZXNzIiwiSW52YWxpZFBhc3N3b3JkIiwiZWxlbWVudFByZXNlbnRPblBhZ2UiLCJDaGFuZ2VQYXNzd29yZCIsImdldEFjY291bnRJRCIsInNlbGVjdGVkU25pZkFjY291bnQiLCIkZXZhbCIsImVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImVycm9yIiwiZXJyb3JNZXNzYWdlIiwiRXJyb3IiLCJtZXNzYWdlIiwiU3RyaW5nIiwiZ2V0QW1vdW50RGF0YSIsImFtb3VudFN0ciIsImFtb3VudFN0ckNvcHkiLCJyZXBsYWNlIiwicGFyc2VGbG9hdCIsImdldFR4bkFtb3VudCIsInR4biIsImNyZWRpdCIsImRlYml0IiwiTnVtYmVyIiwiaXNOYU4iLCJjb252ZXJ0VHJhbnNhY3Rpb25zIiwidHhucyIsIm1hcCIsImNvbnZlcnRlZERhdGUiLCJtb21lbnQiLCJkYXRlIiwidG9JU09TdHJpbmciLCJjb252ZXJ0ZWRBbW91bnQiLCJ0eXBlIiwiVHJhbnNhY3Rpb25UeXBlcyIsIk5vcm1hbCIsImlkZW50aWZpZXIiLCJyZWZlcmVuY2UiLCJwYXJzZUludCIsInVuZGVmaW5lZCIsInByb2Nlc3NlZERhdGUiLCJvcmlnaW5hbEFtb3VudCIsIm9yaWdpbmFsQ3VycmVuY3kiLCJTSEVLRUxfQ1VSUkVOQ1kiLCJjaGFyZ2VkQW1vdW50Iiwic3RhdHVzIiwiZGVzY3JpcHRpb24iLCJtZW1vIiwiaGFuZGxlVHJhbnNhY3Rpb25Sb3ciLCJ0eG5Sb3ciLCJkaXYiLCJpbm5lckRpdnMiLCJyZWdleCIsInR4IiwiVHJhbnNhY3Rpb25TdGF0dXNlcyIsIkNvbXBsZXRlZCIsInB1c2giLCJnZXRBY2NvdW50VHJhbnNhY3Rpb25zIiwid2FpdFVudGlsRWxlbWVudEZvdW5kIiwidHJhbnNhY3Rpb25zRGl2cyIsInBhZ2VFdmFsQWxsIiwiZGl2cyIsImlkIiwiZ2V0QXR0cmlidXRlIiwiQXJyYXkiLCJmcm9tIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJlbCIsImlubmVyVGV4dCIsInNlYXJjaEJ5RGF0ZXMiLCJzdGFydERhdGUiLCJzdGFydERhdGVEYXkiLCJmb3JtYXQiLCJzdGFydERhdGVNb250aCIsInN0YXJ0RGF0ZVllYXIiLCJkYXRlRnJvbVBpY2siLCJjbGlja0J1dHRvbiIsIm1vbnRoRnJvbVBpY2siLCJpIiwic2VsZWN0b3IiLCJ5ZWFyIiwieSIsIm1vbnRoU2VsZWN0b3IiLCJkYXkiLCJkIiwiZmV0Y2hBY2NvdW50RGF0YSIsImFjY291bnRJRCIsIndhaXRVbnRpbEVsZW1lbnREaXNhcHBlYXIiLCJhY2NvdW50TnVtYmVyIiwiZmV0Y2hBY2NvdW50cyIsImFjY291bnRzIiwiYWNjb3VudERhdGEiLCJ3YWl0UmVhZGluZXNzRm9yQWxsIiwicmVkaXJlY3RPckRpYWxvZyIsIndhaXRGb3JOYXZpZ2F0aW9uIiwiaGFzTWVzc2FnZSIsInByb21pc2UxIiwid2FpdEZvclNlbGVjdG9yIiwidGltZW91dCIsInByb21pc2UyIiwicHJvbWlzZXMiLCJQcm9taXNlIiwicmFjZSIsIllhaGF2U2NyYXBlciIsIkJhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJnZXRMb2dpbk9wdGlvbnMiLCJjcmVkZW50aWFscyIsImxvZ2luVXJsIiwiZmllbGRzIiwidmFsdWUiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwibmF0aW9uYWxJRCIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiY2hlY2tSZWFkaW5lc3MiLCJwb3N0QWN0aW9uIiwicG9zc2libGVSZXN1bHRzIiwiZmV0Y2hEYXRhIiwiZGVmYXVsdFN0YXJ0TW9tZW50Iiwic3VidHJhY3QiLCJhZGQiLCJvcHRpb25zIiwidG9EYXRlIiwic3RhcnRNb21lbnQiLCJtYXgiLCJzdWNjZXNzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL3lhaGF2LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb21lbnQsIHsgdHlwZSBNb21lbnQgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgdHlwZSBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyJztcbmltcG9ydCB7IFNIRUtFTF9DVVJSRU5DWSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBjbGlja0J1dHRvbixcbiAgZWxlbWVudFByZXNlbnRPblBhZ2UsXG4gIHBhZ2VFdmFsQWxsLFxuICB3YWl0VW50aWxFbGVtZW50RGlzYXBwZWFyLFxuICB3YWl0VW50aWxFbGVtZW50Rm91bmQsXG59IGZyb20gJy4uL2hlbHBlcnMvZWxlbWVudHMtaW50ZXJhY3Rpb25zJztcbmltcG9ydCB7IHdhaXRGb3JOYXZpZ2F0aW9uIH0gZnJvbSAnLi4vaGVscGVycy9uYXZpZ2F0aW9uJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uU3RhdHVzZXMsIFRyYW5zYWN0aW9uVHlwZXMsIHR5cGUgVHJhbnNhY3Rpb24sIHR5cGUgVHJhbnNhY3Rpb25zQWNjb3VudCB9IGZyb20gJy4uL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQgeyBCYXNlU2NyYXBlcldpdGhCcm93c2VyLCBMb2dpblJlc3VsdHMsIHR5cGUgUG9zc2libGVMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuXG5jb25zdCBMT0dJTl9VUkwgPSAnaHR0cHM6Ly9sb2dpbi55YWhhdi5jby5pbC9sb2dpbi8nO1xuY29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly9kaWdpdGFsLnlhaGF2LmNvLmlsL0JhTkNTRGlnaXRhbFVJL2FwcC9pbmRleC5odG1sIy8nO1xuY29uc3QgSU5WQUxJRF9ERVRBSUxTX1NFTEVDVE9SID0gJy51aS1kaWFsb2ctYnV0dG9ucyc7XG5jb25zdCBDSEFOR0VfUEFTU1dPUkRfT0xEX1BBU1MgPSAnaW5wdXQjZWZfcmVxX3BhcmFtZXRlcl9vbGRfY3JlZGVudGlhbCc7XG5jb25zdCBCQVNFX1dFTENPTUVfVVJMID0gYCR7QkFTRV9VUkx9bWFpbi9ob21lYDtcblxuY29uc3QgQUNDT1VOVF9JRF9TRUxFQ1RPUiA9ICdzcGFuLnBvcnRmb2xpby12YWx1ZVtuZy1pZj1cIm1haW5Db250cm9sbGVyLmRhdGEucG9ydGZvbGlvTGlzdC5sZW5ndGggPT09IDFcIl0nO1xuY29uc3QgQUNDT1VOVF9ERVRBSUxTX1NFTEVDVE9SID0gJy5hY2NvdW50LWRldGFpbHMnO1xuY29uc3QgREFURV9GT1JNQVQgPSAnREQvTU0vWVlZWSc7XG5cbmNvbnN0IFVTRVJfRUxFTSA9ICcjdXNlcm5hbWUnO1xuY29uc3QgUEFTU1dEX0VMRU0gPSAnI3Bhc3N3b3JkJztcbmNvbnN0IE5BVElPTkFMSURfRUxFTSA9ICcjcGlubm8nO1xuY29uc3QgU1VCTUlUX0xPR0lOX1NFTEVDVE9SID0gJy5idG4nO1xuXG5pbnRlcmZhY2UgU2NyYXBlZFRyYW5zYWN0aW9uIHtcbiAgY3JlZGl0OiBzdHJpbmc7XG4gIGRlYml0OiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZztcbiAgcmVmZXJlbmNlPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBtZW1vOiBzdHJpbmc7XG4gIHN0YXR1czogVHJhbnNhY3Rpb25TdGF0dXNlcztcbn1cblxuZnVuY3Rpb24gZ2V0UG9zc2libGVMb2dpblJlc3VsdHMocGFnZTogUGFnZSk6IFBvc3NpYmxlTG9naW5SZXN1bHRzIHtcbiAgLy8gY2hlY2tvdXQgZmlsZSBgYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3Nlci50c2AgZm9yIGF2YWlsYWJsZSByZXN1bHQgdHlwZXNcbiAgY29uc3QgdXJsczogUG9zc2libGVMb2dpblJlc3VsdHMgPSB7fTtcbiAgdXJsc1tMb2dpblJlc3VsdHMuU3VjY2Vzc10gPSBbYCR7QkFTRV9XRUxDT01FX1VSTH1gXTtcbiAgdXJsc1tMb2dpblJlc3VsdHMuSW52YWxpZFBhc3N3b3JkXSA9IFtcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudFByZXNlbnRPblBhZ2UocGFnZSwgYCR7SU5WQUxJRF9ERVRBSUxTX1NFTEVDVE9SfWApO1xuICAgIH0sXG4gIF07XG5cbiAgdXJsc1tMb2dpblJlc3VsdHMuQ2hhbmdlUGFzc3dvcmRdID0gW1xuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIHJldHVybiBlbGVtZW50UHJlc2VudE9uUGFnZShwYWdlLCBgJHtDSEFOR0VfUEFTU1dPUkRfT0xEX1BBU1N9YCk7XG4gICAgfSxcbiAgXTtcblxuICByZXR1cm4gdXJscztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QWNjb3VudElEKHBhZ2U6IFBhZ2UpOiBQcm9taXNlPHN0cmluZz4ge1xuICB0cnkge1xuICAgIGNvbnN0IHNlbGVjdGVkU25pZkFjY291bnQgPSBhd2FpdCBwYWdlLiRldmFsKEFDQ09VTlRfSURfU0VMRUNUT1IsIChlbGVtZW50OiBFbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudC50ZXh0Q29udGVudCBhcyBzdHJpbmc7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VsZWN0ZWRTbmlmQWNjb3VudDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEZhaWxlZCB0byByZXRyaWV2ZSBhY2NvdW50IElELiBQb3NzaWJsZSBvdXRkYXRlZCBzZWxlY3RvciAnJHtBQ0NPVU5UX0lEX1NFTEVDVE9SfTogJHtlcnJvck1lc3NhZ2V9YCxcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFtb3VudERhdGEoYW1vdW50U3RyOiBzdHJpbmcpIHtcbiAgY29uc3QgYW1vdW50U3RyQ29weSA9IGFtb3VudFN0ci5yZXBsYWNlKCcsJywgJycpO1xuICByZXR1cm4gcGFyc2VGbG9hdChhbW91bnRTdHJDb3B5KTtcbn1cblxuZnVuY3Rpb24gZ2V0VHhuQW1vdW50KHR4bjogU2NyYXBlZFRyYW5zYWN0aW9uKSB7XG4gIGNvbnN0IGNyZWRpdCA9IGdldEFtb3VudERhdGEodHhuLmNyZWRpdCk7XG4gIGNvbnN0IGRlYml0ID0gZ2V0QW1vdW50RGF0YSh0eG4uZGViaXQpO1xuICByZXR1cm4gKE51bWJlci5pc05hTihjcmVkaXQpID8gMCA6IGNyZWRpdCkgLSAoTnVtYmVyLmlzTmFOKGRlYml0KSA/IDAgOiBkZWJpdCk7XG59XG5cbnR5cGUgVHJhbnNhY3Rpb25zVHIgPSB7IGlkOiBzdHJpbmc7IGlubmVyRGl2czogc3RyaW5nW10gfTtcblxuZnVuY3Rpb24gY29udmVydFRyYW5zYWN0aW9ucyh0eG5zOiBTY3JhcGVkVHJhbnNhY3Rpb25bXSk6IFRyYW5zYWN0aW9uW10ge1xuICByZXR1cm4gdHhucy5tYXAodHhuID0+IHtcbiAgICBjb25zdCBjb252ZXJ0ZWREYXRlID0gbW9tZW50KHR4bi5kYXRlLCBEQVRFX0ZPUk1BVCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zdCBjb252ZXJ0ZWRBbW91bnQgPSBnZXRUeG5BbW91bnQodHhuKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlcy5Ob3JtYWwsXG4gICAgICBpZGVudGlmaWVyOiB0eG4ucmVmZXJlbmNlID8gcGFyc2VJbnQodHhuLnJlZmVyZW5jZSwgMTApIDogdW5kZWZpbmVkLFxuICAgICAgZGF0ZTogY29udmVydGVkRGF0ZSxcbiAgICAgIHByb2Nlc3NlZERhdGU6IGNvbnZlcnRlZERhdGUsXG4gICAgICBvcmlnaW5hbEFtb3VudDogY29udmVydGVkQW1vdW50LFxuICAgICAgb3JpZ2luYWxDdXJyZW5jeTogU0hFS0VMX0NVUlJFTkNZLFxuICAgICAgY2hhcmdlZEFtb3VudDogY29udmVydGVkQW1vdW50LFxuICAgICAgc3RhdHVzOiB0eG4uc3RhdHVzLFxuICAgICAgZGVzY3JpcHRpb246IHR4bi5kZXNjcmlwdGlvbixcbiAgICAgIG1lbW86IHR4bi5tZW1vLFxuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVUcmFuc2FjdGlvblJvdyh0eG5zOiBTY3JhcGVkVHJhbnNhY3Rpb25bXSwgdHhuUm93OiBUcmFuc2FjdGlvbnNUcikge1xuICBjb25zdCBkaXYgPSB0eG5Sb3cuaW5uZXJEaXZzO1xuXG4gIC8vIFJlbW92ZSBhbnl0aGluZyBleGNlcHQgZGlnaXRzLlxuICBjb25zdCByZWdleCA9IC9cXEQrL2dtO1xuXG4gIGNvbnN0IHR4OiBTY3JhcGVkVHJhbnNhY3Rpb24gPSB7XG4gICAgZGF0ZTogZGl2WzFdLFxuICAgIHJlZmVyZW5jZTogZGl2WzJdLnJlcGxhY2UocmVnZXgsICcnKSxcbiAgICBtZW1vOiAnJyxcbiAgICBkZXNjcmlwdGlvbjogZGl2WzNdLFxuICAgIGRlYml0OiBkaXZbNF0sXG4gICAgY3JlZGl0OiBkaXZbNV0sXG4gICAgc3RhdHVzOiBUcmFuc2FjdGlvblN0YXR1c2VzLkNvbXBsZXRlZCxcbiAgfTtcblxuICB0eG5zLnB1c2godHgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBY2NvdW50VHJhbnNhY3Rpb25zKHBhZ2U6IFBhZ2UpOiBQcm9taXNlPFRyYW5zYWN0aW9uW10+IHtcbiAgLy8gV2FpdCBmb3IgdHJhbnNhY3Rpb25zLlxuICBhd2FpdCB3YWl0VW50aWxFbGVtZW50Rm91bmQocGFnZSwgJy51bmRlci1saW5lLXR4bi10YWJsZS1oZWFkZXInLCB0cnVlKTtcblxuICBjb25zdCB0eG5zOiBTY3JhcGVkVHJhbnNhY3Rpb25bXSA9IFtdO1xuICBjb25zdCB0cmFuc2FjdGlvbnNEaXZzID0gYXdhaXQgcGFnZUV2YWxBbGw8VHJhbnNhY3Rpb25zVHJbXT4oXG4gICAgcGFnZSxcbiAgICAnLmxpc3QtaXRlbS1ob2xkZXIgLmVudGlyZS1jb250ZW50LWN0cicsXG4gICAgW10sXG4gICAgZGl2cyA9PiB7XG4gICAgICByZXR1cm4gKGRpdnMgYXMgSFRNTEVsZW1lbnRbXSkubWFwKGRpdiA9PiAoe1xuICAgICAgICBpZDogZGl2LmdldEF0dHJpYnV0ZSgnaWQnKSB8fCAnJyxcbiAgICAgICAgaW5uZXJEaXZzOiBBcnJheS5mcm9tKGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2JykpLm1hcChlbCA9PiAoZWwgYXMgSFRNTEVsZW1lbnQpLmlubmVyVGV4dCksXG4gICAgICB9KSk7XG4gICAgfSxcbiAgKTtcblxuICBmb3IgKGNvbnN0IHR4blJvdyBvZiB0cmFuc2FjdGlvbnNEaXZzKSB7XG4gICAgaGFuZGxlVHJhbnNhY3Rpb25Sb3codHhucywgdHhuUm93KTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0VHJhbnNhY3Rpb25zKHR4bnMpO1xufVxuXG4vLyBNYW5pcHVsYXRlIHRoZSBjYWxlbmRhciBkcm9wIGRvd24gdG8gY2hvb3NlIHRoZSB0eHMgc3RhcnQgZGF0ZS5cbmFzeW5jIGZ1bmN0aW9uIHNlYXJjaEJ5RGF0ZXMocGFnZTogUGFnZSwgc3RhcnREYXRlOiBNb21lbnQpIHtcbiAgLy8gR2V0IHRoZSBkYXkgbnVtYmVyIGZyb20gc3RhcnREYXRlLiAxLTMxICh1c3VhbGx5IDEpXG4gIGNvbnN0IHN0YXJ0RGF0ZURheSA9IHN0YXJ0RGF0ZS5mb3JtYXQoJ0QnKTtcbiAgY29uc3Qgc3RhcnREYXRlTW9udGggPSBzdGFydERhdGUuZm9ybWF0KCdNJyk7XG4gIGNvbnN0IHN0YXJ0RGF0ZVllYXIgPSBzdGFydERhdGUuZm9ybWF0KCdZJyk7XG5cbiAgLy8gT3BlbiB0aGUgY2FsZW5kYXIgZGF0ZSBwaWNrZXJcbiAgY29uc3QgZGF0ZUZyb21QaWNrID1cbiAgICAnZGl2LmRhdGUtb3B0aW9ucy1jZWxsOm50aC1jaGlsZCg3KSA+IGRhdGUtcGlja2VyOm50aC1jaGlsZCgxKSA+IGRpdjpudGgtY2hpbGQoMSkgPiBzcGFuOm50aC1jaGlsZCgyKSc7XG4gIGF3YWl0IHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCBkYXRlRnJvbVBpY2ssIHRydWUpO1xuICBhd2FpdCBjbGlja0J1dHRvbihwYWdlLCBkYXRlRnJvbVBpY2spO1xuXG4gIC8vIFdhaXQgdW50aWwgZmlyc3QgZGF5IGFwcGVhci5cbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsICcucG11LWRheXMgPiBkaXY6bnRoLWNoaWxkKDEpJywgdHJ1ZSk7XG5cbiAgLy8gT3BlbiBNb250aHMgb3B0aW9ucy5cbiAgY29uc3QgbW9udGhGcm9tUGljayA9ICcucG11LW1vbnRoJztcbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsIG1vbnRoRnJvbVBpY2ssIHRydWUpO1xuICBhd2FpdCBjbGlja0J1dHRvbihwYWdlLCBtb250aEZyb21QaWNrKTtcbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsICcucG11LW1vbnRocyA+IGRpdjpudGgtY2hpbGQoMSknLCB0cnVlKTtcblxuICAvLyBPcGVuIFllYXIgb3B0aW9ucy5cbiAgLy8gVXNlIHNhbWUgc2VsZWN0b3IuLi4gWWFoYXYga25vd3Mgd2h5Li4uXG4gIGF3YWl0IHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCBtb250aEZyb21QaWNrLCB0cnVlKTtcbiAgYXdhaXQgY2xpY2tCdXR0b24ocGFnZSwgbW9udGhGcm9tUGljayk7XG4gIGF3YWl0IHdhaXRVbnRpbEVsZW1lbnRGb3VuZChwYWdlLCAnLnBtdS15ZWFycyA+IGRpdjpudGgtY2hpbGQoMSknLCB0cnVlKTtcblxuICAvLyBTZWxlY3QgeWVhciBmcm9tIGEgMTIgeWVhciBncmlkLlxuICBmb3IgKGxldCBpID0gMTsgaSA8IDEzOyBpICs9IDEpIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAucG11LXllYXJzID4gZGl2Om50aC1jaGlsZCgke2l9KWA7XG4gICAgY29uc3QgeWVhciA9IGF3YWl0IHBhZ2UuJGV2YWwoc2VsZWN0b3IsIHkgPT4ge1xuICAgICAgcmV0dXJuICh5IGFzIEhUTUxFbGVtZW50KS5pbm5lclRleHQ7XG4gICAgfSk7XG4gICAgaWYgKHN0YXJ0RGF0ZVllYXIgPT09IHllYXIpIHtcbiAgICAgIGF3YWl0IGNsaWNrQnV0dG9uKHBhZ2UsIHNlbGVjdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNlbGVjdCBNb250aC5cbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsICcucG11LW1vbnRocyA+IGRpdjpudGgtY2hpbGQoMSknLCB0cnVlKTtcbiAgLy8gVGhlIGZpcnN0IGVsZW1lbnQgKDEpIGlzIEphbnVhcnkuXG4gIGNvbnN0IG1vbnRoU2VsZWN0b3IgPSBgLnBtdS1tb250aHMgPiBkaXY6bnRoLWNoaWxkKCR7c3RhcnREYXRlTW9udGh9KWA7XG4gIGF3YWl0IGNsaWNrQnV0dG9uKHBhZ2UsIG1vbnRoU2VsZWN0b3IpO1xuXG4gIC8vIFNlbGVjdCBEYXkuXG4gIC8vIFRoZSBjYWxlbmRhciBncmlkIHNob3dzIDcgZGF5cyBhbmQgNiB3ZWVrcyA9IDQyIGRheXMuXG4gIC8vIEluIHRoZW9yeSwgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGggd2lsbCBiZSBpbiB0aGUgZmlyc3Qgcm93LlxuICAvLyBMZXQncyBjaGVjayBldmVyeXRoaW5nIGp1c3QgaW4gY2FzZS4uLlxuICBmb3IgKGxldCBpID0gMTsgaSA8IDQyOyBpICs9IDEpIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAucG11LWRheXMgPiBkaXY6bnRoLWNoaWxkKCR7aX0pYDtcbiAgICBjb25zdCBkYXkgPSBhd2FpdCBwYWdlLiRldmFsKHNlbGVjdG9yLCBkID0+IHtcbiAgICAgIHJldHVybiAoZCBhcyBIVE1MRWxlbWVudCkuaW5uZXJUZXh0O1xuICAgIH0pO1xuXG4gICAgaWYgKHN0YXJ0RGF0ZURheSA9PT0gZGF5KSB7XG4gICAgICBhd2FpdCBjbGlja0J1dHRvbihwYWdlLCBzZWxlY3Rvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hBY2NvdW50RGF0YShwYWdlOiBQYWdlLCBzdGFydERhdGU6IE1vbWVudCwgYWNjb3VudElEOiBzdHJpbmcpOiBQcm9taXNlPFRyYW5zYWN0aW9uc0FjY291bnQ+IHtcbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudERpc2FwcGVhcihwYWdlLCAnLmxvYWRpbmctYmFyLXNwaW5uZXInKTtcbiAgYXdhaXQgc2VhcmNoQnlEYXRlcyhwYWdlLCBzdGFydERhdGUpO1xuICBhd2FpdCB3YWl0VW50aWxFbGVtZW50RGlzYXBwZWFyKHBhZ2UsICcubG9hZGluZy1iYXItc3Bpbm5lcicpO1xuICBjb25zdCB0eG5zID0gYXdhaXQgZ2V0QWNjb3VudFRyYW5zYWN0aW9ucyhwYWdlKTtcblxuICByZXR1cm4ge1xuICAgIGFjY291bnROdW1iZXI6IGFjY291bnRJRCxcbiAgICB0eG5zLFxuICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaEFjY291bnRzKHBhZ2U6IFBhZ2UsIHN0YXJ0RGF0ZTogTW9tZW50KTogUHJvbWlzZTxUcmFuc2FjdGlvbnNBY2NvdW50W10+IHtcbiAgY29uc3QgYWNjb3VudHM6IFRyYW5zYWN0aW9uc0FjY291bnRbXSA9IFtdO1xuXG4gIC8vIFRPRE86IGdldCBtb3JlIGFjY291bnRzLiBOb3Qgc3VyZSBpcyBzdXBwb3J0ZWQuXG4gIGNvbnN0IGFjY291bnRJRCA9IGF3YWl0IGdldEFjY291bnRJRChwYWdlKTtcbiAgY29uc3QgYWNjb3VudERhdGEgPSBhd2FpdCBmZXRjaEFjY291bnREYXRhKHBhZ2UsIHN0YXJ0RGF0ZSwgYWNjb3VudElEKTtcbiAgYWNjb3VudHMucHVzaChhY2NvdW50RGF0YSk7XG5cbiAgcmV0dXJuIGFjY291bnRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiB3YWl0UmVhZGluZXNzRm9yQWxsKHBhZ2U6IFBhZ2UpIHtcbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsIGAke1VTRVJfRUxFTX1gLCB0cnVlKTtcbiAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEZvdW5kKHBhZ2UsIGAke1BBU1NXRF9FTEVNfWAsIHRydWUpO1xuICBhd2FpdCB3YWl0VW50aWxFbGVtZW50Rm91bmQocGFnZSwgYCR7TkFUSU9OQUxJRF9FTEVNfWAsIHRydWUpO1xuICBhd2FpdCB3YWl0VW50aWxFbGVtZW50Rm91bmQocGFnZSwgYCR7U1VCTUlUX0xPR0lOX1NFTEVDVE9SfWAsIHRydWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWRpcmVjdE9yRGlhbG9nKHBhZ2U6IFBhZ2UpIHtcbiAgLy8gQ2xpY2sgb24gYmFuayBtZXNzYWdlcyBpZiBhbnkuXG4gIGF3YWl0IHdhaXRGb3JOYXZpZ2F0aW9uKHBhZ2UpO1xuICBhd2FpdCB3YWl0VW50aWxFbGVtZW50RGlzYXBwZWFyKHBhZ2UsICcubG9hZGluZy1iYXItc3Bpbm5lcicpO1xuICBjb25zdCBoYXNNZXNzYWdlID0gYXdhaXQgZWxlbWVudFByZXNlbnRPblBhZ2UocGFnZSwgJy5tZXNzYWdpbmctbGlua3MtY29udGFpbmVyJyk7XG4gIGlmIChoYXNNZXNzYWdlKSB7XG4gICAgYXdhaXQgY2xpY2tCdXR0b24ocGFnZSwgJy5saW5rLTEnKTtcbiAgfVxuXG4gIGNvbnN0IHByb21pc2UxID0gcGFnZS53YWl0Rm9yU2VsZWN0b3IoQUNDT1VOVF9ERVRBSUxTX1NFTEVDVE9SLCB7IHRpbWVvdXQ6IDMwMDAwIH0pO1xuICBjb25zdCBwcm9taXNlMiA9IHBhZ2Uud2FpdEZvclNlbGVjdG9yKENIQU5HRV9QQVNTV09SRF9PTERfUEFTUywgeyB0aW1lb3V0OiAzMDAwMCB9KTtcbiAgY29uc3QgcHJvbWlzZXMgPSBbcHJvbWlzZTEsIHByb21pc2UyXTtcblxuICBhd2FpdCBQcm9taXNlLnJhY2UocHJvbWlzZXMpO1xuICBhd2FpdCB3YWl0VW50aWxFbGVtZW50RGlzYXBwZWFyKHBhZ2UsICcubG9hZGluZy1iYXItc3Bpbm5lcicpO1xufVxuXG50eXBlIFNjcmFwZXJTcGVjaWZpY0NyZWRlbnRpYWxzID0geyB1c2VybmFtZTogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nOyBuYXRpb25hbElEOiBzdHJpbmcgfTtcblxuY2xhc3MgWWFoYXZTY3JhcGVyIGV4dGVuZHMgQmFzZVNjcmFwZXJXaXRoQnJvd3NlcjxTY3JhcGVyU3BlY2lmaWNDcmVkZW50aWFscz4ge1xuICBnZXRMb2dpbk9wdGlvbnMoY3JlZGVudGlhbHM6IFNjcmFwZXJTcGVjaWZpY0NyZWRlbnRpYWxzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvZ2luVXJsOiBgJHtMT0dJTl9VUkx9YCxcbiAgICAgIGZpZWxkczogW1xuICAgICAgICB7IHNlbGVjdG9yOiBgJHtVU0VSX0VMRU19YCwgdmFsdWU6IGNyZWRlbnRpYWxzLnVzZXJuYW1lIH0sXG4gICAgICAgIHsgc2VsZWN0b3I6IGAke1BBU1NXRF9FTEVNfWAsIHZhbHVlOiBjcmVkZW50aWFscy5wYXNzd29yZCB9LFxuICAgICAgICB7IHNlbGVjdG9yOiBgJHtOQVRJT05BTElEX0VMRU19YCwgdmFsdWU6IGNyZWRlbnRpYWxzLm5hdGlvbmFsSUQgfSxcbiAgICAgIF0sXG4gICAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogYCR7U1VCTUlUX0xPR0lOX1NFTEVDVE9SfWAsXG4gICAgICBjaGVja1JlYWRpbmVzczogYXN5bmMgKCkgPT4gd2FpdFJlYWRpbmVzc0ZvckFsbCh0aGlzLnBhZ2UpLFxuICAgICAgcG9zdEFjdGlvbjogYXN5bmMgKCkgPT4gcmVkaXJlY3RPckRpYWxvZyh0aGlzLnBhZ2UpLFxuICAgICAgcG9zc2libGVSZXN1bHRzOiBnZXRQb3NzaWJsZUxvZ2luUmVzdWx0cyh0aGlzLnBhZ2UpLFxuICAgIH07XG4gIH1cblxuICBhc3luYyBmZXRjaERhdGEoKSB7XG4gICAgLy8gR290byBzdGF0ZW1lbnRzIHBhZ2VcbiAgICBhd2FpdCB3YWl0VW50aWxFbGVtZW50Rm91bmQodGhpcy5wYWdlLCBBQ0NPVU5UX0RFVEFJTFNfU0VMRUNUT1IsIHRydWUpO1xuICAgIGF3YWl0IGNsaWNrQnV0dG9uKHRoaXMucGFnZSwgQUNDT1VOVF9ERVRBSUxTX1NFTEVDVE9SKTtcbiAgICBhd2FpdCB3YWl0VW50aWxFbGVtZW50Rm91bmQodGhpcy5wYWdlLCAnLnN0YXRlbWVudC1vcHRpb25zIC5zZWxlY3RlZC1pdGVtLXRvcCcsIHRydWUpO1xuXG4gICAgY29uc3QgZGVmYXVsdFN0YXJ0TW9tZW50ID0gbW9tZW50KCkuc3VidHJhY3QoMywgJ21vbnRocycpLmFkZCgxLCAnZGF5Jyk7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gdGhpcy5vcHRpb25zLnN0YXJ0RGF0ZSB8fCBkZWZhdWx0U3RhcnRNb21lbnQudG9EYXRlKCk7XG4gICAgY29uc3Qgc3RhcnRNb21lbnQgPSBtb21lbnQubWF4KGRlZmF1bHRTdGFydE1vbWVudCwgbW9tZW50KHN0YXJ0RGF0ZSkpO1xuXG4gICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBmZXRjaEFjY291bnRzKHRoaXMucGFnZSwgc3RhcnRNb21lbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBhY2NvdW50cyxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFlhaGF2U2NyYXBlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFB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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.test.js b/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.test.js
index 745ccd7..52210d8 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.test.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/yahav.test.js
@@ -1,10 +1,17 @@
 "use strict";
 
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.string.trim.js");
 var _yahav = _interopRequireDefault(require("./yahav"));
 var _testsUtils = require("../tests/tests-utils");
 var _definitions = require("../definitions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COMPANY_ID = 'yahav'; // TODO this property should be hard-coded in the provider
 const testsConfig = (0, _testsUtils.getTestsConfig)();
 describe('Yahav scraper', () => {
@@ -18,10 +25,9 @@ describe('Yahav scraper', () => {
     expect(_definitions.SCRAPERS.yahav.loginFields).toContain('nationalID');
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _yahav.default(options);
     const result = await scraper.scrape({
       username: 'e10s12',
@@ -33,10 +39,9 @@ describe('Yahav scraper', () => {
     expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
   });
   (0, _testsUtils.maybeTestCompanyAPI)(COMPANY_ID)('should scrape transactions"', async () => {
-    const options = {
-      ...testsConfig.options,
+    const options = _objectSpread(_objectSpread({}, testsConfig.options), {}, {
       companyId: COMPANY_ID
-    };
+    });
     const scraper = new _yahav.default(options);
     const result = await scraper.scrape(testsConfig.credentials.yahav);
     expect(result).toBeDefined();
@@ -46,4 +51,4 @@ describe('Yahav scraper', () => {
     (0, _testsUtils.exportTransactions)(COMPANY_ID, result.accounts || []);
   });
 });
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfeWFoYXYiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90ZXN0c1V0aWxzIiwiX2RlZmluaXRpb25zIiwiX2Jhc2VTY3JhcGVyV2l0aEJyb3dzZXIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJDT01QQU5ZX0lEIiwidGVzdHNDb25maWciLCJnZXRUZXN0c0NvbmZpZyIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiZXh0ZW5kQXN5bmNUaW1lb3V0IiwidGVzdCIsImV4cGVjdCIsIlNDUkFQRVJTIiwieWFoYXYiLCJ0b0JlRGVmaW5lZCIsImxvZ2luRmllbGRzIiwidG9Db250YWluIiwibWF5YmVUZXN0Q29tcGFueUFQSSIsImNvbmZpZyIsImNvbXBhbnlBUEkiLCJpbnZhbGlkUGFzc3dvcmQiLCJvcHRpb25zIiwiY29tcGFueUlkIiwic2NyYXBlciIsIllhaGF2U2NyYXBlciIsInJlc3VsdCIsInNjcmFwZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJuYXRpb25hbElEIiwic3VjY2VzcyIsInRvQmVGYWxzeSIsImVycm9yVHlwZSIsInRvQmUiLCJMb2dpblJlc3VsdHMiLCJJbnZhbGlkUGFzc3dvcmQiLCJjcmVkZW50aWFscyIsImVycm9yIiwiZXJyb3JNZXNzYWdlIiwidHJpbSIsInRvQmVUcnV0aHkiLCJleHBvcnRUcmFuc2FjdGlvbnMiLCJhY2NvdW50cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy95YWhhdi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBZYWhhdlNjcmFwZXIgZnJvbSAnLi95YWhhdic7XG5pbXBvcnQgeyBtYXliZVRlc3RDb21wYW55QVBJLCBleHRlbmRBc3luY1RpbWVvdXQsIGdldFRlc3RzQ29uZmlnLCBleHBvcnRUcmFuc2FjdGlvbnMgfSBmcm9tICcuLi90ZXN0cy90ZXN0cy11dGlscyc7XG5pbXBvcnQgeyBTQ1JBUEVSUyB9IGZyb20gJy4uL2RlZmluaXRpb25zJztcbmltcG9ydCB7IExvZ2luUmVzdWx0cyB9IGZyb20gJy4vYmFzZS1zY3JhcGVyLXdpdGgtYnJvd3Nlcic7XG5cbmNvbnN0IENPTVBBTllfSUQgPSAneWFoYXYnOyAvLyBUT0RPIHRoaXMgcHJvcGVydHkgc2hvdWxkIGJlIGhhcmQtY29kZWQgaW4gdGhlIHByb3ZpZGVyXG5jb25zdCB0ZXN0c0NvbmZpZyA9IGdldFRlc3RzQ29uZmlnKCk7XG5cbmRlc2NyaWJlKCdZYWhhdiBzY3JhcGVyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGV4dGVuZEFzeW5jVGltZW91dCgpOyAvLyBUaGUgZGVmYXVsdCB0aW1lb3V0IGlzIDUgc2Vjb25kcyBwZXIgYXN5bmMgdGVzdCwgdGhpcyBmdW5jdGlvbiBleHRlbmRzIHRoZSB0aW1lb3V0IHZhbHVlXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBleHBvc2UgbG9naW4gZmllbGRzIGluIHNjcmFwZXJzIGNvbnN0YW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChTQ1JBUEVSUy55YWhhdikudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU0NSQVBFUlMueWFoYXYubG9naW5GaWVsZHMpLnRvQ29udGFpbigndXNlcm5hbWUnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMueWFoYXYubG9naW5GaWVsZHMpLnRvQ29udGFpbigncGFzc3dvcmQnKTtcbiAgICBleHBlY3QoU0NSQVBFUlMueWFoYXYubG9naW5GaWVsZHMpLnRvQ29udGFpbignbmF0aW9uYWxJRCcpO1xuICB9KTtcblxuICBtYXliZVRlc3RDb21wYW55QVBJKENPTVBBTllfSUQsIGNvbmZpZyA9PiBjb25maWcuY29tcGFueUFQSS5pbnZhbGlkUGFzc3dvcmQpKFxuICAgICdzaG91bGQgZmFpbCBvbiBpbnZhbGlkIHVzZXIvcGFzc3dvcmRcIicsXG4gICAgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgICAgY29tcGFueUlkOiBDT01QQU5ZX0lELFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc2NyYXBlciA9IG5ldyBZYWhhdlNjcmFwZXIob3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlKHsgdXNlcm5hbWU6ICdlMTBzMTInLCBwYXNzd29yZDogJzNmM3NzM2QnLCBuYXRpb25hbElEOiAnMTIzNDU2NzknIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlRmFsc3koKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JUeXBlKS50b0JlKExvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmQpO1xuICAgIH0sXG4gICk7XG5cbiAgbWF5YmVUZXN0Q29tcGFueUFQSShDT01QQU5ZX0lEKSgnc2hvdWxkIHNjcmFwZSB0cmFuc2FjdGlvbnNcIicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgLi4udGVzdHNDb25maWcub3B0aW9ucyxcbiAgICAgIGNvbXBhbnlJZDogQ09NUEFOWV9JRCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2NyYXBlciA9IG5ldyBZYWhhdlNjcmFwZXIob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NyYXBlci5zY3JhcGUodGVzdHNDb25maWcuY3JlZGVudGlhbHMueWFoYXYpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgZXJyb3IgPSBgJHtyZXN1bHQuZXJyb3JUeXBlIHx8ICcnfSAke3Jlc3VsdC5lcnJvck1lc3NhZ2UgfHwgJyd9YC50cmltKCk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlKCcnKTtcbiAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmVUcnV0aHkoKTtcblxuICAgIGV4cG9ydFRyYW5zYWN0aW9ucyhDT01QQU5ZX0lELCByZXN1bHQuYWNjb3VudHMgfHwgW10pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLHVCQUFBLEdBQUFILE9BQUE7QUFBMkQsU0FBQUQsdUJBQUFLLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFFM0QsTUFBTUcsVUFBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDO0FBQzVCLE1BQU1DLFdBQVcsR0FBRyxJQUFBQywwQkFBYyxFQUFDLENBQUM7QUFFcENDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsTUFBTTtFQUM5QkMsU0FBUyxDQUFDLE1BQU07SUFDZCxJQUFBQyw4QkFBa0IsRUFBQyxDQUFDLENBQUMsQ0FBQztFQUN4QixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLGlEQUFpRCxFQUFFLE1BQU07SUFDNURDLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsS0FBSyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BDSCxNQUFNLENBQUNDLHFCQUFRLENBQUNDLEtBQUssQ0FBQ0UsV0FBVyxDQUFDLENBQUNDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDeERMLE1BQU0sQ0FBQ0MscUJBQVEsQ0FBQ0MsS0FBSyxDQUFDRSxXQUFXLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUN4REwsTUFBTSxDQUFDQyxxQkFBUSxDQUFDQyxLQUFLLENBQUNFLFdBQVcsQ0FBQyxDQUFDQyxTQUFTLENBQUMsWUFBWSxDQUFDO0VBQzVELENBQUMsQ0FBQztFQUVGLElBQUFDLCtCQUFtQixFQUFDYixVQUFVLEVBQUVjLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxVQUFVLENBQUNDLGVBQWUsQ0FBQyxDQUMxRSx1Q0FBdUMsRUFDdkMsWUFBWTtJQUNWLE1BQU1DLE9BQU8sR0FBRztNQUNkLEdBQUdoQixXQUFXLENBQUNnQixPQUFPO01BQ3RCQyxTQUFTLEVBQUVsQjtJQUNiLENBQUM7SUFFRCxNQUFNbUIsT0FBTyxHQUFHLElBQUlDLGNBQVksQ0FBQ0gsT0FBTyxDQUFDO0lBRXpDLE1BQU1JLE1BQU0sR0FBRyxNQUFNRixPQUFPLENBQUNHLE1BQU0sQ0FBQztNQUFFQyxRQUFRLEVBQUUsUUFBUTtNQUFFQyxRQUFRLEVBQUUsU0FBUztNQUFFQyxVQUFVLEVBQUU7SUFBVyxDQUFDLENBQUM7SUFFeEdsQixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDWCxXQUFXLENBQUMsQ0FBQztJQUM1QkgsTUFBTSxDQUFDYyxNQUFNLENBQUNLLE9BQU8sQ0FBQyxDQUFDQyxTQUFTLENBQUMsQ0FBQztJQUNsQ3BCLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDTyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDQyxvQ0FBWSxDQUFDQyxlQUFlLENBQUM7RUFDN0QsQ0FDRixDQUFDO0VBRUQsSUFBQWxCLCtCQUFtQixFQUFDYixVQUFVLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxZQUFZO0lBQ3pFLE1BQU1pQixPQUFPLEdBQUc7TUFDZCxHQUFHaEIsV0FBVyxDQUFDZ0IsT0FBTztNQUN0QkMsU0FBUyxFQUFFbEI7SUFDYixDQUFDO0lBRUQsTUFBTW1CLE9BQU8sR0FBRyxJQUFJQyxjQUFZLENBQUNILE9BQU8sQ0FBQztJQUN6QyxNQUFNSSxNQUFNLEdBQUcsTUFBTUYsT0FBTyxDQUFDRyxNQUFNLENBQUNyQixXQUFXLENBQUMrQixXQUFXLENBQUN2QixLQUFLLENBQUM7SUFDbEVGLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDLENBQUNYLFdBQVcsQ0FBQyxDQUFDO0lBQzVCLE1BQU11QixLQUFLLEdBQUcsR0FBR1osTUFBTSxDQUFDTyxTQUFTLElBQUksRUFBRSxJQUFJUCxNQUFNLENBQUNhLFlBQVksSUFBSSxFQUFFLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDN0U1QixNQUFNLENBQUMwQixLQUFLLENBQUMsQ0FBQ0osSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUN0QnRCLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDSyxPQUFPLENBQUMsQ0FBQ1UsVUFBVSxDQUFDLENBQUM7SUFFbkMsSUFBQUMsOEJBQWtCLEVBQUNyQyxVQUFVLEVBQUVxQixNQUFNLENBQUNpQixRQUFRLElBQUksRUFBRSxDQUFDO0VBQ3ZELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
