diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
index e90eea7..97b02b1 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.d.ts
@@ -3,4 +3,6 @@ export declare function fetchGet<TResult>(url: string, extraHeaders: Record<stri
 export declare function fetchPost(url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<any>;
 export declare function fetchGraphql<TResult>(url: string, query: string, variables?: Record<string, unknown>, extraHeaders?: Record<string, any>): Promise<TResult>;
 export declare function fetchGetWithinPage<TResult>(page: Page, url: string): Promise<TResult | null>;
+export declare function safeFetchGetWithinPage<T>(page: Page, url: string): Promise<T | null>;
 export declare function fetchPostWithinPage<TResult>(page: Page, url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<TResult | null>;
+export declare function safeFetchPostWithinPage<T>(page: Page, url: string, data: Record<string, any>, extraHeaders?: Record<string, any>): Promise<T | null>;
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
index 843eadb..ae3c1d5 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
@@ -8,12 +8,21 @@ exports.fetchGetWithinPage = fetchGetWithinPage;
 exports.fetchGraphql = fetchGraphql;
 exports.fetchPost = fetchPost;
 exports.fetchPostWithinPage = fetchPostWithinPage;
+exports.safeFetchGetWithinPage = safeFetchGetWithinPage;
+exports.safeFetchPostWithinPage = safeFetchPostWithinPage;
+require("core-js/modules/es.promise.js");
 var _nodeFetch = _interopRequireDefault(require("node-fetch"));
+var _waiting = require("./waiting");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const JSON_CONTENT_TYPE = 'application/json';
 function getJsonHeaders() {
   return {
-    Accept: JSON_CONTENT_TYPE,
+    'Accept': JSON_CONTENT_TYPE,
     'Content-Type': JSON_CONTENT_TYPE
   };
 }
@@ -35,22 +44,20 @@ async function fetchGet(url, extraHeaders) {
 async function fetchPost(url, data, extraHeaders = {}) {
   const request = {
     method: 'POST',
-    headers: {
-      ...getJsonHeaders(),
-      ...extraHeaders
-    },
+    headers: _objectSpread(_objectSpread({}, getJsonHeaders()), extraHeaders),
     body: JSON.stringify(data)
   };
   const result = await (0, _nodeFetch.default)(url, request);
   return result.json();
 }
 async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
+  var _result$errors;
   const result = await fetchPost(url, {
     operationName: null,
     query,
     variables
   }, extraHeaders);
-  if (result.errors?.length) {
+  if ((_result$errors = result.errors) !== null && _result$errors !== void 0 && _result$errors.length) {
     throw new Error(result.errors[0].message);
   }
   return result.data;
@@ -72,6 +79,19 @@ function fetchGetWithinPage(page, url) {
     });
   }, url);
 }
+async function safeFetchGetWithinPage(page, url) {
+  try {
+    await (0, _waiting.randomSleep)(2, 3);
+    return await fetchGetWithinPage(page, url);
+  } catch (error) {
+    const errorMessage = error instanceof Error ? error.message : String(error);
+    if (errorMessage.includes('Block Automation') || errorMessage.includes('Unexpected token')) {
+      throw new Error(`Automation blocked. Server returned: ${errorMessage}`);
+    }
+    // Re-throw other errors immediately
+    throw error;
+  }
+}
 function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
   return page.evaluate((innerUrl, innerData, innerExtraHeaders) => {
     return new Promise((resolve, reject) => {
@@ -96,4 +116,17 @@ function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
     });
   }, url, data, extraHeaders);
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+async function safeFetchPostWithinPage(page, url, data, extraHeaders = {}) {
+  try {
+    await (0, _waiting.randomSleep)(1, 2);
+    return await fetchPostWithinPage(page, url, data, extraHeaders);
+  } catch (error) {
+    const errorMessage = error instanceof Error ? error.message : String(error);
+    if (errorMessage.includes('Block Automation') || errorMessage.includes('Unexpected token')) {
+      throw new Error(`Automation blocked. Server returned: ${errorMessage}`);
+    }
+    // Re-throw other errors immediately
+    throw error;
+  }
+}
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
index 929b45d..206f867 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.d.ts
@@ -8,3 +8,4 @@ export declare function waitUntil<T>(asyncTest: () => Promise<T>, description?:
 export declare function raceTimeout(ms: number, promise: Promise<any>): Promise<any>;
 export declare function runSerial<T>(actions: (() => Promise<T>)[]): Promise<T[]>;
 export declare function sleep(ms: number): Promise<unknown>;
+export declare function randomSleep(minSeconds?: number, maxSeconds?: number): Promise<unknown>;
diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
index b81b663..8cd2140 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/waiting.js
@@ -5,9 +5,12 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.TimeoutError = exports.SECOND = void 0;
 exports.raceTimeout = raceTimeout;
+exports.randomSleep = randomSleep;
 exports.runSerial = runSerial;
 exports.sleep = sleep;
 exports.waitUntil = waitUntil;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
 class TimeoutError extends Error {}
 exports.TimeoutError = TimeoutError;
 const SECOND = exports.SECOND = 1000;
@@ -55,4 +58,8 @@ function runSerial(actions) {
 function sleep(ms) {
   return new Promise(resolve => setTimeout(resolve, ms));
 }
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3dhaXRpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjb25zdCBTRUNPTkQgPSAxMDAwO1xuXG5mdW5jdGlvbiB0aW1lb3V0UHJvbWlzZTxUPihtczogbnVtYmVyLCBwcm9taXNlOiBQcm9taXNlPFQ+LCBkZXNjcmlwdGlvbjogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBUaW1lb3V0RXJyb3IoZGVzY3JpcHRpb24pO1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9LCBtcyk7XG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgIHByb21pc2UsXG4gICAgLy8gY2FzdGluZyB0byBhdm9pZCB0eXBlIGVycm9yLSBzYWZlIHNpbmNlIHRoaXMgcHJvbWlzZSB3aWxsIGFsd2F5cyByZWplY3RcbiAgICB0aW1lb3V0IGFzIFByb21pc2U8VD4sXG4gIF0pO1xufVxuXG4vKipcbiAqIFdhaXQgdW50aWwgYSBwcm9taXNlIHJlc29sdmVzIHdpdGggYSB0cnV0aHkgdmFsdWUgb3IgcmVqZWN0IGFmdGVyIGEgdGltZW91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2FpdFVudGlsPFQ+KGFzeW5jVGVzdDogKCkgPT4gUHJvbWlzZTxUPiwgZGVzY3JpcHRpb24gPSAnJywgdGltZW91dCA9IDEwMDAwLCBpbnRlcnZhbCA9IDEwMCkge1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICBhc3luY1Rlc3QoKVxuICAgICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCh3YWl0LCBpbnRlcnZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgd2FpdCgpO1xuICB9KTtcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKHRpbWVvdXQsIHByb21pc2UsIGRlc2NyaXB0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2VUaW1lb3V0KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8YW55Pikge1xuICByZXR1cm4gdGltZW91dFByb21pc2UobXMsIHByb21pc2UsICd0aW1lb3V0JykuY2F0Y2goZXJyID0+IHtcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3IpKSB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2VyaWFsPFQ+KGFjdGlvbnM6ICgoKSA9PiBQcm9taXNlPFQ+KVtdKTogUHJvbWlzZTxUW10+IHtcbiAgcmV0dXJuIGFjdGlvbnMucmVkdWNlKChtLCBhKSA9PiBtLnRoZW4oYXN5bmMgeCA9PiBbLi4ueCwgYXdhaXQgYSgpXSksIFByb21pc2UucmVzb2x2ZTxUW10+KG5ldyBBcnJheTxUPigpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFPLE1BQU1BLFlBQVksU0FBU0MsS0FBSyxDQUFDO0FBQUVDLE9BQUEsQ0FBQUYsWUFBQSxHQUFBQSxZQUFBO0FBRW5DLE1BQU1HLE1BQU0sR0FBQUQsT0FBQSxDQUFBQyxNQUFBLEdBQUcsSUFBSTtBQUUxQixTQUFTQyxjQUFjQSxDQUFJQyxFQUFVLEVBQUVDLE9BQW1CLEVBQUVDLFdBQW1CLEVBQWM7RUFDM0YsTUFBTUMsT0FBTyxHQUFHLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxDQUFDLEVBQUVDLE1BQU0sS0FBSztJQUN6QyxNQUFNQyxFQUFFLEdBQUdDLFVBQVUsQ0FBQyxNQUFNO01BQzFCQyxZQUFZLENBQUNGLEVBQUUsQ0FBQztNQUNoQixNQUFNRyxLQUFLLEdBQUcsSUFBSWYsWUFBWSxDQUFDTyxXQUFXLENBQUM7TUFDM0NJLE1BQU0sQ0FBQ0ksS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFFVixFQUFFLENBQUM7RUFDUixDQUFDLENBQUM7RUFFRixPQUFPSSxPQUFPLENBQUNPLElBQUksQ0FBQyxDQUNsQlYsT0FBTztFQUNQO0VBQ0FFLE9BQU8sQ0FDUixDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ08sU0FBU1MsU0FBU0EsQ0FBSUMsU0FBMkIsRUFBRVgsV0FBVyxHQUFHLEVBQUUsRUFBRUMsT0FBTyxHQUFHLEtBQUssRUFBRVcsUUFBUSxHQUFHLEdBQUcsRUFBRTtFQUMzRyxNQUFNYixPQUFPLEdBQUcsSUFBSUcsT0FBTyxDQUFJLENBQUNXLE9BQU8sRUFBRVQsTUFBTSxLQUFLO0lBQ2xELFNBQVNVLElBQUlBLENBQUEsRUFBRztNQUNkSCxTQUFTLENBQUMsQ0FBQyxDQUNSSSxJQUFJLENBQUNDLEtBQUssSUFBSTtRQUNiLElBQUlBLEtBQUssRUFBRTtVQUNUSCxPQUFPLENBQUNHLEtBQUssQ0FBQztRQUNoQixDQUFDLE1BQU07VUFDTFYsVUFBVSxDQUFDUSxJQUFJLEVBQUVGLFFBQVEsQ0FBQztRQUM1QjtNQUNGLENBQUMsQ0FBQyxDQUNESyxLQUFLLENBQUMsTUFBTTtRQUNYYixNQUFNLENBQUMsQ0FBQztNQUNWLENBQUMsQ0FBQztJQUNOO0lBQ0FVLElBQUksQ0FBQyxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBQ0YsT0FBT2pCLGNBQWMsQ0FBQ0ksT0FBTyxFQUFFRixPQUFPLEVBQUVDLFdBQVcsQ0FBQztBQUN0RDtBQUVPLFNBQVNrQixXQUFXQSxDQUFDcEIsRUFBVSxFQUFFQyxPQUFxQixFQUFFO0VBQzdELE9BQU9GLGNBQWMsQ0FBQ0MsRUFBRSxFQUFFQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUNrQixLQUFLLENBQUNFLEdBQUcsSUFBSTtJQUN6RCxJQUFJLEVBQUVBLEdBQUcsWUFBWTFCLFlBQVksQ0FBQyxFQUFFLE1BQU0wQixHQUFHO0VBQy9DLENBQUMsQ0FBQztBQUNKO0FBRU8sU0FBU0MsU0FBU0EsQ0FBSUMsT0FBNkIsRUFBZ0I7RUFDeEUsT0FBT0EsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtELENBQUMsQ0FBQ1IsSUFBSSxDQUFDLE1BQU1VLENBQUMsSUFBSSxDQUFDLEdBQUdBLENBQUMsRUFBRSxNQUFNRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRXRCLE9BQU8sQ0FBQ1csT0FBTyxDQUFNLElBQUlhLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBQztBQUM3RztBQUVPLFNBQVNDLEtBQUtBLENBQUM3QixFQUFVLEVBQUU7RUFDaEMsT0FBTyxJQUFJSSxPQUFPLENBQUNXLE9BQU8sSUFBSVAsVUFBVSxDQUFDTyxPQUFPLEVBQUVmLEVBQUUsQ0FBQyxDQUFDO0FBQ3hEIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
+function randomSleep(minSeconds = 1, maxSeconds = 2) {
+  const ms = Math.floor((Math.random() * (maxSeconds - minSeconds) + minSeconds) * 1000);
+  return sleep(ms);
+}
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCIsInJhbmRvbVNsZWVwIiwibWluU2Vjb25kcyIsIm1heFNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy93YWl0aW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cbn1cblxuZXhwb3J0IGNvbnN0IFNFQ09ORCA9IDEwMDA7XG5cbmZ1bmN0aW9uIHRpbWVvdXRQcm9taXNlPFQ+KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8VD4sIGRlc2NyaXB0aW9uOiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgdGltZW91dCA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IFRpbWVvdXRFcnJvcihkZXNjcmlwdGlvbik7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0sIG1zKTtcbiAgfSk7XG5cbiAgcmV0dXJuIFByb21pc2UucmFjZShbXG4gICAgcHJvbWlzZSxcbiAgICAvLyBjYXN0aW5nIHRvIGF2b2lkIHR5cGUgZXJyb3ItIHNhZmUgc2luY2UgdGhpcyBwcm9taXNlIHdpbGwgYWx3YXlzIHJlamVjdFxuICAgIHRpbWVvdXQgYXMgUHJvbWlzZTxUPixcbiAgXSk7XG59XG5cbi8qKlxuICogV2FpdCB1bnRpbCBhIHByb21pc2UgcmVzb2x2ZXMgd2l0aCBhIHRydXRoeSB2YWx1ZSBvciByZWplY3QgYWZ0ZXIgYSB0aW1lb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWw8VD4oYXN5bmNUZXN0OiAoKSA9PiBQcm9taXNlPFQ+LCBkZXNjcmlwdGlvbiA9ICcnLCB0aW1lb3V0ID0gMTAwMDAsIGludGVydmFsID0gMTAwKSB7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnVuY3Rpb24gd2FpdCgpIHtcbiAgICAgIGFzeW5jVGVzdCgpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQod2FpdCwgaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHdhaXQoKTtcbiAgfSk7XG4gIHJldHVybiB0aW1lb3V0UHJvbWlzZSh0aW1lb3V0LCBwcm9taXNlLCBkZXNjcmlwdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYWNlVGltZW91dChtczogbnVtYmVyLCBwcm9taXNlOiBQcm9taXNlPGFueT4pIHtcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKG1zLCBwcm9taXNlLCAndGltZW91dCcpLmNhdGNoKChlcnIpID0+IHtcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3IpKSB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2VyaWFsPFQ+KGFjdGlvbnM6ICgoKSA9PiBQcm9taXNlPFQ+KVtdKTogUHJvbWlzZTxUW10+IHtcbiAgcmV0dXJuIGFjdGlvbnMucmVkdWNlKChtLCBhKSA9PiBtLnRoZW4oYXN5bmMgKHgpID0+IFsuLi54LCBhd2FpdCBhKCldKSwgUHJvbWlzZS5yZXNvbHZlPFRbXT4obmV3IEFycmF5PFQ+KCkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21TbGVlcChtaW5TZWNvbmRzOiBudW1iZXIgPSAxLCBtYXhTZWNvbmRzOiBudW1iZXIgPSAyKSB7XG4gIGNvbnN0IG1zID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIChtYXhTZWNvbmRzIC0gbWluU2Vjb25kcykgKyBtaW5TZWNvbmRzKSAqIDEwMDApO1xuICByZXR1cm4gc2xlZXAobXMpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsWUFBWSxTQUFTQyxLQUFLLENBQUM7QUFFdkNDLE9BQUEsQ0FBQUYsWUFBQSxHQUFBQSxZQUFBO0FBRU0sTUFBTUcsTUFBTSxHQUFBRCxPQUFBLENBQUFDLE1BQUEsR0FBRyxJQUFJO0FBRTFCLFNBQVNDLGNBQWNBLENBQUlDLEVBQVUsRUFBRUMsT0FBbUIsRUFBRUMsV0FBbUIsRUFBYztFQUMzRixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUNDLENBQUMsRUFBRUMsTUFBTSxLQUFLO0lBQ3pDLE1BQU1DLEVBQUUsR0FBR0MsVUFBVSxDQUFDLE1BQU07TUFDMUJDLFlBQVksQ0FBQ0YsRUFBRSxDQUFDO01BQ2hCLE1BQU1HLEtBQUssR0FBRyxJQUFJZixZQUFZLENBQUNPLFdBQVcsQ0FBQztNQUMzQ0ksTUFBTSxDQUFDSSxLQUFLLENBQUM7SUFDZixDQUFDLEVBQUVWLEVBQUUsQ0FBQztFQUNSLENBQUMsQ0FBQztFQUVGLE9BQU9JLE9BQU8sQ0FBQ08sSUFBSSxDQUFDLENBQ2xCVixPQUFPO0VBQ1A7RUFDQUUsT0FBTyxDQUNSLENBQUM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDTyxTQUFTUyxTQUFTQSxDQUFJQyxTQUEyQixFQUFFWCxXQUFXLEdBQUcsRUFBRSxFQUFFQyxPQUFPLEdBQUcsS0FBSyxFQUFFVyxRQUFRLEdBQUcsR0FBRyxFQUFFO0VBQzNHLE1BQU1iLE9BQU8sR0FBRyxJQUFJRyxPQUFPLENBQUksQ0FBQ1csT0FBTyxFQUFFVCxNQUFNLEtBQUs7SUFDbEQsU0FBU1UsSUFBSUEsQ0FBQSxFQUFHO01BQ2RILFNBQVMsQ0FBQyxDQUFDLENBQUNJLElBQUksQ0FBRUMsS0FBSyxJQUFLO1FBQzFCLElBQUlBLEtBQUssRUFBRTtVQUNUSCxPQUFPLENBQUNHLEtBQUssQ0FBQztRQUNoQixDQUFDLE1BQU07VUFDTFYsVUFBVSxDQUFDUSxJQUFJLEVBQUVGLFFBQVEsQ0FBQztRQUM1QjtNQUNGLENBQUMsQ0FBQyxDQUFDSyxLQUFLLENBQUMsTUFBTTtRQUNiYixNQUFNLENBQUMsQ0FBQztNQUNWLENBQUMsQ0FBQztJQUNKO0lBQ0FVLElBQUksQ0FBQyxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBQ0YsT0FBT2pCLGNBQWMsQ0FBQ0ksT0FBTyxFQUFFRixPQUFPLEVBQUVDLFdBQVcsQ0FBQztBQUN0RDtBQUVPLFNBQVNrQixXQUFXQSxDQUFDcEIsRUFBVSxFQUFFQyxPQUFxQixFQUFFO0VBQzdELE9BQU9GLGNBQWMsQ0FBQ0MsRUFBRSxFQUFFQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUNrQixLQUFLLENBQUVFLEdBQUcsSUFBSztJQUMzRCxJQUFJLEVBQUVBLEdBQUcsWUFBWTFCLFlBQVksQ0FBQyxFQUFFLE1BQU0wQixHQUFHO0VBQy9DLENBQUMsQ0FBQztBQUNKO0FBRU8sU0FBU0MsU0FBU0EsQ0FBSUMsT0FBNkIsRUFBZ0I7RUFDeEUsT0FBT0EsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtELENBQUMsQ0FBQ1IsSUFBSSxDQUFDLE1BQU9VLENBQUMsSUFBSyxDQUFDLEdBQUdBLENBQUMsRUFBRSxNQUFNRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRXRCLE9BQU8sQ0FBQ1csT0FBTyxDQUFNLElBQUlhLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBQztBQUMvRztBQUVPLFNBQVNDLEtBQUtBLENBQUM3QixFQUFVLEVBQUU7RUFDaEMsT0FBTyxJQUFJSSxPQUFPLENBQUVXLE9BQU8sSUFBS1AsVUFBVSxDQUFDTyxPQUFPLEVBQUVmLEVBQUUsQ0FBQyxDQUFDO0FBQzFEO0FBRU8sU0FBUzhCLFdBQVdBLENBQUNDLFVBQWtCLEdBQUcsQ0FBQyxFQUFFQyxVQUFrQixHQUFHLENBQUMsRUFBRTtFQUMxRSxNQUFNaEMsRUFBRSxHQUFHaUMsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLENBQUMsQ0FBQyxJQUFJSCxVQUFVLEdBQUdELFVBQVUsQ0FBQyxHQUFHQSxVQUFVLElBQUksSUFBSSxDQUFDO0VBQ3RGLE9BQU9GLEtBQUssQ0FBQzdCLEVBQUUsQ0FBQztBQUNsQiIsImlnbm9yZUxpc3QiOltdfQ==
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
index 8827ffc..07fbe58 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
@@ -4,6 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
+require("core-js/modules/es.array.iterator.js");
+require("core-js/modules/es.promise.js");
+require("core-js/modules/es.regexp.exec.js");
+require("core-js/modules/es.string.trim.js");
 var _buildUrl = _interopRequireDefault(require("build-url"));
 var _lodash = _interopRequireDefault(require("lodash"));
 var _moment = _interopRequireDefault(require("moment"));
@@ -17,8 +21,12 @@ var _waiting = require("../helpers/waiting");
 var _transactions2 = require("../transactions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 var _errors = require("./errors");
-var _browser = require("../helpers/browser");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
+function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
+function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
+function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
+function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
 const COUNTRY_CODE = '212';
 const ID_TYPE = '1';
 const INSTALLMENTS_KEYWORD = 'תשלום';
@@ -37,7 +45,7 @@ function getAccountsUrl(servicesUrl, monthMoment) {
 }
 async function fetchAccounts(page, servicesUrl, monthMoment) {
   const dataUrl = getAccountsUrl(servicesUrl, monthMoment);
-  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+  const dataResult = await (0, _fetch.safeFetchGetWithinPage)(page, dataUrl);
   if (dataResult && _lodash.default.get(dataResult, 'Header.Status') === '1' && dataResult.DashboardMonthBean) {
     const {
       cardsCharges
@@ -92,6 +100,7 @@ function getTransactionType(txn) {
 function convertTransactions(txns, processedDate) {
   const filteredTxns = txns.filter(txn => txn.dealSumType !== '1' && txn.voucherNumberRatz !== '000000000' && txn.voucherNumberRatzOutbound !== '000000000');
   return filteredTxns.map(txn => {
+    var _txn$currentPaymentCu;
     const isOutbound = txn.dealSumOutbound;
     const txnDateStr = isOutbound ? txn.fullPurchaseDateOutbound : txn.fullPurchaseDate;
     const txnMoment = (0, _moment.default)(txnDateStr, DATE_FORMAT);
@@ -102,7 +111,7 @@ function convertTransactions(txns, processedDate) {
       date: txnMoment.toISOString(),
       processedDate: currentProcessedDate,
       originalAmount: isOutbound ? -txn.dealSumOutbound : -txn.dealSum,
-      originalCurrency: convertCurrency(txn.currentPaymentCurrency ?? txn.currencyId),
+      originalCurrency: convertCurrency((_txn$currentPaymentCu = txn.currentPaymentCurrency) !== null && _txn$currentPaymentCu !== void 0 ? _txn$currentPaymentCu : txn.currencyId),
       chargedAmount: isOutbound ? -txn.paymentSumOutbound : -txn.paymentSum,
       chargedCurrency: convertCurrency(txn.currencyId),
       description: isOutbound ? txn.fullSupplierNameOutbound : txn.fullSupplierNameHeb,
@@ -113,15 +122,16 @@ function convertTransactions(txns, processedDate) {
     return result;
   });
 }
-async function fetchTransactions(page, options, companyServiceOptions, startMoment, monthMoment) {
-  const accounts = await fetchAccounts(page, companyServiceOptions.servicesUrl, monthMoment);
-  const dataUrl = getTransactionsUrl(companyServiceOptions.servicesUrl, monthMoment);
-  const dataResult = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+async function fetchTransactions(page, options, startMoment, monthMoment) {
+  const accounts = await fetchAccounts(page, options.servicesUrl, monthMoment);
+  const dataUrl = getTransactionsUrl(options.servicesUrl, monthMoment);
+  const dataResult = await (0, _fetch.safeFetchGetWithinPage)(page, dataUrl);
   if (dataResult && _lodash.default.get(dataResult, 'Header.Status') === '1' && dataResult.CardsTransactionsListBean) {
     const accountTxns = {};
     accounts.forEach(account => {
       const txnGroups = _lodash.default.get(dataResult, `CardsTransactionsListBean.Index${account.index}.CurrentCardTransactions`);
       if (txnGroups) {
+        var _options$outputData$e, _options$outputData;
         let allTxns = [];
         txnGroups.forEach(txnGroup => {
           if (txnGroup.txnIsrael) {
@@ -136,7 +146,7 @@ async function fetchTransactions(page, options, companyServiceOptions, startMome
         if (!options.combineInstallments) {
           allTxns = (0, _transactions.fixInstallments)(allTxns);
         }
-        if (options.outputData?.enableTransactionsFilterByDate ?? true) {
+        if ((_options$outputData$e = (_options$outputData = options.outputData) === null || _options$outputData === void 0 ? void 0 : _options$outputData.enableTransactionsFilterByDate) !== null && _options$outputData$e !== void 0 ? _options$outputData$e : true) {
           allTxns = (0, _transactions.filterOldTransactions)(allTxns, startMoment, options.combineInstallments || false);
         }
         accountTxns[account.accountNumber] = {
@@ -162,29 +172,27 @@ function getTransactionExtraDetails(servicesUrl, month, accountIndex, transactio
   });
 }
 async function getExtraScrapTransaction(page, options, month, accountIndex, transaction) {
+  var _$get;
   const dataUrl = getTransactionExtraDetails(options.servicesUrl, month, accountIndex, transaction);
-  const data = await (0, _fetch.fetchGetWithinPage)(page, dataUrl);
+  const data = await (0, _fetch.safeFetchGetWithinPage)(page, dataUrl);
   if (!data) {
     return transaction;
   }
-  const rawCategory = _lodash.default.get(data, 'PirteyIska_204Bean.sector') ?? '';
-  return {
-    ...transaction,
+  const rawCategory = (_$get = _lodash.default.get(data, 'PirteyIska_204Bean.sector')) !== null && _$get !== void 0 ? _$get : '';
+  return _objectSpread(_objectSpread({}, transaction), {}, {
     category: rawCategory.trim()
-  };
+  });
 }
 function getExtraScrapTransactions(accountWithIndex, page, options, month) {
   const promises = accountWithIndex.txns.map(t => getExtraScrapTransaction(page, options, month, accountWithIndex.index, t));
   return Promise.all(promises);
 }
 async function getExtraScrapAccount(page, options, accountMap, month) {
-  const promises = Object.keys(accountMap).map(async a => ({
-    ...accountMap[a],
+  const promises = Object.keys(accountMap).map(async a => _objectSpread(_objectSpread({}, accountMap[a]), {}, {
     txns: await getExtraScrapTransactions(accountMap[a], page, options, month)
   }));
   const accounts = await Promise.all(promises);
-  return accounts.reduce((m, x) => ({
-    ...m,
+  return accounts.reduce((m, x) => _objectSpread(_objectSpread({}, m), {}, {
     [x.accountNumber]: x
   }), {});
 }
@@ -192,13 +200,16 @@ function getExtraScrap(accountsWithIndex, page, options, allMonths) {
   const actions = accountsWithIndex.map((a, i) => () => getExtraScrapAccount(page, options, a, allMonths[i]));
   return (0, _waiting.runSerial)(actions);
 }
-async function fetchAllTransactions(page, options, companyServiceOptions, startMoment) {
-  const futureMonthsToScrape = options.futureMonthsToScrape ?? 1;
+async function fetchAllTransactions(page, options, startMoment) {
+  var _options$futureMonths;
+  const futureMonthsToScrape = (_options$futureMonths = options.futureMonthsToScrape) !== null && _options$futureMonths !== void 0 ? _options$futureMonths : 1;
   const allMonths = (0, _dates.default)(startMoment, futureMonthsToScrape);
-  const results = await Promise.all(allMonths.map(async monthMoment => {
-    return fetchTransactions(page, options, companyServiceOptions, startMoment, monthMoment);
-  }));
-  const finalResult = options.additionalTransactionInformation ? await getExtraScrap(results, page, companyServiceOptions, allMonths) : results;
+  const results = [];
+  for (const monthMoment of allMonths) {
+    const result = await fetchTransactions(page, options, startMoment, monthMoment);
+    results.push(result);
+  }
+  const finalResult = options.additionalTransactionInformation ? await getExtraScrap(results, page, options, allMonths) : results;
   const combinedTxns = {};
   finalResult.forEach(result => {
     Object.keys(result).forEach(accountNumber => {
@@ -225,6 +236,9 @@ async function fetchAllTransactions(page, options, companyServiceOptions, startM
 class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   constructor(options, baseUrl, companyCode) {
     super(options);
+    _defineProperty(this, "baseUrl", void 0);
+    _defineProperty(this, "companyCode", void 0);
+    _defineProperty(this, "servicesUrl", void 0);
     this.baseUrl = baseUrl;
     this.companyCode = companyCode;
     this.servicesUrl = `${baseUrl}/services/ProxyRequestHandler.ashx`;
@@ -234,12 +248,12 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     this.page.on('request', request => {
       if (request.url().includes('detector-dom.min.js')) {
         debug('force abort for request do download detector-dom.min.js resource');
-        void request.abort(undefined, _browser.interceptionPriorities.abort);
+        void request.abort();
       } else {
-        void request.continue(undefined, _browser.interceptionPriorities.continue);
+        void request.continue();
       }
     });
-    await (0, _browser.maskHeadlessUserAgent)(this.page);
+    debug('navigate to login page');
     await this.navigateTo(`${this.baseUrl}/personalarea/Login`);
     this.emitProgress(_definitions.ScraperProgressTypes.LoggingIn);
     const validateUrl = `${this.servicesUrl}?reqName=ValidateIdData`;
@@ -251,7 +265,7 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
       checkLevel: '1',
       companyCode: this.companyCode
     };
-    const validateResult = await (0, _fetch.fetchPostWithinPage)(this.page, validateUrl, validateRequest);
+    const validateResult = await (0, _fetch.safeFetchPostWithinPage)(this.page, validateUrl, validateRequest);
     if (!validateResult || !validateResult.Header || validateResult.Header.Status !== '1' || !validateResult.ValidateIdDataBean) {
       throw new Error('unknown error during login');
     }
@@ -270,8 +284,8 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
         countryCode: COUNTRY_CODE,
         idType: ID_TYPE
       };
-      const loginResult = await (0, _fetch.fetchPostWithinPage)(this.page, loginUrl, request);
-      debug(`user login with status '${loginResult?.status}'`);
+      const loginResult = await (0, _fetch.safeFetchPostWithinPage)(this.page, loginUrl, request);
+      debug(`user login with status '${loginResult === null || loginResult === void 0 ? void 0 : loginResult.status}'`);
       if (loginResult && loginResult.status === '1') {
         this.emitProgress(_definitions.ScraperProgressTypes.LoginSuccess);
         return {
@@ -308,11 +322,11 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
     const startDate = this.options.startDate || defaultStartMoment.toDate();
     const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
-    return fetchAllTransactions(this.page, this.options, {
+    return fetchAllTransactions(this.page, _objectSpread(_objectSpread({}, this.options), {}, {
       servicesUrl: this.servicesUrl,
       companyCode: this.companyCode
-    }, startMoment);
+    }), startMoment);
   }
 }
 var _default = exports.default = IsracardAmexBaseScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
