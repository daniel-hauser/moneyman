diff --git a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
index 843eadb..14c8482 100644
--- a/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
+++ b/node_modules/israeli-bank-scrapers/lib/helpers/fetch.js
@@ -56,23 +56,20 @@ async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
   return result.data;
 }
 function fetchGetWithinPage(page, url) {
-  return page.evaluate(innerUrl => {
-    return new Promise((resolve, reject) => {
-      fetch(innerUrl, {
-        credentials: 'include'
-      }).then(result => {
-        if (result.status === 204) {
-          resolve(null);
-        } else {
-          resolve(result.json());
-        }
-      }).catch(e => {
-        reject(e);
-      });
-    });
+  return page.evaluate(async innerUrl => {
+    let result;
+    try {
+      result = await fetch(innerUrl, { credentials: 'include' });
+      if (result.status === 204) {
+        return null;
+      }
+      return result.json();
+    } catch (e) {
+      throw new Error(`fetchGetWithinPage error: ${e}, url: ${innerUrl}, stack: ${e?.stack}, status: ${result?.status}`);
+    }
   }, url);
 }
-function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
+function fetchPostWithinPage(page, url, data, extraHeaders = {}, ignoreErrors = false) {
   return page.evaluate((innerUrl, innerData, innerExtraHeaders) => {
     return new Promise((resolve, reject) => {
       fetch(innerUrl, {
@@ -88,12 +85,22 @@ function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
           // No content response
           resolve(null);
         } else {
-          resolve(result.json());
+          resolve(result.text());
         }
       }).catch(e => {
         reject(e);
       });
     });
-  }, url, data, extraHeaders);
+  }, url, data, extraHeaders)
+  .then(result => {
+    try {
+      return JSON.parse(result);
+    } catch (e) {
+      if(ignoreErrors) {
+        return undefined;
+      }
+      throw new Error(`fetchPostWithinPage error: ${e}, url: ${url}, data: ${JSON.stringify(data)}, extraHeaders: ${JSON.stringify(extraHeaders)}, result: ${result}`);
+    }
+  });
 }
 //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZUZldGNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJKU09OX0NPTlRFTlRfVFlQRSIsImdldEpzb25IZWFkZXJzIiwiQWNjZXB0IiwiZmV0Y2hHZXQiLCJ1cmwiLCJleHRyYUhlYWRlcnMiLCJoZWFkZXJzIiwiT2JqZWN0IiwiYXNzaWduIiwicmVxdWVzdCIsIm1ldGhvZCIsImZldGNoUmVzdWx0Iiwibm9kZUZldGNoIiwic3RhdHVzIiwiRXJyb3IiLCJqc29uIiwiZmV0Y2hQb3N0IiwiZGF0YSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzdWx0IiwiZmV0Y2hHcmFwaHFsIiwicXVlcnkiLCJ2YXJpYWJsZXMiLCJvcGVyYXRpb25OYW1lIiwiZXJyb3JzIiwibGVuZ3RoIiwibWVzc2FnZSIsImZldGNoR2V0V2l0aGluUGFnZSIsInBhZ2UiLCJldmFsdWF0ZSIsImlubmVyVXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmZXRjaCIsImNyZWRlbnRpYWxzIiwidGhlbiIsImNhdGNoIiwiZmV0Y2hQb3N0V2l0aGluUGFnZSIsImlubmVyRGF0YSIsImlubmVyRXh0cmFIZWFkZXJzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvZmV0Y2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5vZGVGZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCB7IHR5cGUgUGFnZSB9IGZyb20gJ3B1cHBldGVlcic7XG5cbmNvbnN0IEpTT05fQ09OVEVOVF9UWVBFID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG5mdW5jdGlvbiBnZXRKc29uSGVhZGVycygpIHtcbiAgcmV0dXJuIHtcbiAgICBBY2NlcHQ6IEpTT05fQ09OVEVOVF9UWVBFLFxuICAgICdDb250ZW50LVR5cGUnOiBKU09OX0NPTlRFTlRfVFlQRSxcbiAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoR2V0PFRSZXN1bHQ+KHVybDogc3RyaW5nLCBleHRyYUhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPFRSZXN1bHQ+IHtcbiAgbGV0IGhlYWRlcnMgPSBnZXRKc29uSGVhZGVycygpO1xuICBpZiAoZXh0cmFIZWFkZXJzKSB7XG4gICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oaGVhZGVycywgZXh0cmFIZWFkZXJzKTtcbiAgfVxuICBjb25zdCByZXF1ZXN0ID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgaGVhZGVycyxcbiAgfTtcbiAgY29uc3QgZmV0Y2hSZXN1bHQgPSBhd2FpdCBub2RlRmV0Y2godXJsLCByZXF1ZXN0KTtcblxuICBpZiAoZmV0Y2hSZXN1bHQuc3RhdHVzICE9PSAyMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBpbnN0aXR1dGUgc2VydmVyIHJldHVybmVkIHdpdGggc3RhdHVzIGNvZGUgJHtmZXRjaFJlc3VsdC5zdGF0dXN9YCk7XG4gIH1cblxuICByZXR1cm4gZmV0Y2hSZXN1bHQuanNvbigpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hQb3N0KHVybDogc3RyaW5nLCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBleHRyYUhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fSkge1xuICBjb25zdCByZXF1ZXN0ID0ge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHsgLi4uZ2V0SnNvbkhlYWRlcnMoKSwgLi4uZXh0cmFIZWFkZXJzIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gIH07XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5vZGVGZXRjaCh1cmwsIHJlcXVlc3QpO1xuICByZXR1cm4gcmVzdWx0Lmpzb24oKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoR3JhcGhxbDxUUmVzdWx0PihcbiAgdXJsOiBzdHJpbmcsXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIHZhcmlhYmxlczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fSxcbiAgZXh0cmFIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge30sXG4pOiBQcm9taXNlPFRSZXN1bHQ+IHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZmV0Y2hQb3N0KHVybCwgeyBvcGVyYXRpb25OYW1lOiBudWxsLCBxdWVyeSwgdmFyaWFibGVzIH0sIGV4dHJhSGVhZGVycyk7XG4gIGlmIChyZXN1bHQuZXJyb3JzPy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yc1swXS5tZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmRhdGEgYXMgUHJvbWlzZTxUUmVzdWx0Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoR2V0V2l0aGluUGFnZTxUUmVzdWx0PihwYWdlOiBQYWdlLCB1cmw6IHN0cmluZyk6IFByb21pc2U8VFJlc3VsdCB8IG51bGw+IHtcbiAgcmV0dXJuIHBhZ2UuZXZhbHVhdGUoaW5uZXJVcmwgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxUUmVzdWx0IHwgbnVsbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZmV0Y2goaW5uZXJVcmwsIHtcbiAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgIH0pXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuanNvbigpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9LCB1cmwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hQb3N0V2l0aGluUGFnZTxUUmVzdWx0PihcbiAgcGFnZTogUGFnZSxcbiAgdXJsOiBzdHJpbmcsXG4gIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIGV4dHJhSGVhZGVyczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9LFxuKTogUHJvbWlzZTxUUmVzdWx0IHwgbnVsbD4ge1xuICByZXR1cm4gcGFnZS5ldmFsdWF0ZShcbiAgICAoaW5uZXJVcmw6IHN0cmluZywgaW5uZXJEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBpbm5lckV4dHJhSGVhZGVyczogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFRSZXN1bHQgfCBudWxsPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZldGNoKGlubmVyVXJsLCB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoaW5uZXJEYXRhKSxcbiAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItb2JqZWN0LXNwcmVhZFxuICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyB9LFxuICAgICAgICAgICAgaW5uZXJFeHRyYUhlYWRlcnMsXG4gICAgICAgICAgKSxcbiAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICAgICAgICAvLyBObyBjb250ZW50IHJlc3BvbnNlXG4gICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5qc29uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cmwsXG4gICAgZGF0YSxcbiAgICBleHRyYUhlYWRlcnMsXG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBbUMsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFHbkMsTUFBTUcsaUJBQWlCLEdBQUcsa0JBQWtCO0FBRTVDLFNBQVNDLGNBQWNBLENBQUEsRUFBRztFQUN4QixPQUFPO0lBQ0xDLE1BQU0sRUFBRUYsaUJBQWlCO0lBQ3pCLGNBQWMsRUFBRUE7RUFDbEIsQ0FBQztBQUNIO0FBRU8sZUFBZUcsUUFBUUEsQ0FBVUMsR0FBVyxFQUFFQyxZQUFpQyxFQUFvQjtFQUN4RyxJQUFJQyxPQUFPLEdBQUdMLGNBQWMsQ0FBQyxDQUFDO0VBQzlCLElBQUlJLFlBQVksRUFBRTtJQUNoQkMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0YsT0FBTyxFQUFFRCxZQUFZLENBQUM7RUFDaEQ7RUFDQSxNQUFNSSxPQUFPLEdBQUc7SUFDZEMsTUFBTSxFQUFFLEtBQUs7SUFDYko7RUFDRixDQUFDO0VBQ0QsTUFBTUssV0FBVyxHQUFHLE1BQU0sSUFBQUMsa0JBQVMsRUFBQ1IsR0FBRyxFQUFFSyxPQUFPLENBQUM7RUFFakQsSUFBSUUsV0FBVyxDQUFDRSxNQUFNLEtBQUssR0FBRyxFQUFFO0lBQzlCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLHVFQUF1RUgsV0FBVyxDQUFDRSxNQUFNLEVBQUUsQ0FBQztFQUM5RztFQUVBLE9BQU9GLFdBQVcsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7QUFDM0I7QUFFTyxlQUFlQyxTQUFTQSxDQUFDWixHQUFXLEVBQUVhLElBQXlCLEVBQUVaLFlBQWlDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDOUcsTUFBTUksT0FBTyxHQUFHO0lBQ2RDLE1BQU0sRUFBRSxNQUFNO0lBQ2RKLE9BQU8sRUFBRTtNQUFFLEdBQUdMLGNBQWMsQ0FBQyxDQUFDO01BQUUsR0FBR0k7SUFBYSxDQUFDO0lBQ2pEYSxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxJQUFJO0VBQzNCLENBQUM7RUFDRCxNQUFNSSxNQUFNLEdBQUcsTUFBTSxJQUFBVCxrQkFBUyxFQUFDUixHQUFHLEVBQUVLLE9BQU8sQ0FBQztFQUM1QyxPQUFPWSxNQUFNLENBQUNOLElBQUksQ0FBQyxDQUFDO0FBQ3RCO0FBRU8sZUFBZU8sWUFBWUEsQ0FDaENsQixHQUFXLEVBQ1htQixLQUFhLEVBQ2JDLFNBQWtDLEdBQUcsQ0FBQyxDQUFDLEVBQ3ZDbkIsWUFBaUMsR0FBRyxDQUFDLENBQUMsRUFDcEI7RUFDbEIsTUFBTWdCLE1BQU0sR0FBRyxNQUFNTCxTQUFTLENBQUNaLEdBQUcsRUFBRTtJQUFFcUIsYUFBYSxFQUFFLElBQUk7SUFBRUYsS0FBSztJQUFFQztFQUFVLENBQUMsRUFBRW5CLFlBQVksQ0FBQztFQUM1RixJQUFJZ0IsTUFBTSxDQUFDSyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtJQUN6QixNQUFNLElBQUliLEtBQUssQ0FBQ08sTUFBTSxDQUFDSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNFLE9BQU8sQ0FBQztFQUMzQztFQUNBLE9BQU9QLE1BQU0sQ0FBQ0osSUFBSTtBQUNwQjtBQUVPLFNBQVNZLGtCQUFrQkEsQ0FBVUMsSUFBVSxFQUFFMUIsR0FBVyxFQUEyQjtFQUM1RixPQUFPMEIsSUFBSSxDQUFDQyxRQUFRLENBQUNDLFFBQVEsSUFBSTtJQUMvQixPQUFPLElBQUlDLE9BQU8sQ0FBaUIsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7TUFDdERDLEtBQUssQ0FBQ0osUUFBUSxFQUFFO1FBQ2RLLFdBQVcsRUFBRTtNQUNmLENBQUMsQ0FBQyxDQUNDQyxJQUFJLENBQUNqQixNQUFNLElBQUk7UUFDZCxJQUFJQSxNQUFNLENBQUNSLE1BQU0sS0FBSyxHQUFHLEVBQUU7VUFDekJxQixPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2YsQ0FBQyxNQUFNO1VBQ0xBLE9BQU8sQ0FBQ2IsTUFBTSxDQUFDTixJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hCO01BQ0YsQ0FBQyxDQUFDLENBQ0R3QixLQUFLLENBQUMxQyxDQUFDLElBQUk7UUFDVnNDLE1BQU0sQ0FBQ3RDLENBQUMsQ0FBQztNQUNYLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRU8sR0FBRyxDQUFDO0FBQ1Q7QUFFTyxTQUFTb0MsbUJBQW1CQSxDQUNqQ1YsSUFBVSxFQUNWMUIsR0FBVyxFQUNYYSxJQUF5QixFQUN6QlosWUFBaUMsR0FBRyxDQUFDLENBQUMsRUFDYjtFQUN6QixPQUFPeUIsSUFBSSxDQUFDQyxRQUFRLENBQ2xCLENBQUNDLFFBQWdCLEVBQUVTLFNBQThCLEVBQUVDLGlCQUFzQyxLQUFLO0lBQzVGLE9BQU8sSUFBSVQsT0FBTyxDQUFpQixDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztNQUN0REMsS0FBSyxDQUFDSixRQUFRLEVBQUU7UUFDZHRCLE1BQU0sRUFBRSxNQUFNO1FBQ2RRLElBQUksRUFBRUMsSUFBSSxDQUFDQyxTQUFTLENBQUNxQixTQUFTLENBQUM7UUFDL0JKLFdBQVcsRUFBRSxTQUFTO1FBQ3RCO1FBQ0EvQixPQUFPLEVBQUVDLE1BQU0sQ0FBQ0MsTUFBTSxDQUNwQjtVQUFFLGNBQWMsRUFBRTtRQUFtRCxDQUFDLEVBQ3RFa0MsaUJBQ0Y7TUFDRixDQUFDLENBQUMsQ0FDQ0osSUFBSSxDQUFDakIsTUFBTSxJQUFJO1FBQ2QsSUFBSUEsTUFBTSxDQUFDUixNQUFNLEtBQUssR0FBRyxFQUFFO1VBQ3pCO1VBQ0FxQixPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2YsQ0FBQyxNQUFNO1VBQ0xBLE9BQU8sQ0FBQ2IsTUFBTSxDQUFDTixJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hCO01BQ0YsQ0FBQyxDQUFDLENBQ0R3QixLQUFLLENBQUMxQyxDQUFDLElBQUk7UUFDVnNDLE1BQU0sQ0FBQ3RDLENBQUMsQ0FBQztNQUNYLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNKLENBQUMsRUFDRE8sR0FBRyxFQUNIYSxJQUFJLEVBQ0paLFlBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
index 8827ffc..8b9220c 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-isracard-amex.js
@@ -241,6 +241,16 @@ class IsracardAmexBaseScraper extends _baseScraperWithBrowser.BaseScraperWithBro
     });
     await (0, _browser.maskHeadlessUserAgent)(this.page);
     await this.navigateTo(`${this.baseUrl}/personalarea/Login`);
+    try {
+      const initialPageTitle = await this.page.title();
+      debug("initial page title: ", initialPageTitle);
+      if (!initialPageTitle.includes('ישראכרט') && !initialPageTitle.includes('אמריקן אקספרס')) {
+        debug("waiting for page to load");
+        await this.page.waitForNavigation({ timeout: 60_000 });
+      }
+    } catch (error) {
+      debug("error while waiting for navigation: ", error);
+    }
     this.emitProgress(_definitions.ScraperProgressTypes.LoggingIn);
     const validateUrl = `${this.servicesUrl}?reqName=ValidateIdData`;
     const validateRequest = {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js b/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js
index 5784520..cadd1e5 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/hapoalim.js
@@ -80,7 +80,7 @@ async function fetchPoalimXSRFWithinPage(page, url, pageUuid) {
   headers.pageUuid = pageUuid;
   headers.uuid = (0, _uuid.v4)();
   headers['Content-Type'] = 'application/json;charset=UTF-8';
-  return (0, _fetch.fetchPostWithinPage)(page, url, [], headers);
+  return (0, _fetch.fetchPostWithinPage)(page, url, [], headers, true);
 }
 async function getExtraScrap(txnsResult, baseUrl, page, accountNumber) {
   const promises = txnsResult.transactions.map(async transaction => {
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js b/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js
index 9b988fd..7565bd6 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/mizrahi.js
@@ -12,7 +12,9 @@ var _navigation = require("../helpers/navigation");
 var _transactions = require("../transactions");
 var _baseScraperWithBrowser = require("./base-scraper-with-browser");
 var _errors = require("./errors");
+var _debug = require("../helpers/debug");
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+const debug = (0, _debug.getDebug)('mizrahi');
 const BASE_WEBSITE_URL = 'https://www.mizrahi-tefahot.co.il';
 const LOGIN_URL = `${BASE_WEBSITE_URL}/login/index.html#/auth-page-he`;
 const BASE_APP_URL = 'https://mto.mizrahi-tefahot.co.il';
@@ -22,6 +24,7 @@ const TRANSACTIONS_PAGE = '/osh/legacy/root-main-osh-p428New';
 const TRANSACTIONS_REQUEST_URLS = [`${BASE_APP_URL}/OnlinePilot/api/SkyOSH/get428Index`, `${BASE_APP_URL}/Online/api/SkyOSH/get428Index`];
 const PENDING_TRANSACTIONS_PAGE = '/osh/legacy/legacy-Osh-p420';
 const PENDING_TRANSACTIONS_IFRAME = 'p420.aspx';
+const MORE_DETAILS_URL = `${BASE_APP_URL}/Online/api/OSH/getMaherBerurimSMF`;
 const CHANGE_PASSWORD_URL = /https:\/\/www\.mizrahi-tefahot\.co\.il\/login\/index\.html#\/change-pass/;
 const DATE_FORMAT = 'DD/MM/YYYY';
 const MAX_ROWS_PER_REQUEST = 10000000000;
@@ -64,6 +67,44 @@ function getStartMoment(optionsStartDate) {
   const startDate = optionsStartDate || defaultStartMoment.toDate();
   return _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
 }
+async function getExtraTransactionDetails(page, item, apiHeaders) {
+  try {
+    debug('getExtraTransactionDetails for item:', item);
+    if (item.MC02ShowDetailsEZ === '1') {
+      const tarPeula = (0, _moment.default)(item.MC02PeulaTaaEZ);
+      const tarErech = (0, _moment.default)(item.MC02ErehTaaEZ);
+      const params = {
+        inKodGorem: item.MC02KodGoremEZ,
+        inAsmachta: item.MC02AsmahtaMekoritEZ,
+        inSchum: item.MC02SchumEZ,
+        inNakvanit: item.MC02KodGoremEZ,
+        inSugTnua: item.MC02SugTnuaKaspitEZ,
+        inAgid: item.MC02AgidEZ,
+        inTarPeulaFormatted: tarPeula.format(DATE_FORMAT),
+        inTarErechFormatted: (tarErech.year() > 2000 ? tarErech : tarPeula).format(DATE_FORMAT),
+        inKodNose: item.MC02SeifMaralEZ,
+        inKodTatNose: item.MC02NoseMaralEZ,
+        inTransactionNumber: item.TransactionNumber
+      };
+      const response = await (0, _fetch.fetchPostWithinPage)(page, MORE_DETAILS_URL, params, apiHeaders);
+      const details = response?.body.fields?.[0]?.[0]?.Records?.[0].Fields;
+      debug('fetch details for', params, 'details:', details);
+      if (Array.isArray(details) && details.length > 0) {
+        const entries = details.map(record => [record.Label.trim(), record.Value.trim()]);
+        return {
+          entries: Object.fromEntries(entries),
+          memo: entries.filter(([label]) => ['שם', 'מהות', 'חשבון'].some(key => label.startsWith(key))).map(([label, value]) => `${label} ${value}`).join(', ')
+        };
+      }
+    }
+  } catch (error) {
+    debug('Error fetching extra transaction details:', error);
+  }
+  return {
+    entries: {},
+    memo: undefined
+  };
+}
 function createDataFromRequest(request, optionsStartDate) {
   const data = JSON.parse(request.postData() || '{}');
   data.inFromDate = getStartMoment(optionsStartDate).format(DATE_FORMAT);
@@ -77,8 +118,9 @@ function createHeadersFromRequest(request) {
     'Content-Type': request.headers()['content-type']
   };
 }
-function convertTransactions(txns) {
-  return txns.map(row => {
+async function convertTransactions(txns, getMoreDetails) {
+  return Promise.all(txns.map(async row => {
+    const moreDetails = await getMoreDetails(row);
     const txnDate = (0, _moment.default)(row.MC02PeulaTaaEZ, _moment.default.HTML5_FMT.DATETIME_LOCAL_SECONDS).toISOString();
     return {
       type: _transactions.TransactionTypes.Normal,
@@ -89,9 +131,10 @@ function convertTransactions(txns) {
       originalCurrency: _constants.SHEKEL_CURRENCY,
       chargedAmount: row.MC02SchumEZ,
       description: row.MC02TnuaTeurEZ,
-      status: _transactions.TransactionStatuses.Completed
+      memo: moreDetails?.memo,
+      status: row.IsTodayTransaction ? _transactions.TransactionStatuses.Pending : _transactions.TransactionStatuses.Completed
     };
-  });
+  }));
 }
 async function extractPendingTransactions(page) {
   const pendingTxn = await (0, _elementsInteractions.pageEvalAll)(page, 'tr.rgRow', [], trs => {
@@ -171,17 +214,24 @@ class MizrahiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
     if (!accountNumber) {
       throw new Error('Account number not found');
     }
-    const response = await Promise.any(TRANSACTIONS_REQUEST_URLS.map(async url => {
+    const [response, apiHeaders] = await Promise.any(TRANSACTIONS_REQUEST_URLS.map(async url => {
       const request = await this.page.waitForRequest(url);
       const data = createDataFromRequest(request, this.options.startDate);
       const headers = createHeadersFromRequest(request);
-      return (0, _fetch.fetchPostWithinPage)(this.page, url, data, headers);
+      return [await (0, _fetch.fetchPostWithinPage)(this.page, url, data, headers), headers];
     }));
     if (!response || response.header.success === false) {
       throw new Error(`Error fetching transaction. Response message: ${response ? response.header.messages[0].text : ''}`);
     }
     const relevantRows = response.body.table.rows.filter(row => row.RecTypeSpecified);
-    const oshTxn = convertTransactions(relevantRows);
+    const oshTxn = await convertTransactions(relevantRows, this.options.additionalTransactionInformation ? row => getExtraTransactionDetails(this.page, row, apiHeaders) : () => Promise.resolve({
+      entries: {},
+      memo: undefined
+    }));
+
+    oshTxn.filter(tx => !tx.identifier).forEach(tx => {
+      tx.status = _transactions.TransactionStatuses.Pending;
+    });
 
     // workaround for a bug which the bank's API returns transactions before the requested start date
     const startMoment = getStartMoment(this.options.startDate);
@@ -196,4 +246,4 @@ class MizrahiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
   }
 }
 var _default = exports.default = MizrahiScraper;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
index f0256bc..e86c532 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/visa-cal.js
@@ -109,12 +109,8 @@ function convertParsedDataToTransactions(data, pendingData) {
       total: numOfPayments
     } : undefined;
     const date = (0, _moment.default)(transaction.trnPurchaseDate);
-    let chargedAmount = isPending(transaction) ? transaction.trnAmt * -1 : transaction.amtBeforeConvAndIndex * -1;
-    let originalAmount = transaction.trnAmt * -1;
-    if (transaction.trnTypeCode === TrnTypeCode.credit) {
-      chargedAmount = isPending(transaction) ? transaction.trnAmt : transaction.amtBeforeConvAndIndex;
-      originalAmount = transaction.trnAmt;
-    }
+    const chargedAmount = (isPending(transaction) ? transaction.trnAmt : transaction.amtBeforeConvAndIndex) * -1;
+    const originalAmount = transaction.trnAmt * (transaction.trnTypeCode === TrnTypeCode.credit ? 1 : -1);
     const result = {
       identifier: !isPending(transaction) ? transaction.trnIntId : undefined,
       type: [TrnTypeCode.regular, TrnTypeCode.standingOrder].includes(transaction.trnTypeCode) ? _transactions2.TransactionTypes.Normal : _transactions2.TransactionTypes.Installments,
@@ -240,7 +236,7 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
       const months = finalMonthToFetchMoment.diff(startMoment, 'months');
       const allMonthsData = [];
       debug(`fetch pending transactions for card ${card.cardUniqueId}`);
-      let pendingData = await (0, _fetch.fetchPostWithinPage)(this.page, PENDING_TRANSACTIONS_REQUEST_ENDPOINT, {
+      let pendingData = await (0, _fetch.fetchPost)(PENDING_TRANSACTIONS_REQUEST_ENDPOINT, {
         cardUniqueIDArray: [card.cardUniqueId]
       }, {
         Authorization,
@@ -250,7 +246,7 @@ class VisaCalScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
       debug(`fetch completed transactions for card ${card.cardUniqueId}`);
       for (let i = 0; i <= months; i += 1) {
         const month = finalMonthToFetchMoment.clone().subtract(i, 'months');
-        const monthData = await (0, _fetch.fetchPostWithinPage)(this.page, TRANSACTIONS_REQUEST_ENDPOINT, {
+        const monthData = await (0, _fetch.fetchPost)(TRANSACTIONS_REQUEST_ENDPOINT, {
           cardUniqueId: card.cardUniqueId,
           month: month.format('M'),
           year: month.format('YYYY')
