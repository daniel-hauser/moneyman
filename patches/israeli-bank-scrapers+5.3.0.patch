diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
index 1287e84..9f99cf9 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/base-scraper-with-browser.js
@@ -76,9 +76,7 @@ function createGeneralError() {
 class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
   constructor(...args) {
     super(...args);
-    // NOTICE - it is discouraged to use bang (!) in general. It is used here because
-    // all the classes that inherit from this base assume is it mandatory.
-    _defineProperty(this, "browser", void 0);
+    _defineProperty(this, "cleanups", []);
     // NOTICE - it is discouraged to use bang (!) in general. It is used here because
     // all the classes that inherit from this base assume is it mandatory.
     _defineProperty(this, "page", void 0);
@@ -89,51 +87,68 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
       height: VIEWPORT_HEIGHT
     };
   }
-  async initialize() {
-    await super.initialize();
-    debug('initialize scraper');
-    this.emitProgress(_definitions.ScraperProgressTypes.Initializing);
-    let env;
-    if (this.options.verbose) {
-      env = _objectSpread({
-        DEBUG: '*'
-      }, process.env);
+  async initializePage() {
+    debug('initialize browser page');
+    if ('browserContext' in this.options) {
+      debug('Using the browser context provided in options');
+      return this.options.browserContext.newPage();
     }
-    if (typeof this.options.browser !== 'undefined' && this.options.browser !== null) {
-      debug('use custom browser instance provided in options');
-      this.browser = this.options.browser;
-    } else {
-      const executablePath = this.options.executablePath || undefined;
-      const args = this.options.args || [];
+    if ('browser' in this.options) {
+      debug('Using the browser instance provided in options');
       const {
-        timeout
+        browser
       } = this.options;
-      const headless = !this.options.showBrowser;
-      debug(`launch a browser with headless mode = ${headless}`);
-      this.browser = await _puppeteer.default.launch({
-        env,
-        headless,
-        executablePath,
-        args,
-        timeout
-      });
+
+      /**
+       * For backward compatibility, we will close the browser even if we didn't create it
+       */
+      if (!this.options.skipCloseBrowser) {
+        this.cleanups.push(async () => {
+          debug('closing the browser');
+          await browser.close();
+        });
+      }
+      return browser.newPage();
     }
+    const {
+      timeout,
+      args,
+      executablePath,
+      showBrowser
+    } = this.options;
+    const headless = !showBrowser;
+    debug(`launch a browser with headless mode = ${headless}`);
+    const browser = await _puppeteer.default.launch({
+      env: this.options.verbose ? _objectSpread({
+        DEBUG: '*'
+      }, process.env) : undefined,
+      headless,
+      executablePath,
+      args,
+      timeout
+    });
+    this.cleanups.push(async () => {
+      debug('closing the browser');
+      await browser.close();
+    });
     if (this.options.prepareBrowser) {
       debug("execute 'prepareBrowser' interceptor provided in options");
-      await this.options.prepareBrowser(this.browser);
+      await this.options.prepareBrowser(browser);
     }
-    if (!this.browser) {
-      debug('failed to initiate a browser, exit');
+    debug('create a new browser page');
+    return browser.newPage();
+  }
+  async initialize() {
+    await super.initialize();
+    debug('initialize scraper');
+    this.emitProgress(_definitions.ScraperProgressTypes.Initializing);
+    const page = await this.initializePage();
+    if (!page) {
+      debug('failed to initiate a browser page, exit');
       return;
     }
-    const pages = await this.browser.pages();
-    if (pages.length) {
-      debug('browser has already pages open, use the first one');
-      [this.page] = pages;
-    } else {
-      debug('create a new browser page');
-      this.page = await this.browser.newPage();
-    }
+    this.page = page;
+    this.cleanups.push(() => page.close());
     if (this.options.defaultTimeout) {
       this.page.setDefaultTimeout(this.options.defaultTimeout);
     }
@@ -241,10 +256,8 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
         fullPage: true
       });
     }
-    if (!this.browser) {
-      return;
-    }
-    await this.browser.close();
+    await Promise.all(this.cleanups.reverse().map(cleanup => cleanup()));
+    this.cleanups = [];
   }
   handleLoginResult(loginResult) {
     switch (loginResult) {
@@ -273,4 +286,4 @@ class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
   }
 }
 exports.BaseScraperWithBrowser = BaseScraperWithBrowser;
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
index f871354..9278821 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/interface.d.ts
@@ -1,4 +1,4 @@
-import { type Browser, type Page } from 'puppeteer';
+import { type BrowserContext, type Browser, type Page } from 'puppeteer';
 import { type CompanyTypes, type ScraperProgressTypes } from '../definitions';
 import { type TransactionsAccount } from '../transactions';
 import { type ErrorResult, type ScraperErrorTypes } from './errors';
@@ -38,7 +38,7 @@ export interface FutureDebit {
     chargeDate?: string;
     bankAccountNumber?: string;
 }
-export interface ScraperOptions {
+export type ScraperOptions = ScraperBrowserOptions & {
     /**
      * The company you want to scrape
      */
@@ -51,28 +51,65 @@ export interface ScraperOptions {
      * the date to fetch transactions from (can't be before the minimum allowed time difference for the scraper)
      */
     startDate: Date;
-    /**
-     * shows the browser while scraping, good for debugging (default false)
-     */
-    showBrowser?: boolean;
     /**
      * scrape transactions to be processed X months in the future
      */
     futureMonthsToScrape?: number;
     /**
-     * option from init puppeteer browser instance outside the libary scope. you can get
-     * browser diretly from puppeteer via `puppeteer.launch()`
+     * if set to true, all installment transactions will be combine into the first one
+     */
+    combineInstallments?: boolean;
+    /**
+     * if set, store a screenshot if failed to scrape. Used for debug purposes
+     */
+    storeFailureScreenShotPath?: string;
+    /**
+     * if set, will set the timeout in milliseconds of puppeteer's `page.setDefaultTimeout`.
+     */
+    defaultTimeout?: number;
+    /**
+     * Options for manipulation of output data
+     */
+    outputData?: OutputDataOptions;
+    /**
+     * Perform additional operation for each transaction to get more information (Like category) about it.
+     * Please note: It will take more time to finish the process.
+     */
+    additionalTransactionInformation?: boolean;
+    /**
+     * adjust the page instance before it is being used.
+     *
+     * @param page
+     */
+    preparePage?: (page: Page) => Promise<void>;
+};
+type ScraperBrowserOptions = {
+    /**
+     * An externally created browser instance.
+     * you can get a browser directly from puppeteer via `puppeteer.launch()`
+     *
+     * Note: The browser will be closed by the library after the scraper finishes unless `skipCloseBrowser` is set to true
+     */
+    browser: Browser;
+    /**
+     * If true, the browser will not be closed by the library after the scraper finishes
+     */
+    skipCloseBrowser?: boolean;
+} | {
+    /**
+     * An externally managed browser context. This is useful when you want to manage the browser
      */
-    browser?: any;
+    browserContext: BrowserContext;
+} | {
+    /**
+     * shows the browser while scraping, good for debugging (default false)
+     */
+    showBrowser?: boolean;
     /**
      * provide a patch to local chromium to be used by puppeteer. Relevant when using
      * `israeli-bank-scrapers-core` library
      */
     executablePath?: string;
-    /**
-     * if set to true, all installment transactions will be combine into the first one
-     */
-    combineInstallments?: boolean;
     /**
      * additional arguments to pass to the browser instance. The list of flags can be found in
      *
@@ -91,30 +128,7 @@ export interface ScraperOptions {
      * @param browser
      */
     prepareBrowser?: (browser: Browser) => Promise<void>;
-    /**
-     * adjust the page instance before it is being used.
-     *
-     * @param page
-     */
-    preparePage?: (page: Page) => Promise<void>;
-    /**
-     * if set, store a screenshot if failed to scrape. Used for debug purposes
-     */
-    storeFailureScreenShotPath?: string;
-    /**
-     * if set, will set the timeout in milliseconds of puppeteer's `page.setDefaultTimeout`.
-     */
-    defaultTimeout?: number;
-    /**
-     * Options for manipulation of output data
-     */
-    outputData?: OutputDataOptions;
-    /**
-     * Perform additional operation for each transaction to get more information (Like category) about it.
-     * Please note: It will take more time to finish the process.
-     */
-    additionalTransactionInformation?: boolean;
-}
+};
 export interface OutputDataOptions {
     /**
      * if true, the result wouldn't be filtered out by date, and you will return unfiltered scrapped data.
@@ -149,3 +163,4 @@ export interface ScraperLoginResult {
     errorMessage?: string;
     persistentOtpToken?: string;
 }
+export {};
