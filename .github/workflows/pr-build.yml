name: PR Pipeline

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Check if build-relevant files were changed
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      build-needed: ${{ steps.check.outputs.build-needed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for build-relevant changes
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "build-needed=true" >> $GITHUB_OUTPUT
            echo "Build triggered manually"
            exit 0
          fi

          # Get the list of changed files
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          echo "Changed files:"
          echo "$changed_files"

          # Check if any build-relevant files were changed
          build_relevant_patterns=(
            "src/"
            "patches/"
            "package.json"
            "package-lock.json"
            "tsconfig.json"
            ".eslintrc.js"
            ".prettierrc.js"
            "Dockerfile"
            "docker-compose.yml"
            ".github/workflows/pr-build.yml"
          )

          build_needed=false
          for pattern in "${build_relevant_patterns[@]}"; do
            if echo "$changed_files" | grep -q "^$pattern"; then
              build_needed=true
              echo "Found build-relevant changes in: $pattern"
              break
            fi
          done

          echo "build-needed=$build_needed" >> $GITHUB_OUTPUT
          if [[ "$build_needed" == "true" ]]; then
            echo "Build is needed"
          else
            echo "No build-relevant files changed - build will be skipped"
          fi

  lint:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.build-needed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: "npm"
      - run: npm ci
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: [check-changes, lint]
    if: needs.check-changes.outputs.build-needed == 'true'

    strategy:
      matrix:
        node-version: [20, latest]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: [check-changes, test]
    if: always() && needs.check-changes.result == 'success'
    strategy:
      matrix:
        node-version: [20, latest]

    steps:
      - name: Skip build - no relevant changes
        if: needs.check-changes.outputs.build-needed == 'false'
        run: |
          echo "✅ Build skipped - no code changes detected"
          echo "This PR only contains non-build files (documentation, etc.)"

      - uses: actions/checkout@v4
        if: needs.check-changes.outputs.build-needed == 'true'
      - uses: actions/setup-node@v4
        if: needs.check-changes.outputs.build-needed == 'true'
        with:
          node-version: latest
          cache: "npm"
      - run: npm ci
        if: needs.check-changes.outputs.build-needed == 'true'
      - run: npm run build
        if: needs.check-changes.outputs.build-needed == 'true'

      - name: Build completed
        if: needs.check-changes.outputs.build-needed == 'true'
        run: echo "✅ Build completed successfully"

  prepare:
    runs-on: ubuntu-latest
    needs: [check-changes, test]
    if: always() && needs.check-changes.result == 'success'

    outputs:
      repository: ${{ steps.normalize-repository-name.outputs.repository }}
      is_external: ${{ steps.pr-check.outputs.is_external }}
      build_needed: ${{ needs.check-changes.outputs.build-needed }}

    steps:
      - name: Normalize repository name
        id: normalize-repository-name
        run: echo "repository=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Check if PR is from external contributor
        id: pr-check
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            echo "is_external=false" >> $GITHUB_OUTPUT
            echo "PR is from the same repository (internal)"
          else
            echo "is_external=true" >> $GITHUB_OUTPUT
            echo "PR is from a fork (external contributor)"
          fi

  build_image_internal:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.is_external == 'false'

    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Comment - No image build needed
        if: needs.prepare.outputs.build_needed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;

            const comment = `📦 **Docker Image Build Skipped**

            No Docker image was built for this PR because it only contains changes to documentation or other non-code files.

            ✅ Status: Passed (no build required)`;

            // Find existing comment about Docker build to update instead of creating new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.data.find(c =>
              c.body.includes('📦 **Docker Image Build Skipped**')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Checkout repository
        if: needs.prepare.outputs.build_needed == 'true'
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        if: needs.prepare.outputs.build_needed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata for PR
        if: needs.prepare.outputs.build_needed == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ needs.prepare.outputs.repository }}
          tags: type=ref,event=pr

      - name: Build and push Docker image
        if: needs.prepare.outputs.build_needed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get image size
        if: needs.prepare.outputs.build_needed == 'true'
        id: image-size
        run: |
          IMAGE_TAG="${{ steps.meta.outputs.tags }}"
          # Get image size in human-readable format
          IMAGE_SIZE=$(docker images --format "{{.Size}}" "$IMAGE_TAG")
          echo "size=$IMAGE_SIZE" >> $GITHUB_OUTPUT
          echo "Image size: $IMAGE_SIZE"

      - name: Comment on PR with image information
        if: needs.prepare.outputs.build_needed == 'true'
        uses: actions/github-script@v7
        env:
          IMAGE_SIZE: ${{ steps.image-size.outputs.size }}
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repository = context.repo.repo.toLowerCase();
            const owner = context.repo.owner.toLowerCase();
            const imageTag = `pr-${prNumber}`;
            const imageName = `ghcr.io/${owner}/${repository}:${imageTag}`;
            const ghcrUrl = `https://github.com/${owner}/${repository}/pkgs/container/${repository}`;

            const imageSize = process.env.IMAGE_SIZE || 'Unknown';

            const comment = `🐳 Docker image built and pushed: \`${imageName}\`

            📏 **Size**: ${imageSize}
            🔗 [View on GitHub Container Registry](${ghcrUrl})`;

            // Find existing comment about Docker image to update instead of creating new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.data.find(c =>
              c.body.includes('🐳 Docker image built and pushed:') &&
              c.body.includes(`pr-${prNumber}`)
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  build_image_external:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.is_external == 'true'

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Comment - No image build needed
        if: needs.prepare.outputs.build_needed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;

            const comment = `📦 **Docker Image Build Skipped**

            No Docker image was built for this PR because it only contains changes to documentation or other non-code files.

            ✅ Status: Passed (no build required)`;

            // Find existing comment about Docker build to update instead of creating new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.data.find(c =>
              c.body.includes('📦 **Docker Image Build Skipped**')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Checkout repository
        if: needs.prepare.outputs.build_needed == 'true'
        uses: actions/checkout@v4

      - name: Extract Docker metadata for PR
        if: needs.prepare.outputs.build_needed == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ needs.prepare.outputs.repository }}
          tags: type=ref,event=pr

      - name: Build Docker image
        if: needs.prepare.outputs.build_needed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Get image and artifact sizes
        if: needs.prepare.outputs.build_needed == 'true'
        id: image-size
        run: |
          # Load the image to inspect it
          docker load < /tmp/image.tar
          IMAGE_TAG="${{ steps.meta.outputs.tags }}"

          # Get image size in human-readable format
          IMAGE_SIZE=$(docker images --format "{{.Size}}" "$IMAGE_TAG")
          echo "image_size=$IMAGE_SIZE" >> $GITHUB_OUTPUT

          # Get tar file size
          TAR_SIZE=$(ls -lh /tmp/image.tar | awk '{print $5}')
          echo "tar_size=$TAR_SIZE" >> $GITHUB_OUTPUT

          echo "Image size: $IMAGE_SIZE"
          echo "Tar file size: $TAR_SIZE"

      - name: Upload Docker image as artifact
        if: needs.prepare.outputs.build_needed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-pr-${{ github.event.pull_request.number }}
          path: /tmp/image.tar
          retention-days: 7

      - name: External PR notice
        if: needs.prepare.outputs.build_needed == 'true'
        run: |
          echo "ℹ️ This PR is from an external contributor."
          echo "✅ Docker image was built successfully and saved as artifact."
          echo "📦 Download the artifact 'docker-image-pr-${{ github.event.pull_request.number }}' to get the image."
          echo "🔧 Load it with: docker load < image.tar"
          echo "🔄 The image will be built and pushed to registry when the PR is merged."

      - name: Comment on PR with artifact instructions
        if: needs.prepare.outputs.build_needed == 'true'
        uses: actions/github-script@v7
        env:
          IMAGE_SIZE: ${{ steps.image-size.outputs.image_size }}
          TAR_SIZE: ${{ steps.image-size.outputs.tar_size }}
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repository = context.repo.repo.toLowerCase();
            const owner = context.repo.owner.toLowerCase();
            const runId = context.runId;

            const imageSize = process.env.IMAGE_SIZE || 'Unknown';
            const tarSize = process.env.TAR_SIZE || 'Unknown';

            const comment = `## 🐳 Docker Image Available as Artifact

            Your PR Docker image has been built and is available for download!

            📏 **Image Size**: ${imageSize} (Download size: ${tarSize})

            ### 📦 Download & Load Instructions (Local Testing)

            **Bash (one-liner):**
            \`\`\`bash
            gh run download ${runId} -n docker-image-pr-${prNumber} && unzip docker-image-pr-${prNumber}.zip && docker load < image.tar
            \`\`\`

            **PowerShell (one-liner):**
            \`\`\`powershell
            gh run download ${runId} -n docker-image-pr-${prNumber}; Expand-Archive docker-image-pr-${prNumber}.zip -Force; docker load -i image.tar
            \`\`\`

            The image will be tagged as: \`ghcr.io/${owner}/${repository}:pr-${prNumber}\`

            > **Note**: Requires [GitHub CLI](https://cli.github.com/) to be installed and authenticated.

            ### 🚀 After Merge

            The image will be automatically built and pushed to the registry when this PR is merged, making it available for the regular scrape workflow.`;

            // Find existing comment about Docker artifact to update instead of creating new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.data.find(c =>
              c.body.includes('## 🐳 Docker Image Available as Artifact')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
