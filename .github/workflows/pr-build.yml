name: PR Pipeline

on:
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "patches/**"
      - "package.json"
      - "package-lock.json"
      - "tsconfig.json"
      - ".eslintrc.js"
      - ".prettierrc.js"
      - "Dockerfile"
      - "docker-compose.yml"
      - ".github/workflows/verify-build.yml"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: "npm"
      - run: npm ci
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        node-version: [20, latest]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        node-version: [20, latest]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: "npm"
      - run: npm ci
      - run: npm run build

  build_image:
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: normalize-repository-name
        run: echo "repository=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Check if PR is from external contributor
        id: pr-check
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            echo "is_external=false" >> $GITHUB_OUTPUT
            echo "PR is from the same repository (internal)"
          else
            echo "is_external=true" >> $GITHUB_OUTPUT
            echo "PR is from a fork (external contributor)"
          fi

      - name: Log in to the Container registry
        if: steps.pr-check.outputs.is_external == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata for PR
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.normalize-repository-name.outputs.repository }}
          tags: type=ref,event=pr

      - name: Build and push Docker image (internal PR)
        if: steps.pr-check.outputs.is_external == 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build Docker image only (external PR)
        if: steps.pr-check.outputs.is_external == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload Docker image as artifact (external PR)
        if: steps.pr-check.outputs.is_external == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-pr-${{ github.event.pull_request.number }}
          path: /tmp/image.tar
          retention-days: 7

      - name: External PR notice
        if: steps.pr-check.outputs.is_external == 'true'
        run: |
          echo "‚ÑπÔ∏è This PR is from an external contributor."
          echo "‚úÖ Docker image was built successfully and saved as artifact."
          echo "üì¶ Download the artifact 'docker-image-pr-${{ github.event.pull_request.number }}' to get the image."
          echo "üîß Load it with: docker load < image.tar"
          echo "üîÑ The image will be built and pushed to registry when the PR is merged."

      - name: Comment on PR with artifact instructions
        if: steps.pr-check.outputs.is_external == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repository = context.repo.repo.toLowerCase();
            const owner = context.repo.owner.toLowerCase();
            const runId = context.runId;

            const comment = `## üê≥ Docker Image Available as Artifact

            Your PR Docker image has been built and is available for download!

            ### üì¶ Download & Load Instructions (Local Testing)

            1. **Download the artifact**: Go to the [Actions tab](https://github.com/${owner}/${repository}/actions/runs/${runId}) and download \`docker-image-pr-${prNumber}\`
            2. **Extract**: \`unzip docker-image-pr-${prNumber}.zip\`
            3. **Load image**: \`docker load < image.tar\`
            4. **Verify**: \`docker images | grep ${owner}/${repository}\`

            The image will be tagged as: \`ghcr.io/${owner}/${repository}:pr-${prNumber}\`

            ### üîß Test with Scrape Action (Maintainers)

            Maintainers can test this PR's changes using the **[Scrape with PR Image](https://github.com/${owner}/${repository}/actions/workflows/scrape-pr.yml)** workflow:

            1. Go to the workflow and click "Run workflow"
            2. Enter:
               - **PR Number**: \`${prNumber}\`
               - **Run ID**: \`${runId}\`
               - Configure other scrape parameters as needed

            ### üöÄ After Merge

            The image will be automatically built and pushed to the registry when this PR is merged, making it available for the regular scrape workflow.`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
