name: Scrape with PR Image

on:
  workflow_dispatch:
    inputs:
      prNumber:
        required: true
        description: "PR number to use for Docker image"
        type: number
      runId:
        required: true
        description: "GitHub Actions run ID where the PR image artifact was created"
        type: string
      accountsToScrape:
        default: ""
        required: false
        description: "Accounts to scrape (comma separated)"
      daysBack:
        default: "10"
        required: false
        description: "Days back to scrape"
      worksheetName:
        default: "auto_moneyman"
        required: false
        description: "The name of the worksheet to write to"
      parallelScrapes:
        default: "1"
        required: false
        description: "Number of parallel scrapes to run"
      additionalTransactionInformationEnabled:
        description: "Enable additional transaction information (true/false)"
        type: boolean
        required: false
        default: false

env:
  MAX_PARALLEL_SCRAPERS: 3

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: PR Scrape Setup
        run: |
          echo "üöÄ Setting up scrape with PR #${{ github.event.inputs.prNumber }} image"
          echo "üì¶ Artifact from run: ${{ github.event.inputs.runId }}"
          echo "üìä Scraping configuration:"
          echo "  - Days back: ${{ github.event.inputs.daysBack }}"
          echo "  - Worksheet: ${{ github.event.inputs.worksheetName }}"
          echo "  - Accounts: ${{ github.event.inputs.accountsToScrape || 'all configured accounts' }}"
          echo "  - Parallel scrapers: ${{ github.event.inputs.parallelScrapes }}"
          echo "  - Additional info: ${{ github.event.inputs.additionalTransactionInformationEnabled }}"
          echo ""

      - name: Download PR Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-pr-${{ github.event.inputs.prNumber }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.runId }}

      - name: Load Docker image
        run: |
          if [ ! -f image.tar ]; then
            echo "‚ùå image.tar not found in artifact"
            ls -la
            exit 1
          fi
          echo "üì¶ Loading Docker image from artifact..."
          docker load < image.tar
          echo "‚úÖ Image loaded successfully"
          echo ""
          echo "üìã Available images:"
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"

      - id: normalize-repository-name
        run: echo "repository=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - id: set-container-image
        run: echo "image=ghcr.io/${{ steps.normalize-repository-name.outputs.repository }}:pr-${{ github.event.inputs.prNumber }}" >> $GITHUB_OUTPUT

      - name: Verify image exists
        run: |
          TARGET_IMAGE="${{ steps.set-container-image.outputs.image }}"
          echo "üîç Looking for image: $TARGET_IMAGE"

          if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^$TARGET_IMAGE$"; then
            echo "‚úÖ Image found: $TARGET_IMAGE"
            # Show image details
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" | grep "$TARGET_IMAGE" || true
          else
            echo "‚ùå Image not found: $TARGET_IMAGE"
            echo ""
            echo "üìã Available images:"
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
            echo ""
            echo "üí° Make sure the PR number and run ID are correct."
            echo "The image should have been built in the PR build workflow."
            exit 1
          fi

      - name: Run scraper with PR image
        run: >
          docker run --rm
          -e DEBUG
          -e DAYS_BACK
          -e TZ
          -e WORKSHEET_NAME
          -e ACCOUNTS_JSON
          -e TELEGRAM_API_KEY
          -e TELEGRAM_CHAT_ID
          -e GOOGLE_SHEET_ID
          -e GOOGLE_SERVICE_ACCOUNT_EMAIL
          -e GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY
          -e ACCOUNTS_TO_SCRAPE
          -e ADE_DATABASE_NAME
          -e ADE_TABLE_NAME
          -e ADE_INGESTION_MAPPING
          -e ADE_INGEST_URI
          -e AZURE_TENANT_ID
          -e AZURE_APP_ID
          -e AZURE_APP_KEY
          -e YNAB_TOKEN
          -e YNAB_BUDGET_ID
          -e YNAB_ACCOUNTS
          -e BUXFER_USER_NAME
          -e BUXFER_PASSWORD
          -e BUXFER_ACCOUNTS
          -e TRANSACTION_HASH_TYPE
          -e WEB_POST_URL
          -e MAX_PARALLEL_SCRAPERS
          -e DOMAIN_TRACKING_ENABLED
          -e FIREWALL_SETTINGS
          -e BLOCK_BY_DEFAULT
          -e ADDITIONAL_TRANSACTION_INFO_ENABLED
          ${{ steps.set-container-image.outputs.image }}
        env:
          DEBUG: ""
          TZ: "Asia/Jerusalem"
          DAYS_BACK: ${{ github.event.inputs.daysBack }}
          WORKSHEET_NAME: ${{ github.event.inputs.worksheetName }}
          ACCOUNTS_TO_SCRAPE: ${{ github.event.inputs.accountsToScrape }}
          ADDITIONAL_TRANSACTION_INFO_ENABLED: ${{ github.event.inputs.additionalTransactionInformationEnabled }}
          ACCOUNTS_JSON: ${{ secrets.ACCOUNTS_JSON }}
          TELEGRAM_API_KEY: ${{ secrets.TELEGRAM_API_KEY }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
          GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY }}
          ADE_DATABASE_NAME: ${{ secrets.ADE_DATABASE_NAME }}
          ADE_TABLE_NAME: ${{ secrets.ADE_TABLE_NAME }}
          ADE_INGESTION_MAPPING: ${{ secrets.ADE_INGESTION_MAPPING }}
          ADE_INGEST_URI: ${{ secrets.ADE_INGEST_URI }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
          AZURE_APP_KEY: ${{ secrets.AZURE_APP_KEY }}
          YNAB_TOKEN: ${{ secrets.YNAB_TOKEN }}
          YNAB_BUDGET_ID: ${{ secrets.YNAB_BUDGET_ID }}
          YNAB_ACCOUNTS: ${{ secrets.YNAB_ACCOUNTS }}
          BUXFER_USER_NAME: ${{ secrets.BUXFER_USER_NAME }}
          BUXFER_PASSWORD: ${{ secrets.BUXFER_PASSWORD }}
          BUXFER_ACCOUNTS: ${{ secrets.BUXFER_ACCOUNTS }}
          TRANSACTION_HASH_TYPE: ${{ secrets.TRANSACTION_HASH_TYPE }}
          WEB_POST_URL: ${{ secrets.WEB_POST_URL }}
          MAX_PARALLEL_SCRAPERS: ${{ github.event.inputs.parallelScrapes || env.MAX_PARALLEL_SCRAPERS }}
          DOMAIN_TRACKING_ENABLED: ${{ vars.DOMAIN_TRACKING_ENABLED }}
          FIREWALL_SETTINGS: ${{ secrets.FIREWALL_SETTINGS }}
          BLOCK_BY_DEFAULT: ${{ vars.BLOCK_BY_DEFAULT }}
